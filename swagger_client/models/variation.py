# coding: utf-8

"""
    LiveAgent API


    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Variation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Variation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'billable': 'bool',
            'name': 'str',
            'product_id': 'str',
            'product_name': 'str',
            'full_name': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'billable': 'billable',
            'name': 'name',
            'product_id': 'product_id',
            'product_name': 'product_name',
            'full_name': 'full_name',
            'description': 'description'
        }

        self._id = None
        self._billable = None
        self._name = None
        self._product_id = None
        self._product_name = None
        self._full_name = None
        self._description = None

    @property
    def id(self):
        """
        Gets the id of this Variation.


        :return: The id of this Variation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Variation.


        :param id: The id of this Variation.
        :type: str
        """
        
        self._id = id

    @property
    def billable(self):
        """
        Gets the billable of this Variation.


        :return: The billable of this Variation.
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """
        Sets the billable of this Variation.


        :param billable: The billable of this Variation.
        :type: bool
        """
        
        self._billable = billable

    @property
    def name(self):
        """
        Gets the name of this Variation.


        :return: The name of this Variation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Variation.


        :param name: The name of this Variation.
        :type: str
        """
        
        self._name = name

    @property
    def product_id(self):
        """
        Gets the product_id of this Variation.


        :return: The product_id of this Variation.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Variation.


        :param product_id: The product_id of this Variation.
        :type: str
        """
        
        self._product_id = product_id

    @property
    def product_name(self):
        """
        Gets the product_name of this Variation.


        :return: The product_name of this Variation.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this Variation.


        :param product_name: The product_name of this Variation.
        :type: str
        """
        
        self._product_name = product_name

    @property
    def full_name(self):
        """
        Gets the full_name of this Variation.
        Full name in format Product - Variation

        :return: The full_name of this Variation.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this Variation.
        Full name in format Product - Variation

        :param full_name: The full_name of this Variation.
        :type: str
        """
        
        self._full_name = full_name

    @property
    def description(self):
        """
        Gets the description of this Variation.


        :return: The description of this Variation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Variation.


        :param description: The description of this Variation.
        :type: str
        """
        
        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

