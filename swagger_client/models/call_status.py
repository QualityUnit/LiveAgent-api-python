# coding: utf-8

"""
    LiveAgent API


    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CallStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CallStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'agent_number': 'str',
            'queue_position': 'float'
        }

        self.attribute_map = {
            'status': 'status',
            'agent_number': 'agent_number',
            'queue_position': 'queue_position'
        }

        self._status = None
        self._agent_number = None
        self._queue_position = None

    @property
    def status(self):
        """
        Gets the status of this CallStatus.
        O (callee offline), Q (waiting in queue), R (ringing to an agent), F (finished)

        :return: The status of this CallStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CallStatus.
        O (callee offline), Q (waiting in queue), R (ringing to an agent), F (finished)

        :param status: The status of this CallStatus.
        :type: str
        """
        allowed_values = ["O", "Q", "R", "F"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )

        self._status = status

    @property
    def agent_number(self):
        """
        Gets the agent_number of this CallStatus.


        :return: The agent_number of this CallStatus.
        :rtype: str
        """
        return self._agent_number

    @agent_number.setter
    def agent_number(self, agent_number):
        """
        Sets the agent_number of this CallStatus.


        :param agent_number: The agent_number of this CallStatus.
        :type: str
        """
        
        self._agent_number = agent_number

    @property
    def queue_position(self):
        """
        Gets the queue_position of this CallStatus.


        :return: The queue_position of this CallStatus.
        :rtype: float
        """
        return self._queue_position

    @queue_position.setter
    def queue_position(self, queue_position):
        """
        Sets the queue_position of this CallStatus.


        :param queue_position: The queue_position of this CallStatus.
        :type: float
        """
        
        self._queue_position = queue_position

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

