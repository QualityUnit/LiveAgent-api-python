# coding: utf-8

"""
    LiveAgent API


    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Upgrade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Upgrade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variation_id': 'str',
            'addons': 'list[str]',
            'billing_period': 'str'
        }

        self.attribute_map = {
            'variation_id': 'variation_id',
            'addons': 'addons',
            'billing_period': 'billing_period'
        }

        self._variation_id = None
        self._addons = None
        self._billing_period = '1m'

    @property
    def variation_id(self):
        """
        Gets the variation_id of this Upgrade.


        :return: The variation_id of this Upgrade.
        :rtype: str
        """
        return self._variation_id

    @variation_id.setter
    def variation_id(self, variation_id):
        """
        Sets the variation_id of this Upgrade.


        :param variation_id: The variation_id of this Upgrade.
        :type: str
        """
        
        self._variation_id = variation_id

    @property
    def addons(self):
        """
        Gets the addons of this Upgrade.


        :return: The addons of this Upgrade.
        :rtype: list[str]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """
        Sets the addons of this Upgrade.


        :param addons: The addons of this Upgrade.
        :type: list[str]
        """
        
        self._addons = addons

    @property
    def billing_period(self):
        """
        Gets the billing_period of this Upgrade.


        :return: The billing_period of this Upgrade.
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """
        Sets the billing_period of this Upgrade.


        :param billing_period: The billing_period of this Upgrade.
        :type: str
        """
        allowed_values = ["1m"]
        if billing_period not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period`, must be one of {0}"
                .format(allowed_values)
            )

        self._billing_period = billing_period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

