# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CompanyListItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CompanyListItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'avatar_url': 'str',
            'type': 'str',
            'date_created': 'datetime',
            'language': 'str',
            'city': 'str',
            'countrycode': 'str',
            'emails': 'list[str]',
            'phones': 'list[str]',
            'groups': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'avatar_url': 'avatar_url',
            'type': 'type',
            'date_created': 'date_created',
            'language': 'language',
            'city': 'city',
            'countrycode': 'countrycode',
            'emails': 'emails',
            'phones': 'phones',
            'groups': 'groups'
        }

        self._id = None
        self._name = None
        self._description = None
        self._avatar_url = None
        self._type = 'V'
        self._date_created = None
        self._language = None
        self._city = None
        self._countrycode = None
        self._emails = None
        self._phones = None
        self._groups = None

    @property
    def id(self):
        """
        Gets the id of this CompanyListItem.


        :return: The id of this CompanyListItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CompanyListItem.


        :param id: The id of this CompanyListItem.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CompanyListItem.


        :return: The name of this CompanyListItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CompanyListItem.


        :param name: The name of this CompanyListItem.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this CompanyListItem.


        :return: The description of this CompanyListItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CompanyListItem.


        :param description: The description of this CompanyListItem.
        :type: str
        """
        self._description = description

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this CompanyListItem.


        :return: The avatar_url of this CompanyListItem.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this CompanyListItem.


        :param avatar_url: The avatar_url of this CompanyListItem.
        :type: str
        """
        self._avatar_url = avatar_url

    @property
    def type(self):
        """
        Gets the type of this CompanyListItem.
        V - visitor, R - registered visitor

        :return: The type of this CompanyListItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CompanyListItem.
        V - visitor, R - registered visitor

        :param type: The type of this CompanyListItem.
        :type: str
        """
        allowed_values = ["V", "R"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def date_created(self):
        """
        Gets the date_created of this CompanyListItem.


        :return: The date_created of this CompanyListItem.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this CompanyListItem.


        :param date_created: The date_created of this CompanyListItem.
        :type: datetime
        """
        self._date_created = date_created

    @property
    def language(self):
        """
        Gets the language of this CompanyListItem.


        :return: The language of this CompanyListItem.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this CompanyListItem.


        :param language: The language of this CompanyListItem.
        :type: str
        """
        self._language = language

    @property
    def city(self):
        """
        Gets the city of this CompanyListItem.


        :return: The city of this CompanyListItem.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this CompanyListItem.


        :param city: The city of this CompanyListItem.
        :type: str
        """
        self._city = city

    @property
    def countrycode(self):
        """
        Gets the countrycode of this CompanyListItem.


        :return: The countrycode of this CompanyListItem.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """
        Sets the countrycode of this CompanyListItem.


        :param countrycode: The countrycode of this CompanyListItem.
        :type: str
        """
        self._countrycode = countrycode

    @property
    def emails(self):
        """
        Gets the emails of this CompanyListItem.


        :return: The emails of this CompanyListItem.
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """
        Sets the emails of this CompanyListItem.


        :param emails: The emails of this CompanyListItem.
        :type: list[str]
        """
        self._emails = emails

    @property
    def phones(self):
        """
        Gets the phones of this CompanyListItem.


        :return: The phones of this CompanyListItem.
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """
        Sets the phones of this CompanyListItem.


        :param phones: The phones of this CompanyListItem.
        :type: list[str]
        """
        self._phones = phones

    @property
    def groups(self):
        """
        Gets the groups of this CompanyListItem.


        :return: The groups of this CompanyListItem.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this CompanyListItem.


        :param groups: The groups of this CompanyListItem.
        :type: list[str]
        """
        self._groups = groups

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

