# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CompanyListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'system_name': 'str',
        'description': 'str',
        'avatar_url': 'str',
        'type': 'str',
        'date_created': 'datetime',
        'language': 'str',
        'city': 'str',
        'countrycode': 'str',
        'ip': 'str',
        'emails': 'list[str]',
        'phones': 'list[str]',
        'groups': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'system_name': 'system_name',
        'description': 'description',
        'avatar_url': 'avatar_url',
        'type': 'type',
        'date_created': 'date_created',
        'language': 'language',
        'city': 'city',
        'countrycode': 'countrycode',
        'ip': 'ip',
        'emails': 'emails',
        'phones': 'phones',
        'groups': 'groups'
    }

    def __init__(self, id=None, name=None, system_name=None, description=None, avatar_url=None, type='V', date_created=None, language=None, city=None, countrycode=None, ip=None, emails=None, phones=None, groups=None):  # noqa: E501
        """CompanyListItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._system_name = None
        self._description = None
        self._avatar_url = None
        self._type = None
        self._date_created = None
        self._language = None
        self._city = None
        self._countrycode = None
        self._ip = None
        self._emails = None
        self._phones = None
        self._groups = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if system_name is not None:
            self.system_name = system_name
        if description is not None:
            self.description = description
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if type is not None:
            self.type = type
        if date_created is not None:
            self.date_created = date_created
        if language is not None:
            self.language = language
        if city is not None:
            self.city = city
        if countrycode is not None:
            self.countrycode = countrycode
        if ip is not None:
            self.ip = ip
        if emails is not None:
            self.emails = emails
        if phones is not None:
            self.phones = phones
        if groups is not None:
            self.groups = groups

    @property
    def id(self):
        """Gets the id of this CompanyListItem.  # noqa: E501


        :return: The id of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyListItem.


        :param id: The id of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompanyListItem.  # noqa: E501


        :return: The name of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyListItem.


        :param name: The name of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def system_name(self):
        """Gets the system_name of this CompanyListItem.  # noqa: E501


        :return: The system_name of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this CompanyListItem.


        :param system_name: The system_name of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def description(self):
        """Gets the description of this CompanyListItem.  # noqa: E501


        :return: The description of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanyListItem.


        :param description: The description of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def avatar_url(self):
        """Gets the avatar_url of this CompanyListItem.  # noqa: E501


        :return: The avatar_url of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this CompanyListItem.


        :param avatar_url: The avatar_url of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def type(self):
        """Gets the type of this CompanyListItem.  # noqa: E501

        V - visitor, R - registered visitor  # noqa: E501

        :return: The type of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompanyListItem.

        V - visitor, R - registered visitor  # noqa: E501

        :param type: The type of this CompanyListItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["V", "R"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def date_created(self):
        """Gets the date_created of this CompanyListItem.  # noqa: E501


        :return: The date_created of this CompanyListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CompanyListItem.


        :param date_created: The date_created of this CompanyListItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def language(self):
        """Gets the language of this CompanyListItem.  # noqa: E501


        :return: The language of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CompanyListItem.


        :param language: The language of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def city(self):
        """Gets the city of this CompanyListItem.  # noqa: E501


        :return: The city of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CompanyListItem.


        :param city: The city of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def countrycode(self):
        """Gets the countrycode of this CompanyListItem.  # noqa: E501


        :return: The countrycode of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this CompanyListItem.


        :param countrycode: The countrycode of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._countrycode = countrycode

    @property
    def ip(self):
        """Gets the ip of this CompanyListItem.  # noqa: E501


        :return: The ip of this CompanyListItem.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this CompanyListItem.


        :param ip: The ip of this CompanyListItem.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def emails(self):
        """Gets the emails of this CompanyListItem.  # noqa: E501


        :return: The emails of this CompanyListItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CompanyListItem.


        :param emails: The emails of this CompanyListItem.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def phones(self):
        """Gets the phones of this CompanyListItem.  # noqa: E501


        :return: The phones of this CompanyListItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this CompanyListItem.


        :param phones: The phones of this CompanyListItem.  # noqa: E501
        :type: list[str]
        """

        self._phones = phones

    @property
    def groups(self):
        """Gets the groups of this CompanyListItem.  # noqa: E501


        :return: The groups of this CompanyListItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CompanyListItem.


        :param groups: The groups of this CompanyListItem.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
