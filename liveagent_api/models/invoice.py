# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.customer import Customer  # noqa: F401,E501
from liveagent_api.models.invoice_item import InvoiceItem  # noqa: F401,E501


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'str',
        'number': 'str',
        'created_date': 'datetime',
        'from_date': 'datetime',
        'to_date': 'datetime',
        'paid_date': 'datetime',
        'price': 'float',
        'price_billed': 'float',
        'vat_rate': 'float',
        'currency': 'str',
        'customer': 'Customer',
        'items': 'list[InvoiceItem]'
    }

    attribute_map = {
        'subscription_id': 'subscription_id',
        'number': 'number',
        'created_date': 'created_date',
        'from_date': 'from_date',
        'to_date': 'to_date',
        'paid_date': 'paid_date',
        'price': 'price',
        'price_billed': 'price_billed',
        'vat_rate': 'vat_rate',
        'currency': 'currency',
        'customer': 'customer',
        'items': 'items'
    }

    def __init__(self, subscription_id=None, number=None, created_date=None, from_date=None, to_date=None, paid_date=None, price=None, price_billed=None, vat_rate=None, currency=None, customer=None, items=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501

        self._subscription_id = None
        self._number = None
        self._created_date = None
        self._from_date = None
        self._to_date = None
        self._paid_date = None
        self._price = None
        self._price_billed = None
        self._vat_rate = None
        self._currency = None
        self._customer = None
        self._items = None
        self.discriminator = None

        if subscription_id is not None:
            self.subscription_id = subscription_id
        if number is not None:
            self.number = number
        if created_date is not None:
            self.created_date = created_date
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if paid_date is not None:
            self.paid_date = paid_date
        if price is not None:
            self.price = price
        if price_billed is not None:
            self.price_billed = price_billed
        if vat_rate is not None:
            self.vat_rate = vat_rate
        if currency is not None:
            self.currency = currency
        if customer is not None:
            self.customer = customer
        if items is not None:
            self.items = items

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Invoice.  # noqa: E501


        :return: The subscription_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Invoice.


        :param subscription_id: The subscription_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def number(self):
        """Gets the number of this Invoice.  # noqa: E501


        :return: The number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Invoice.


        :param number: The number of this Invoice.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def created_date(self):
        """Gets the created_date of this Invoice.  # noqa: E501

        Invoice issued date  # noqa: E501

        :return: The created_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Invoice.

        Invoice issued date  # noqa: E501

        :param created_date: The created_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def from_date(self):
        """Gets the from_date of this Invoice.  # noqa: E501


        :return: The from_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Invoice.


        :param from_date: The from_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this Invoice.  # noqa: E501


        :return: The to_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Invoice.


        :param to_date: The to_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def paid_date(self):
        """Gets the paid_date of this Invoice.  # noqa: E501


        :return: The paid_date of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._paid_date

    @paid_date.setter
    def paid_date(self, paid_date):
        """Sets the paid_date of this Invoice.


        :param paid_date: The paid_date of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._paid_date = paid_date

    @property
    def price(self):
        """Gets the price of this Invoice.  # noqa: E501


        :return: The price of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Invoice.


        :param price: The price of this Invoice.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_billed(self):
        """Gets the price_billed of this Invoice.  # noqa: E501


        :return: The price_billed of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._price_billed

    @price_billed.setter
    def price_billed(self, price_billed):
        """Sets the price_billed of this Invoice.


        :param price_billed: The price_billed of this Invoice.  # noqa: E501
        :type: float
        """

        self._price_billed = price_billed

    @property
    def vat_rate(self):
        """Gets the vat_rate of this Invoice.  # noqa: E501


        :return: The vat_rate of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this Invoice.


        :param vat_rate: The vat_rate of this Invoice.  # noqa: E501
        :type: float
        """

        self._vat_rate = vat_rate

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501


        :return: The currency of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.


        :param currency: The currency of this Invoice.  # noqa: E501
        :type: str
        """
        allowed_values = ["USD", "EUR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Invoice.  # noqa: E501


        :return: The customer of this Invoice.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Invoice.


        :param customer: The customer of this Invoice.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def items(self):
        """Gets the items of this Invoice.  # noqa: E501


        :return: The items of this Invoice.  # noqa: E501
        :rtype: list[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Invoice.


        :param items: The items of this Invoice.  # noqa: E501
        :type: list[InvoiceItem]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
