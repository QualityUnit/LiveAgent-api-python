# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Invoice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Invoice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'subscription_id': 'str',
            'number': 'str',
            'created_date': 'datetime',
            'from_date': 'datetime',
            'to_date': 'datetime',
            'paid_date': 'datetime',
            'price': 'float',
            'customer': 'Customer',
            'items': 'list[InvoiceItem]',
            'currency': 'str'
        }

        self.attribute_map = {
            'subscription_id': 'subscription_id',
            'number': 'number',
            'created_date': 'created_date',
            'from_date': 'from_date',
            'to_date': 'to_date',
            'paid_date': 'paid_date',
            'price': 'price',
            'customer': 'customer',
            'items': 'items',
            'currency': 'currency'
        }

        self._subscription_id = None
        self._number = None
        self._created_date = None
        self._from_date = None
        self._to_date = None
        self._paid_date = None
        self._price = None
        self._customer = None
        self._items = None
        self._currency = None

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this Invoice.


        :return: The subscription_id of this Invoice.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this Invoice.


        :param subscription_id: The subscription_id of this Invoice.
        :type: str
        """
        self._subscription_id = subscription_id

    @property
    def number(self):
        """
        Gets the number of this Invoice.


        :return: The number of this Invoice.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this Invoice.


        :param number: The number of this Invoice.
        :type: str
        """
        self._number = number

    @property
    def created_date(self):
        """
        Gets the created_date of this Invoice.
        Invoice issued date

        :return: The created_date of this Invoice.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Invoice.
        Invoice issued date

        :param created_date: The created_date of this Invoice.
        :type: datetime
        """
        self._created_date = created_date

    @property
    def from_date(self):
        """
        Gets the from_date of this Invoice.


        :return: The from_date of this Invoice.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """
        Sets the from_date of this Invoice.


        :param from_date: The from_date of this Invoice.
        :type: datetime
        """
        self._from_date = from_date

    @property
    def to_date(self):
        """
        Gets the to_date of this Invoice.


        :return: The to_date of this Invoice.
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """
        Sets the to_date of this Invoice.


        :param to_date: The to_date of this Invoice.
        :type: datetime
        """
        self._to_date = to_date

    @property
    def paid_date(self):
        """
        Gets the paid_date of this Invoice.


        :return: The paid_date of this Invoice.
        :rtype: datetime
        """
        return self._paid_date

    @paid_date.setter
    def paid_date(self, paid_date):
        """
        Sets the paid_date of this Invoice.


        :param paid_date: The paid_date of this Invoice.
        :type: datetime
        """
        self._paid_date = paid_date

    @property
    def price(self):
        """
        Gets the price of this Invoice.


        :return: The price of this Invoice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Invoice.


        :param price: The price of this Invoice.
        :type: float
        """
        self._price = price

    @property
    def customer(self):
        """
        Gets the customer of this Invoice.


        :return: The customer of this Invoice.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this Invoice.


        :param customer: The customer of this Invoice.
        :type: Customer
        """
        self._customer = customer

    @property
    def items(self):
        """
        Gets the items of this Invoice.


        :return: The items of this Invoice.
        :rtype: list[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this Invoice.


        :param items: The items of this Invoice.
        :type: list[InvoiceItem]
        """
        self._items = items

    @property
    def currency(self):
        """
        Gets the currency of this Invoice.


        :return: The currency of this Invoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Invoice.


        :param currency: The currency of this Invoice.
        :type: str
        """
        allowed_values = ["USD", "EUR"]
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency`, must be one of {0}"
                .format(allowed_values)
            )
        self._currency = currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

