# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class CustomDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_domain': 'str',
        'ssl_key': 'str',
        'ssl_crt': 'str'
    }

    attribute_map = {
        'custom_domain': 'custom_domain',
        'ssl_key': 'ssl_key',
        'ssl_crt': 'ssl_crt'
    }

    def __init__(self, custom_domain=None, ssl_key=None, ssl_crt=None, _configuration=None):  # noqa: E501
        """CustomDomain - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_domain = None
        self._ssl_key = None
        self._ssl_crt = None
        self.discriminator = None

        if custom_domain is not None:
            self.custom_domain = custom_domain
        if ssl_key is not None:
            self.ssl_key = ssl_key
        if ssl_crt is not None:
            self.ssl_crt = ssl_crt

    @property
    def custom_domain(self):
        """Gets the custom_domain of this CustomDomain.  # noqa: E501


        :return: The custom_domain of this CustomDomain.  # noqa: E501
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this CustomDomain.


        :param custom_domain: The custom_domain of this CustomDomain.  # noqa: E501
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def ssl_key(self):
        """Gets the ssl_key of this CustomDomain.  # noqa: E501


        :return: The ssl_key of this CustomDomain.  # noqa: E501
        :rtype: str
        """
        return self._ssl_key

    @ssl_key.setter
    def ssl_key(self, ssl_key):
        """Sets the ssl_key of this CustomDomain.


        :param ssl_key: The ssl_key of this CustomDomain.  # noqa: E501
        :type: str
        """

        self._ssl_key = ssl_key

    @property
    def ssl_crt(self):
        """Gets the ssl_crt of this CustomDomain.  # noqa: E501


        :return: The ssl_crt of this CustomDomain.  # noqa: E501
        :rtype: str
        """
        return self._ssl_crt

    @ssl_crt.setter
    def ssl_crt(self, ssl_crt):
        """Sets the ssl_crt of this CustomDomain.


        :param ssl_crt: The ssl_crt of this CustomDomain.  # noqa: E501
        :type: str
        """

        self._ssl_crt = ssl_crt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomDomain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomDomain):
            return True

        return self.to_dict() != other.to_dict()
