# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'date_created': 'datetime',
        'date_changed': 'datetime'
    }

    attribute_map = {
        'type': 'type',
        'date_created': 'date_created',
        'date_changed': 'date_changed'
    }

    def __init__(self, type='V', date_created=None, date_changed=None, _configuration=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._date_created = None
        self._date_changed = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if date_created is not None:
            self.date_created = date_created
        if date_changed is not None:
            self.date_changed = date_changed

    @property
    def type(self):
        """Gets the type of this Company.  # noqa: E501

        V - visitor, R - registered visitor  # noqa: E501

        :return: The type of this Company.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Company.

        V - visitor, R - registered visitor  # noqa: E501

        :param type: The type of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = ["V", "R"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def date_created(self):
        """Gets the date_created of this Company.  # noqa: E501


        :return: The date_created of this Company.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Company.


        :param date_created: The date_created of this Company.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_changed(self):
        """Gets the date_changed of this Company.  # noqa: E501

        Set automatically  # noqa: E501

        :return: The date_changed of this Company.  # noqa: E501
        :rtype: datetime
        """
        return self._date_changed

    @date_changed.setter
    def date_changed(self, date_changed):
        """Sets the date_changed of this Company.

        Set automatically  # noqa: E501

        :param date_changed: The date_changed of this Company.  # noqa: E501
        :type: datetime
        """

        self._date_changed = date_changed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Company):
            return True

        return self.to_dict() != other.to_dict()
