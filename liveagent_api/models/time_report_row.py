# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class TimeReportRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'agentid': 'str',
        'agent': 'str',
        'conversationid': 'str',
        'ticket': 'str',
        'parent_contactid': 'str',
        'company': 'str',
        'contactid': 'str',
        'customer': 'str',
        'customer_firstname': 'str',
        'customer_lastname': 'str',
        'customer_systemname': 'str',
        'agent_ticket': 'str',
        'reportdate': 'str',
        'reportedtime': 'str',
        'reportedtime_hhmmss': 'str',
        'spenttime': 'str',
        'dateinvoiced': 'str',
        'note': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'agentid': 'agentid',
        'agent': 'agent',
        'conversationid': 'conversationid',
        'ticket': 'ticket',
        'parent_contactid': 'parent_contactid',
        'company': 'company',
        'contactid': 'contactid',
        'customer': 'customer',
        'customer_firstname': 'customer_firstname',
        'customer_lastname': 'customer_lastname',
        'customer_systemname': 'customer_systemname',
        'agent_ticket': 'agent_ticket',
        'reportdate': 'reportdate',
        'reportedtime': 'reportedtime',
        'reportedtime_hhmmss': 'reportedtime_hhmmss',
        'spenttime': 'spenttime',
        'dateinvoiced': 'dateinvoiced',
        'note': 'note',
        'type': 'type'
    }

    def __init__(self, id=None, agentid=None, agent=None, conversationid=None, ticket=None, parent_contactid=None, company=None, contactid=None, customer=None, customer_firstname=None, customer_lastname=None, customer_systemname=None, agent_ticket=None, reportdate=None, reportedtime=None, reportedtime_hhmmss=None, spenttime=None, dateinvoiced=None, note=None, type=None, _configuration=None):  # noqa: E501
        """TimeReportRow - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._agentid = None
        self._agent = None
        self._conversationid = None
        self._ticket = None
        self._parent_contactid = None
        self._company = None
        self._contactid = None
        self._customer = None
        self._customer_firstname = None
        self._customer_lastname = None
        self._customer_systemname = None
        self._agent_ticket = None
        self._reportdate = None
        self._reportedtime = None
        self._reportedtime_hhmmss = None
        self._spenttime = None
        self._dateinvoiced = None
        self._note = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if agentid is not None:
            self.agentid = agentid
        if agent is not None:
            self.agent = agent
        if conversationid is not None:
            self.conversationid = conversationid
        if ticket is not None:
            self.ticket = ticket
        if parent_contactid is not None:
            self.parent_contactid = parent_contactid
        if company is not None:
            self.company = company
        if contactid is not None:
            self.contactid = contactid
        if customer is not None:
            self.customer = customer
        if customer_firstname is not None:
            self.customer_firstname = customer_firstname
        if customer_lastname is not None:
            self.customer_lastname = customer_lastname
        if customer_systemname is not None:
            self.customer_systemname = customer_systemname
        if agent_ticket is not None:
            self.agent_ticket = agent_ticket
        if reportdate is not None:
            self.reportdate = reportdate
        if reportedtime is not None:
            self.reportedtime = reportedtime
        if reportedtime_hhmmss is not None:
            self.reportedtime_hhmmss = reportedtime_hhmmss
        if spenttime is not None:
            self.spenttime = spenttime
        if dateinvoiced is not None:
            self.dateinvoiced = dateinvoiced
        if note is not None:
            self.note = note
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this TimeReportRow.  # noqa: E501


        :return: The id of this TimeReportRow.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeReportRow.


        :param id: The id of this TimeReportRow.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def agentid(self):
        """Gets the agentid of this TimeReportRow.  # noqa: E501


        :return: The agentid of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._agentid

    @agentid.setter
    def agentid(self, agentid):
        """Sets the agentid of this TimeReportRow.


        :param agentid: The agentid of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._agentid = agentid

    @property
    def agent(self):
        """Gets the agent of this TimeReportRow.  # noqa: E501


        :return: The agent of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this TimeReportRow.


        :param agent: The agent of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def conversationid(self):
        """Gets the conversationid of this TimeReportRow.  # noqa: E501


        :return: The conversationid of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._conversationid

    @conversationid.setter
    def conversationid(self, conversationid):
        """Sets the conversationid of this TimeReportRow.


        :param conversationid: The conversationid of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._conversationid = conversationid

    @property
    def ticket(self):
        """Gets the ticket of this TimeReportRow.  # noqa: E501


        :return: The ticket of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this TimeReportRow.


        :param ticket: The ticket of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._ticket = ticket

    @property
    def parent_contactid(self):
        """Gets the parent_contactid of this TimeReportRow.  # noqa: E501


        :return: The parent_contactid of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._parent_contactid

    @parent_contactid.setter
    def parent_contactid(self, parent_contactid):
        """Sets the parent_contactid of this TimeReportRow.


        :param parent_contactid: The parent_contactid of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._parent_contactid = parent_contactid

    @property
    def company(self):
        """Gets the company of this TimeReportRow.  # noqa: E501


        :return: The company of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this TimeReportRow.


        :param company: The company of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def contactid(self):
        """Gets the contactid of this TimeReportRow.  # noqa: E501


        :return: The contactid of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._contactid

    @contactid.setter
    def contactid(self, contactid):
        """Sets the contactid of this TimeReportRow.


        :param contactid: The contactid of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._contactid = contactid

    @property
    def customer(self):
        """Gets the customer of this TimeReportRow.  # noqa: E501


        :return: The customer of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this TimeReportRow.


        :param customer: The customer of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def customer_firstname(self):
        """Gets the customer_firstname of this TimeReportRow.  # noqa: E501


        :return: The customer_firstname of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._customer_firstname

    @customer_firstname.setter
    def customer_firstname(self, customer_firstname):
        """Sets the customer_firstname of this TimeReportRow.


        :param customer_firstname: The customer_firstname of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._customer_firstname = customer_firstname

    @property
    def customer_lastname(self):
        """Gets the customer_lastname of this TimeReportRow.  # noqa: E501


        :return: The customer_lastname of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._customer_lastname

    @customer_lastname.setter
    def customer_lastname(self, customer_lastname):
        """Sets the customer_lastname of this TimeReportRow.


        :param customer_lastname: The customer_lastname of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._customer_lastname = customer_lastname

    @property
    def customer_systemname(self):
        """Gets the customer_systemname of this TimeReportRow.  # noqa: E501


        :return: The customer_systemname of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._customer_systemname

    @customer_systemname.setter
    def customer_systemname(self, customer_systemname):
        """Sets the customer_systemname of this TimeReportRow.


        :param customer_systemname: The customer_systemname of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._customer_systemname = customer_systemname

    @property
    def agent_ticket(self):
        """Gets the agent_ticket of this TimeReportRow.  # noqa: E501


        :return: The agent_ticket of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._agent_ticket

    @agent_ticket.setter
    def agent_ticket(self, agent_ticket):
        """Sets the agent_ticket of this TimeReportRow.


        :param agent_ticket: The agent_ticket of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._agent_ticket = agent_ticket

    @property
    def reportdate(self):
        """Gets the reportdate of this TimeReportRow.  # noqa: E501


        :return: The reportdate of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._reportdate

    @reportdate.setter
    def reportdate(self, reportdate):
        """Sets the reportdate of this TimeReportRow.


        :param reportdate: The reportdate of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._reportdate = reportdate

    @property
    def reportedtime(self):
        """Gets the reportedtime of this TimeReportRow.  # noqa: E501


        :return: The reportedtime of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._reportedtime

    @reportedtime.setter
    def reportedtime(self, reportedtime):
        """Sets the reportedtime of this TimeReportRow.


        :param reportedtime: The reportedtime of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._reportedtime = reportedtime

    @property
    def reportedtime_hhmmss(self):
        """Gets the reportedtime_hhmmss of this TimeReportRow.  # noqa: E501


        :return: The reportedtime_hhmmss of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._reportedtime_hhmmss

    @reportedtime_hhmmss.setter
    def reportedtime_hhmmss(self, reportedtime_hhmmss):
        """Sets the reportedtime_hhmmss of this TimeReportRow.


        :param reportedtime_hhmmss: The reportedtime_hhmmss of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._reportedtime_hhmmss = reportedtime_hhmmss

    @property
    def spenttime(self):
        """Gets the spenttime of this TimeReportRow.  # noqa: E501


        :return: The spenttime of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._spenttime

    @spenttime.setter
    def spenttime(self, spenttime):
        """Sets the spenttime of this TimeReportRow.


        :param spenttime: The spenttime of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._spenttime = spenttime

    @property
    def dateinvoiced(self):
        """Gets the dateinvoiced of this TimeReportRow.  # noqa: E501


        :return: The dateinvoiced of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._dateinvoiced

    @dateinvoiced.setter
    def dateinvoiced(self, dateinvoiced):
        """Sets the dateinvoiced of this TimeReportRow.


        :param dateinvoiced: The dateinvoiced of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._dateinvoiced = dateinvoiced

    @property
    def note(self):
        """Gets the note of this TimeReportRow.  # noqa: E501


        :return: The note of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TimeReportRow.


        :param note: The note of this TimeReportRow.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def type(self):
        """Gets the type of this TimeReportRow.  # noqa: E501


        :return: The type of this TimeReportRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeReportRow.


        :param type: The type of this TimeReportRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeReportRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeReportRow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeReportRow):
            return True

        return self.to_dict() != other.to_dict()
