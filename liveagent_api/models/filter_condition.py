# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FilterCondition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FilterCondition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'field_id': 'str',
            'section_code': 'str',
            'code': 'str',
            'operator': 'str',
            'value': 'str'
        }

        self.attribute_map = {
            'field_id': 'field_id',
            'section_code': 'section_code',
            'code': 'code',
            'operator': 'operator',
            'value': 'value'
        }

        self._field_id = None
        self._section_code = None
        self._code = None
        self._operator = None
        self._value = None

    @property
    def field_id(self):
        """
        Gets the field_id of this FilterCondition.


        :return: The field_id of this FilterCondition.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """
        Sets the field_id of this FilterCondition.


        :param field_id: The field_id of this FilterCondition.
        :type: str
        """
        self._field_id = field_id

    @property
    def section_code(self):
        """
        Gets the section_code of this FilterCondition.


        :return: The section_code of this FilterCondition.
        :rtype: str
        """
        return self._section_code

    @section_code.setter
    def section_code(self, section_code):
        """
        Sets the section_code of this FilterCondition.


        :param section_code: The section_code of this FilterCondition.
        :type: str
        """
        self._section_code = section_code

    @property
    def code(self):
        """
        Gets the code of this FilterCondition.


        :return: The code of this FilterCondition.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this FilterCondition.


        :param code: The code of this FilterCondition.
        :type: str
        """
        self._code = code

    @property
    def operator(self):
        """
        Gets the operator of this FilterCondition.


        :return: The operator of this FilterCondition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this FilterCondition.


        :param operator: The operator of this FilterCondition.
        :type: str
        """
        self._operator = operator

    @property
    def value(self):
        """
        Gets the value of this FilterCondition.


        :return: The value of this FilterCondition.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this FilterCondition.


        :param value: The value of this FilterCondition.
        :type: str
        """
        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

