# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CallListItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CallListItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ticket_id': 'str',
            'type': 'str',
            'from_number': 'str',
            'from_name': 'str',
            'to_number': 'str',
            'to_name': 'str',
            'date_created': 'datetime',
            'date_answered': 'datetime',
            'date_finished': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'ticket_id': 'ticketId',
            'type': 'type',
            'from_number': 'fromNumber',
            'from_name': 'fromName',
            'to_number': 'toNumber',
            'to_name': 'toName',
            'date_created': 'dateCreated',
            'date_answered': 'dateAnswered',
            'date_finished': 'dateFinished'
        }

        self._id = None
        self._ticket_id = None
        self._type = None
        self._from_number = None
        self._from_name = None
        self._to_number = None
        self._to_name = None
        self._date_created = None
        self._date_answered = None
        self._date_finished = None

    @property
    def id(self):
        """
        Gets the id of this CallListItem.


        :return: The id of this CallListItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CallListItem.


        :param id: The id of this CallListItem.
        :type: str
        """
        self._id = id

    @property
    def ticket_id(self):
        """
        Gets the ticket_id of this CallListItem.


        :return: The ticket_id of this CallListItem.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """
        Sets the ticket_id of this CallListItem.


        :param ticket_id: The ticket_id of this CallListItem.
        :type: str
        """
        self._ticket_id = ticket_id

    @property
    def type(self):
        """
        Gets the type of this CallListItem.
        I - incoming, O - outgoing, T - internal

        :return: The type of this CallListItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CallListItem.
        I - incoming, O - outgoing, T - internal

        :param type: The type of this CallListItem.
        :type: str
        """
        allowed_values = ["I", "O", "T"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def from_number(self):
        """
        Gets the from_number of this CallListItem.


        :return: The from_number of this CallListItem.
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """
        Sets the from_number of this CallListItem.


        :param from_number: The from_number of this CallListItem.
        :type: str
        """
        self._from_number = from_number

    @property
    def from_name(self):
        """
        Gets the from_name of this CallListItem.


        :return: The from_name of this CallListItem.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """
        Sets the from_name of this CallListItem.


        :param from_name: The from_name of this CallListItem.
        :type: str
        """
        self._from_name = from_name

    @property
    def to_number(self):
        """
        Gets the to_number of this CallListItem.


        :return: The to_number of this CallListItem.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """
        Sets the to_number of this CallListItem.


        :param to_number: The to_number of this CallListItem.
        :type: str
        """
        self._to_number = to_number

    @property
    def to_name(self):
        """
        Gets the to_name of this CallListItem.


        :return: The to_name of this CallListItem.
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """
        Sets the to_name of this CallListItem.


        :param to_name: The to_name of this CallListItem.
        :type: str
        """
        self._to_name = to_name

    @property
    def date_created(self):
        """
        Gets the date_created of this CallListItem.


        :return: The date_created of this CallListItem.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this CallListItem.


        :param date_created: The date_created of this CallListItem.
        :type: datetime
        """
        self._date_created = date_created

    @property
    def date_answered(self):
        """
        Gets the date_answered of this CallListItem.


        :return: The date_answered of this CallListItem.
        :rtype: datetime
        """
        return self._date_answered

    @date_answered.setter
    def date_answered(self, date_answered):
        """
        Sets the date_answered of this CallListItem.


        :param date_answered: The date_answered of this CallListItem.
        :type: datetime
        """
        self._date_answered = date_answered

    @property
    def date_finished(self):
        """
        Gets the date_finished of this CallListItem.


        :return: The date_finished of this CallListItem.
        :rtype: datetime
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """
        Sets the date_finished of this CallListItem.


        :param date_finished: The date_finished of this CallListItem.
        :type: datetime
        """
        self._date_finished = date_finished

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

