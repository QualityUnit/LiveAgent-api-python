# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CallListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ticket_id': 'str',
        'type': 'str',
        'from_number': 'str',
        'from_name': 'str',
        'to_number': 'str',
        'to_name': 'str',
        'via_number': 'str',
        'date_created': 'datetime',
        'date_answered': 'datetime',
        'date_finished': 'datetime',
        'call_duration': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ticket_id': 'ticketId',
        'type': 'type',
        'from_number': 'fromNumber',
        'from_name': 'fromName',
        'to_number': 'toNumber',
        'to_name': 'toName',
        'via_number': 'viaNumber',
        'date_created': 'dateCreated',
        'date_answered': 'dateAnswered',
        'date_finished': 'dateFinished',
        'call_duration': 'callDuration'
    }

    def __init__(self, id=None, ticket_id=None, type=None, from_number=None, from_name=None, to_number=None, to_name=None, via_number=None, date_created=None, date_answered=None, date_finished=None, call_duration=None):  # noqa: E501
        """CallListItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ticket_id = None
        self._type = None
        self._from_number = None
        self._from_name = None
        self._to_number = None
        self._to_name = None
        self._via_number = None
        self._date_created = None
        self._date_answered = None
        self._date_finished = None
        self._call_duration = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ticket_id is not None:
            self.ticket_id = ticket_id
        if type is not None:
            self.type = type
        if from_number is not None:
            self.from_number = from_number
        if from_name is not None:
            self.from_name = from_name
        if to_number is not None:
            self.to_number = to_number
        if to_name is not None:
            self.to_name = to_name
        if via_number is not None:
            self.via_number = via_number
        if date_created is not None:
            self.date_created = date_created
        if date_answered is not None:
            self.date_answered = date_answered
        if date_finished is not None:
            self.date_finished = date_finished
        if call_duration is not None:
            self.call_duration = call_duration

    @property
    def id(self):
        """Gets the id of this CallListItem.  # noqa: E501


        :return: The id of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CallListItem.


        :param id: The id of this CallListItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ticket_id(self):
        """Gets the ticket_id of this CallListItem.  # noqa: E501


        :return: The ticket_id of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this CallListItem.


        :param ticket_id: The ticket_id of this CallListItem.  # noqa: E501
        :type: str
        """

        self._ticket_id = ticket_id

    @property
    def type(self):
        """Gets the type of this CallListItem.  # noqa: E501

        I - incoming, O - outgoing, T - internal  # noqa: E501

        :return: The type of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CallListItem.

        I - incoming, O - outgoing, T - internal  # noqa: E501

        :param type: The type of this CallListItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["I", "O", "T"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def from_number(self):
        """Gets the from_number of this CallListItem.  # noqa: E501


        :return: The from_number of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this CallListItem.


        :param from_number: The from_number of this CallListItem.  # noqa: E501
        :type: str
        """

        self._from_number = from_number

    @property
    def from_name(self):
        """Gets the from_name of this CallListItem.  # noqa: E501


        :return: The from_name of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this CallListItem.


        :param from_name: The from_name of this CallListItem.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def to_number(self):
        """Gets the to_number of this CallListItem.  # noqa: E501


        :return: The to_number of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this CallListItem.


        :param to_number: The to_number of this CallListItem.  # noqa: E501
        :type: str
        """

        self._to_number = to_number

    @property
    def to_name(self):
        """Gets the to_name of this CallListItem.  # noqa: E501


        :return: The to_name of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """Sets the to_name of this CallListItem.


        :param to_name: The to_name of this CallListItem.  # noqa: E501
        :type: str
        """

        self._to_name = to_name

    @property
    def via_number(self):
        """Gets the via_number of this CallListItem.  # noqa: E501


        :return: The via_number of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._via_number

    @via_number.setter
    def via_number(self, via_number):
        """Sets the via_number of this CallListItem.


        :param via_number: The via_number of this CallListItem.  # noqa: E501
        :type: str
        """

        self._via_number = via_number

    @property
    def date_created(self):
        """Gets the date_created of this CallListItem.  # noqa: E501


        :return: The date_created of this CallListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CallListItem.


        :param date_created: The date_created of this CallListItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_answered(self):
        """Gets the date_answered of this CallListItem.  # noqa: E501


        :return: The date_answered of this CallListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_answered

    @date_answered.setter
    def date_answered(self, date_answered):
        """Sets the date_answered of this CallListItem.


        :param date_answered: The date_answered of this CallListItem.  # noqa: E501
        :type: datetime
        """

        self._date_answered = date_answered

    @property
    def date_finished(self):
        """Gets the date_finished of this CallListItem.  # noqa: E501


        :return: The date_finished of this CallListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """Sets the date_finished of this CallListItem.


        :param date_finished: The date_finished of this CallListItem.  # noqa: E501
        :type: datetime
        """

        self._date_finished = date_finished

    @property
    def call_duration(self):
        """Gets the call_duration of this CallListItem.  # noqa: E501


        :return: The call_duration of this CallListItem.  # noqa: E501
        :rtype: str
        """
        return self._call_duration

    @call_duration.setter
    def call_duration(self, call_duration):
        """Sets the call_duration of this CallListItem.


        :param call_duration: The call_duration of this CallListItem.  # noqa: E501
        :type: str
        """

        self._call_duration = call_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
