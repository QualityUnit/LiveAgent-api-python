# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CheckoutParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hosted_api_key': 'str',
        'variation_id': 'str',
        'addons': 'str',
        'agents_count': 'int',
        'knowledgebase_count': 'int',
        'entry_point': 'str'
    }

    attribute_map = {
        'hosted_api_key': 'hosted_api_key',
        'variation_id': 'variation_id',
        'addons': 'addons',
        'agents_count': 'agents_count',
        'knowledgebase_count': 'knowledgebase_count',
        'entry_point': 'entry_point'
    }

    def __init__(self, hosted_api_key=None, variation_id=None, addons=None, agents_count=None, knowledgebase_count=None, entry_point=None):  # noqa: E501
        """CheckoutParameters - a model defined in Swagger"""  # noqa: E501

        self._hosted_api_key = None
        self._variation_id = None
        self._addons = None
        self._agents_count = None
        self._knowledgebase_count = None
        self._entry_point = None
        self.discriminator = None

        if hosted_api_key is not None:
            self.hosted_api_key = hosted_api_key
        if variation_id is not None:
            self.variation_id = variation_id
        if addons is not None:
            self.addons = addons
        if agents_count is not None:
            self.agents_count = agents_count
        if knowledgebase_count is not None:
            self.knowledgebase_count = knowledgebase_count
        if entry_point is not None:
            self.entry_point = entry_point

    @property
    def hosted_api_key(self):
        """Gets the hosted_api_key of this CheckoutParameters.  # noqa: E501


        :return: The hosted_api_key of this CheckoutParameters.  # noqa: E501
        :rtype: str
        """
        return self._hosted_api_key

    @hosted_api_key.setter
    def hosted_api_key(self, hosted_api_key):
        """Sets the hosted_api_key of this CheckoutParameters.


        :param hosted_api_key: The hosted_api_key of this CheckoutParameters.  # noqa: E501
        :type: str
        """

        self._hosted_api_key = hosted_api_key

    @property
    def variation_id(self):
        """Gets the variation_id of this CheckoutParameters.  # noqa: E501


        :return: The variation_id of this CheckoutParameters.  # noqa: E501
        :rtype: str
        """
        return self._variation_id

    @variation_id.setter
    def variation_id(self, variation_id):
        """Sets the variation_id of this CheckoutParameters.


        :param variation_id: The variation_id of this CheckoutParameters.  # noqa: E501
        :type: str
        """

        self._variation_id = variation_id

    @property
    def addons(self):
        """Gets the addons of this CheckoutParameters.  # noqa: E501


        :return: The addons of this CheckoutParameters.  # noqa: E501
        :rtype: str
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this CheckoutParameters.


        :param addons: The addons of this CheckoutParameters.  # noqa: E501
        :type: str
        """

        self._addons = addons

    @property
    def agents_count(self):
        """Gets the agents_count of this CheckoutParameters.  # noqa: E501


        :return: The agents_count of this CheckoutParameters.  # noqa: E501
        :rtype: int
        """
        return self._agents_count

    @agents_count.setter
    def agents_count(self, agents_count):
        """Sets the agents_count of this CheckoutParameters.


        :param agents_count: The agents_count of this CheckoutParameters.  # noqa: E501
        :type: int
        """

        self._agents_count = agents_count

    @property
    def knowledgebase_count(self):
        """Gets the knowledgebase_count of this CheckoutParameters.  # noqa: E501


        :return: The knowledgebase_count of this CheckoutParameters.  # noqa: E501
        :rtype: int
        """
        return self._knowledgebase_count

    @knowledgebase_count.setter
    def knowledgebase_count(self, knowledgebase_count):
        """Sets the knowledgebase_count of this CheckoutParameters.


        :param knowledgebase_count: The knowledgebase_count of this CheckoutParameters.  # noqa: E501
        :type: int
        """

        self._knowledgebase_count = knowledgebase_count

    @property
    def entry_point(self):
        """Gets the entry_point of this CheckoutParameters.  # noqa: E501


        :return: The entry_point of this CheckoutParameters.  # noqa: E501
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this CheckoutParameters.


        :param entry_point: The entry_point of this CheckoutParameters.  # noqa: E501
        :type: str
        """

        self._entry_point = entry_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckoutParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
