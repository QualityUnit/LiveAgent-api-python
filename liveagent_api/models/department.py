# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class Department(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'department_id': 'str',
        'agent_count': 'float',
        'name': 'str',
        'online_status': 'str',
        'agent_ids': 'list[str]',
        'mailaccount_id': 'str'
    }

    attribute_map = {
        'department_id': 'department_id',
        'agent_count': 'agent_count',
        'name': 'name',
        'online_status': 'online_status',
        'agent_ids': 'agent_ids',
        'mailaccount_id': 'mailaccount_id'
    }

    def __init__(self, department_id=None, agent_count=None, name=None, online_status=None, agent_ids=None, mailaccount_id=None, _configuration=None):  # noqa: E501
        """Department - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._department_id = None
        self._agent_count = None
        self._name = None
        self._online_status = None
        self._agent_ids = None
        self._mailaccount_id = None
        self.discriminator = None

        if department_id is not None:
            self.department_id = department_id
        if agent_count is not None:
            self.agent_count = agent_count
        if name is not None:
            self.name = name
        if online_status is not None:
            self.online_status = online_status
        if agent_ids is not None:
            self.agent_ids = agent_ids
        if mailaccount_id is not None:
            self.mailaccount_id = mailaccount_id

    @property
    def department_id(self):
        """Gets the department_id of this Department.  # noqa: E501


        :return: The department_id of this Department.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Department.


        :param department_id: The department_id of this Department.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def agent_count(self):
        """Gets the agent_count of this Department.  # noqa: E501


        :return: The agent_count of this Department.  # noqa: E501
        :rtype: float
        """
        return self._agent_count

    @agent_count.setter
    def agent_count(self, agent_count):
        """Sets the agent_count of this Department.


        :param agent_count: The agent_count of this Department.  # noqa: E501
        :type: float
        """

        self._agent_count = agent_count

    @property
    def name(self):
        """Gets the name of this Department.  # noqa: E501


        :return: The name of this Department.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Department.


        :param name: The name of this Department.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online_status(self):
        """Gets the online_status of this Department.  # noqa: E501


        :return: The online_status of this Department.  # noqa: E501
        :rtype: str
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this Department.


        :param online_status: The online_status of this Department.  # noqa: E501
        :type: str
        """

        self._online_status = online_status

    @property
    def agent_ids(self):
        """Gets the agent_ids of this Department.  # noqa: E501


        :return: The agent_ids of this Department.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_ids

    @agent_ids.setter
    def agent_ids(self, agent_ids):
        """Sets the agent_ids of this Department.


        :param agent_ids: The agent_ids of this Department.  # noqa: E501
        :type: list[str]
        """

        self._agent_ids = agent_ids

    @property
    def mailaccount_id(self):
        """Gets the mailaccount_id of this Department.  # noqa: E501


        :return: The mailaccount_id of this Department.  # noqa: E501
        :rtype: str
        """
        return self._mailaccount_id

    @mailaccount_id.setter
    def mailaccount_id(self, mailaccount_id):
        """Sets the mailaccount_id of this Department.


        :param mailaccount_id: The mailaccount_id of this Department.  # noqa: E501
        :type: str
        """

        self._mailaccount_id = mailaccount_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Department, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Department):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Department):
            return True

        return self.to_dict() != other.to_dict()
