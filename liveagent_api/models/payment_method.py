# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PaymentMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PaymentMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'payment_type': 'str',
            'payment_token': 'str',
            'card_name': 'str',
            'card_holder': 'str',
            'card_address': 'str',
            'card_zip': 'str',
            'card_expire': 'str'
        }

        self.attribute_map = {
            'payment_type': 'payment_type',
            'payment_token': 'payment_token',
            'card_name': 'card_name',
            'card_holder': 'card_holder',
            'card_address': 'card_address',
            'card_zip': 'card_zip',
            'card_expire': 'card_expire'
        }

        self._payment_type = None
        self._payment_token = None
        self._card_name = None
        self._card_holder = None
        self._card_address = None
        self._card_zip = None
        self._card_expire = None

    @property
    def payment_type(self):
        """
        Gets the payment_type of this PaymentMethod.


        :return: The payment_type of this PaymentMethod.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this PaymentMethod.


        :param payment_type: The payment_type of this PaymentMethod.
        :type: str
        """
        allowed_values = ["card", "paypal"]
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._payment_type = payment_type

    @property
    def payment_token(self):
        """
        Gets the payment_token of this PaymentMethod.


        :return: The payment_token of this PaymentMethod.
        :rtype: str
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """
        Sets the payment_token of this PaymentMethod.


        :param payment_token: The payment_token of this PaymentMethod.
        :type: str
        """
        self._payment_token = payment_token

    @property
    def card_name(self):
        """
        Gets the card_name of this PaymentMethod.


        :return: The card_name of this PaymentMethod.
        :rtype: str
        """
        return self._card_name

    @card_name.setter
    def card_name(self, card_name):
        """
        Sets the card_name of this PaymentMethod.


        :param card_name: The card_name of this PaymentMethod.
        :type: str
        """
        self._card_name = card_name

    @property
    def card_holder(self):
        """
        Gets the card_holder of this PaymentMethod.


        :return: The card_holder of this PaymentMethod.
        :rtype: str
        """
        return self._card_holder

    @card_holder.setter
    def card_holder(self, card_holder):
        """
        Sets the card_holder of this PaymentMethod.


        :param card_holder: The card_holder of this PaymentMethod.
        :type: str
        """
        self._card_holder = card_holder

    @property
    def card_address(self):
        """
        Gets the card_address of this PaymentMethod.


        :return: The card_address of this PaymentMethod.
        :rtype: str
        """
        return self._card_address

    @card_address.setter
    def card_address(self, card_address):
        """
        Sets the card_address of this PaymentMethod.


        :param card_address: The card_address of this PaymentMethod.
        :type: str
        """
        self._card_address = card_address

    @property
    def card_zip(self):
        """
        Gets the card_zip of this PaymentMethod.


        :return: The card_zip of this PaymentMethod.
        :rtype: str
        """
        return self._card_zip

    @card_zip.setter
    def card_zip(self, card_zip):
        """
        Sets the card_zip of this PaymentMethod.


        :param card_zip: The card_zip of this PaymentMethod.
        :type: str
        """
        self._card_zip = card_zip

    @property
    def card_expire(self):
        """
        Gets the card_expire of this PaymentMethod.


        :return: The card_expire of this PaymentMethod.
        :rtype: str
        """
        return self._card_expire

    @card_expire.setter
    def card_expire(self, card_expire):
        """
        Sets the card_expire of this PaymentMethod.


        :param card_expire: The card_expire of this PaymentMethod.
        :type: str
        """
        self._card_expire = card_expire

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

