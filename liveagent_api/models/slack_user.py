# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SlackUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'real_name': 'str',
        'display_name': 'str',
        'image': 'str',
        'color': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'real_name': 'real_name',
        'display_name': 'display_name',
        'image': 'image',
        'color': 'color'
    }

    def __init__(self, id=None, name=None, real_name=None, display_name=None, image=None, color=None):  # noqa: E501
        """SlackUser - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._real_name = None
        self._display_name = None
        self._image = None
        self._color = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if real_name is not None:
            self.real_name = real_name
        if display_name is not None:
            self.display_name = display_name
        if image is not None:
            self.image = image
        if color is not None:
            self.color = color

    @property
    def id(self):
        """Gets the id of this SlackUser.  # noqa: E501


        :return: The id of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlackUser.


        :param id: The id of this SlackUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SlackUser.  # noqa: E501


        :return: The name of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlackUser.


        :param name: The name of this SlackUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def real_name(self):
        """Gets the real_name of this SlackUser.  # noqa: E501


        :return: The real_name of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this SlackUser.


        :param real_name: The real_name of this SlackUser.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def display_name(self):
        """Gets the display_name of this SlackUser.  # noqa: E501


        :return: The display_name of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SlackUser.


        :param display_name: The display_name of this SlackUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def image(self):
        """Gets the image of this SlackUser.  # noqa: E501


        :return: The image of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SlackUser.


        :param image: The image of this SlackUser.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def color(self):
        """Gets the color of this SlackUser.  # noqa: E501


        :return: The color of this SlackUser.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SlackUser.


        :param color: The color of this SlackUser.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlackUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlackUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
