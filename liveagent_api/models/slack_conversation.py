# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SlackConversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'topic': 'str',
        'purpose': 'str',
        'num_members': 'int',
        'is_private': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'topic': 'topic',
        'purpose': 'purpose',
        'num_members': 'num_members',
        'is_private': 'is_private'
    }

    def __init__(self, id=None, name=None, topic=None, purpose=None, num_members=None, is_private=None):  # noqa: E501
        """SlackConversation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._topic = None
        self._purpose = None
        self._num_members = None
        self._is_private = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if topic is not None:
            self.topic = topic
        if purpose is not None:
            self.purpose = purpose
        if num_members is not None:
            self.num_members = num_members
        if is_private is not None:
            self.is_private = is_private

    @property
    def id(self):
        """Gets the id of this SlackConversation.  # noqa: E501


        :return: The id of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlackConversation.


        :param id: The id of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SlackConversation.  # noqa: E501


        :return: The name of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlackConversation.


        :param name: The name of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def topic(self):
        """Gets the topic of this SlackConversation.  # noqa: E501


        :return: The topic of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this SlackConversation.


        :param topic: The topic of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def purpose(self):
        """Gets the purpose of this SlackConversation.  # noqa: E501


        :return: The purpose of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SlackConversation.


        :param purpose: The purpose of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def num_members(self):
        """Gets the num_members of this SlackConversation.  # noqa: E501


        :return: The num_members of this SlackConversation.  # noqa: E501
        :rtype: int
        """
        return self._num_members

    @num_members.setter
    def num_members(self, num_members):
        """Sets the num_members of this SlackConversation.


        :param num_members: The num_members of this SlackConversation.  # noqa: E501
        :type: int
        """

        self._num_members = num_members

    @property
    def is_private(self):
        """Gets the is_private of this SlackConversation.  # noqa: E501


        :return: The is_private of this SlackConversation.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this SlackConversation.


        :param is_private: The is_private of this SlackConversation.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlackConversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlackConversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
