# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IvrChoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dtmf': 'str',
        'play': 'str',
        'name': 'str',
        'ivr': 'str'
    }

    attribute_map = {
        'dtmf': 'dtmf',
        'play': 'play',
        'name': 'name',
        'ivr': 'ivr'
    }

    def __init__(self, dtmf=None, play=None, name=None, ivr=None):  # noqa: E501
        """IvrChoice - a model defined in Swagger"""  # noqa: E501

        self._dtmf = None
        self._play = None
        self._name = None
        self._ivr = None
        self.discriminator = None

        self.dtmf = dtmf
        if play is not None:
            self.play = play
        if name is not None:
            self.name = name
        self.ivr = ivr

    @property
    def dtmf(self):
        """Gets the dtmf of this IvrChoice.  # noqa: E501

        DTMF symbol of choice  # noqa: E501

        :return: The dtmf of this IvrChoice.  # noqa: E501
        :rtype: str
        """
        return self._dtmf

    @dtmf.setter
    def dtmf(self, dtmf):
        """Sets the dtmf of this IvrChoice.

        DTMF symbol of choice  # noqa: E501

        :param dtmf: The dtmf of this IvrChoice.  # noqa: E501
        :type: str
        """
        if dtmf is None:
            raise ValueError("Invalid value for `dtmf`, must not be `None`")  # noqa: E501
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "#"]  # noqa: E501
        if dtmf not in allowed_values:
            raise ValueError(
                "Invalid value for `dtmf` ({0}), must be one of {1}"  # noqa: E501
                .format(dtmf, allowed_values)
            )

        self._dtmf = dtmf

    @property
    def play(self):
        """Gets the play of this IvrChoice.  # noqa: E501

        URL of the sound to play  # noqa: E501

        :return: The play of this IvrChoice.  # noqa: E501
        :rtype: str
        """
        return self._play

    @play.setter
    def play(self, play):
        """Sets the play of this IvrChoice.

        URL of the sound to play  # noqa: E501

        :param play: The play of this IvrChoice.  # noqa: E501
        :type: str
        """

        self._play = play

    @property
    def name(self):
        """Gets the name of this IvrChoice.  # noqa: E501

        Readable name of choice  # noqa: E501

        :return: The name of this IvrChoice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IvrChoice.

        Readable name of choice  # noqa: E501

        :param name: The name of this IvrChoice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ivr(self):
        """Gets the ivr of this IvrChoice.  # noqa: E501

        Name of IVR to continue in  # noqa: E501

        :return: The ivr of this IvrChoice.  # noqa: E501
        :rtype: str
        """
        return self._ivr

    @ivr.setter
    def ivr(self, ivr):
        """Sets the ivr of this IvrChoice.

        Name of IVR to continue in  # noqa: E501

        :param ivr: The ivr of this IvrChoice.  # noqa: E501
        :type: str
        """
        if ivr is None:
            raise ValueError("Invalid value for `ivr`, must not be `None`")  # noqa: E501

        self._ivr = ivr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IvrChoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IvrChoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
