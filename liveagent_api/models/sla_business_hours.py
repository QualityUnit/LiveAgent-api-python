# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.day_interval import DayInterval  # noqa: F401,E501


class SlaBusinessHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'monday': 'DayInterval',
        'thuesday': 'DayInterval',
        'wednesday': 'DayInterval',
        'thursday': 'DayInterval',
        'friday': 'DayInterval',
        'saturday': 'DayInterval',
        'sunday': 'DayInterval',
        'exclude_holidays': 'list[datetime]'
    }

    attribute_map = {
        'timezone': 'timezone',
        'monday': 'monday',
        'thuesday': 'thuesday',
        'wednesday': 'wednesday',
        'thursday': 'thursday',
        'friday': 'friday',
        'saturday': 'saturday',
        'sunday': 'sunday',
        'exclude_holidays': 'exclude_holidays'
    }

    def __init__(self, timezone=None, monday=None, thuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, sunday=None, exclude_holidays=None):  # noqa: E501
        """SlaBusinessHours - a model defined in Swagger"""  # noqa: E501

        self._timezone = None
        self._monday = None
        self._thuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self._exclude_holidays = None
        self.discriminator = None

        if timezone is not None:
            self.timezone = timezone
        if monday is not None:
            self.monday = monday
        if thuesday is not None:
            self.thuesday = thuesday
        if wednesday is not None:
            self.wednesday = wednesday
        if thursday is not None:
            self.thursday = thursday
        if friday is not None:
            self.friday = friday
        if saturday is not None:
            self.saturday = saturday
        if sunday is not None:
            self.sunday = sunday
        if exclude_holidays is not None:
            self.exclude_holidays = exclude_holidays

    @property
    def timezone(self):
        """Gets the timezone of this SlaBusinessHours.  # noqa: E501


        :return: The timezone of this SlaBusinessHours.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SlaBusinessHours.


        :param timezone: The timezone of this SlaBusinessHours.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def monday(self):
        """Gets the monday of this SlaBusinessHours.  # noqa: E501


        :return: The monday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this SlaBusinessHours.


        :param monday: The monday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._monday = monday

    @property
    def thuesday(self):
        """Gets the thuesday of this SlaBusinessHours.  # noqa: E501


        :return: The thuesday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._thuesday

    @thuesday.setter
    def thuesday(self, thuesday):
        """Sets the thuesday of this SlaBusinessHours.


        :param thuesday: The thuesday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._thuesday = thuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this SlaBusinessHours.  # noqa: E501


        :return: The wednesday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this SlaBusinessHours.


        :param wednesday: The wednesday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this SlaBusinessHours.  # noqa: E501


        :return: The thursday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this SlaBusinessHours.


        :param thursday: The thursday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this SlaBusinessHours.  # noqa: E501


        :return: The friday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this SlaBusinessHours.


        :param friday: The friday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this SlaBusinessHours.  # noqa: E501


        :return: The saturday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this SlaBusinessHours.


        :param saturday: The saturday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this SlaBusinessHours.  # noqa: E501


        :return: The sunday of this SlaBusinessHours.  # noqa: E501
        :rtype: DayInterval
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this SlaBusinessHours.


        :param sunday: The sunday of this SlaBusinessHours.  # noqa: E501
        :type: DayInterval
        """

        self._sunday = sunday

    @property
    def exclude_holidays(self):
        """Gets the exclude_holidays of this SlaBusinessHours.  # noqa: E501


        :return: The exclude_holidays of this SlaBusinessHours.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._exclude_holidays

    @exclude_holidays.setter
    def exclude_holidays(self, exclude_holidays):
        """Sets the exclude_holidays of this SlaBusinessHours.


        :param exclude_holidays: The exclude_holidays of this SlaBusinessHours.  # noqa: E501
        :type: list[datetime]
        """

        self._exclude_holidays = exclude_holidays

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlaBusinessHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlaBusinessHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
