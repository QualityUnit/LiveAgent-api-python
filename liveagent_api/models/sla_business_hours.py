# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SlaBusinessHours(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SlaBusinessHours - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timezone': 'str',
            'monday': 'DayInterval',
            'thuesday': 'DayInterval',
            'wednesday': 'DayInterval',
            'thursday': 'DayInterval',
            'friday': 'DayInterval',
            'saturday': 'DayInterval',
            'sunday': 'DayInterval',
            'exclude_holidays': 'list[datetime]'
        }

        self.attribute_map = {
            'timezone': 'timezone',
            'monday': 'monday',
            'thuesday': 'thuesday',
            'wednesday': 'wednesday',
            'thursday': 'thursday',
            'friday': 'friday',
            'saturday': 'saturday',
            'sunday': 'sunday',
            'exclude_holidays': 'exclude_holidays'
        }

        self._timezone = None
        self._monday = None
        self._thuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self._sunday = None
        self._exclude_holidays = None

    @property
    def timezone(self):
        """
        Gets the timezone of this SlaBusinessHours.


        :return: The timezone of this SlaBusinessHours.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this SlaBusinessHours.


        :param timezone: The timezone of this SlaBusinessHours.
        :type: str
        """
        self._timezone = timezone

    @property
    def monday(self):
        """
        Gets the monday of this SlaBusinessHours.


        :return: The monday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """
        Sets the monday of this SlaBusinessHours.


        :param monday: The monday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._monday = monday

    @property
    def thuesday(self):
        """
        Gets the thuesday of this SlaBusinessHours.


        :return: The thuesday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._thuesday

    @thuesday.setter
    def thuesday(self, thuesday):
        """
        Sets the thuesday of this SlaBusinessHours.


        :param thuesday: The thuesday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._thuesday = thuesday

    @property
    def wednesday(self):
        """
        Gets the wednesday of this SlaBusinessHours.


        :return: The wednesday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """
        Sets the wednesday of this SlaBusinessHours.


        :param wednesday: The wednesday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._wednesday = wednesday

    @property
    def thursday(self):
        """
        Gets the thursday of this SlaBusinessHours.


        :return: The thursday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """
        Sets the thursday of this SlaBusinessHours.


        :param thursday: The thursday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._thursday = thursday

    @property
    def friday(self):
        """
        Gets the friday of this SlaBusinessHours.


        :return: The friday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """
        Sets the friday of this SlaBusinessHours.


        :param friday: The friday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._friday = friday

    @property
    def saturday(self):
        """
        Gets the saturday of this SlaBusinessHours.


        :return: The saturday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """
        Sets the saturday of this SlaBusinessHours.


        :param saturday: The saturday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._saturday = saturday

    @property
    def sunday(self):
        """
        Gets the sunday of this SlaBusinessHours.


        :return: The sunday of this SlaBusinessHours.
        :rtype: DayInterval
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """
        Sets the sunday of this SlaBusinessHours.


        :param sunday: The sunday of this SlaBusinessHours.
        :type: DayInterval
        """
        self._sunday = sunday

    @property
    def exclude_holidays(self):
        """
        Gets the exclude_holidays of this SlaBusinessHours.


        :return: The exclude_holidays of this SlaBusinessHours.
        :rtype: list[datetime]
        """
        return self._exclude_holidays

    @exclude_holidays.setter
    def exclude_holidays(self, exclude_holidays):
        """
        Sets the exclude_holidays of this SlaBusinessHours.


        :param exclude_holidays: The exclude_holidays of this SlaBusinessHours.
        :type: list[datetime]
        """
        self._exclude_holidays = exclude_holidays

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

