# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TicketSla(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversationid': 'str',
        'sla_level_id': 'str',
        'first_answer': 'datetime',
        'first_assign': 'datetime',
        'first_resolve': 'datetime',
        'next_answer': 'datetime'
    }

    attribute_map = {
        'conversationid': 'conversationid',
        'sla_level_id': 'sla_level_id',
        'first_answer': 'first_answer',
        'first_assign': 'first_assign',
        'first_resolve': 'first_resolve',
        'next_answer': 'next_answer'
    }

    def __init__(self, conversationid=None, sla_level_id=None, first_answer=None, first_assign=None, first_resolve=None, next_answer=None):  # noqa: E501
        """TicketSla - a model defined in Swagger"""  # noqa: E501

        self._conversationid = None
        self._sla_level_id = None
        self._first_answer = None
        self._first_assign = None
        self._first_resolve = None
        self._next_answer = None
        self.discriminator = None

        if conversationid is not None:
            self.conversationid = conversationid
        if sla_level_id is not None:
            self.sla_level_id = sla_level_id
        if first_answer is not None:
            self.first_answer = first_answer
        if first_assign is not None:
            self.first_assign = first_assign
        if first_resolve is not None:
            self.first_resolve = first_resolve
        if next_answer is not None:
            self.next_answer = next_answer

    @property
    def conversationid(self):
        """Gets the conversationid of this TicketSla.  # noqa: E501


        :return: The conversationid of this TicketSla.  # noqa: E501
        :rtype: str
        """
        return self._conversationid

    @conversationid.setter
    def conversationid(self, conversationid):
        """Sets the conversationid of this TicketSla.


        :param conversationid: The conversationid of this TicketSla.  # noqa: E501
        :type: str
        """

        self._conversationid = conversationid

    @property
    def sla_level_id(self):
        """Gets the sla_level_id of this TicketSla.  # noqa: E501


        :return: The sla_level_id of this TicketSla.  # noqa: E501
        :rtype: str
        """
        return self._sla_level_id

    @sla_level_id.setter
    def sla_level_id(self, sla_level_id):
        """Sets the sla_level_id of this TicketSla.


        :param sla_level_id: The sla_level_id of this TicketSla.  # noqa: E501
        :type: str
        """

        self._sla_level_id = sla_level_id

    @property
    def first_answer(self):
        """Gets the first_answer of this TicketSla.  # noqa: E501


        :return: The first_answer of this TicketSla.  # noqa: E501
        :rtype: datetime
        """
        return self._first_answer

    @first_answer.setter
    def first_answer(self, first_answer):
        """Sets the first_answer of this TicketSla.


        :param first_answer: The first_answer of this TicketSla.  # noqa: E501
        :type: datetime
        """

        self._first_answer = first_answer

    @property
    def first_assign(self):
        """Gets the first_assign of this TicketSla.  # noqa: E501


        :return: The first_assign of this TicketSla.  # noqa: E501
        :rtype: datetime
        """
        return self._first_assign

    @first_assign.setter
    def first_assign(self, first_assign):
        """Sets the first_assign of this TicketSla.


        :param first_assign: The first_assign of this TicketSla.  # noqa: E501
        :type: datetime
        """

        self._first_assign = first_assign

    @property
    def first_resolve(self):
        """Gets the first_resolve of this TicketSla.  # noqa: E501


        :return: The first_resolve of this TicketSla.  # noqa: E501
        :rtype: datetime
        """
        return self._first_resolve

    @first_resolve.setter
    def first_resolve(self, first_resolve):
        """Sets the first_resolve of this TicketSla.


        :param first_resolve: The first_resolve of this TicketSla.  # noqa: E501
        :type: datetime
        """

        self._first_resolve = first_resolve

    @property
    def next_answer(self):
        """Gets the next_answer of this TicketSla.  # noqa: E501


        :return: The next_answer of this TicketSla.  # noqa: E501
        :rtype: datetime
        """
        return self._next_answer

    @next_answer.setter
    def next_answer(self, next_answer):
        """Sets the next_answer of this TicketSla.


        :param next_answer: The next_answer of this TicketSla.  # noqa: E501
        :type: datetime
        """

        self._next_answer = next_answer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketSla, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketSla):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
