# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Subscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Subscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'domain': 'str',
            'custom_domain': 'str',
            'customer_email': 'str',
            'customer_name': 'str',
            'company': 'str',
            'date_created': 'datetime',
            'status': 'str',
            'version': 'str',
            'is_latest': 'bool',
            'product_id': 'str',
            'variation_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'domain': 'domain',
            'custom_domain': 'custom_domain',
            'customer_email': 'customer_email',
            'customer_name': 'customer_name',
            'company': 'company',
            'date_created': 'date_created',
            'status': 'status',
            'version': 'version',
            'is_latest': 'is_latest',
            'product_id': 'product_id',
            'variation_id': 'variation_id'
        }

        self._id = None
        self._domain = None
        self._custom_domain = None
        self._customer_email = None
        self._customer_name = None
        self._company = None
        self._date_created = None
        self._status = None
        self._version = None
        self._is_latest = None
        self._product_id = None
        self._variation_id = None

    @property
    def id(self):
        """
        Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type: str
        """
        self._id = id

    @property
    def domain(self):
        """
        Gets the domain of this Subscription.
        Default domain assigned to subscription when created (e.g. example.ladesk.com)

        :return: The domain of this Subscription.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this Subscription.
        Default domain assigned to subscription when created (e.g. example.ladesk.com)

        :param domain: The domain of this Subscription.
        :type: str
        """
        self._domain = domain

    @property
    def custom_domain(self):
        """
        Gets the custom_domain of this Subscription.
        Additional domain parked to this subscription (e.g. support.example.com)

        :return: The custom_domain of this Subscription.
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """
        Sets the custom_domain of this Subscription.
        Additional domain parked to this subscription (e.g. support.example.com)

        :param custom_domain: The custom_domain of this Subscription.
        :type: str
        """
        self._custom_domain = custom_domain

    @property
    def customer_email(self):
        """
        Gets the customer_email of this Subscription.


        :return: The customer_email of this Subscription.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """
        Sets the customer_email of this Subscription.


        :param customer_email: The customer_email of this Subscription.
        :type: str
        """
        self._customer_email = customer_email

    @property
    def customer_name(self):
        """
        Gets the customer_name of this Subscription.


        :return: The customer_name of this Subscription.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """
        Sets the customer_name of this Subscription.


        :param customer_name: The customer_name of this Subscription.
        :type: str
        """
        self._customer_name = customer_name

    @property
    def company(self):
        """
        Gets the company of this Subscription.


        :return: The company of this Subscription.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this Subscription.


        :param company: The company of this Subscription.
        :type: str
        """
        self._company = company

    @property
    def date_created(self):
        """
        Gets the date_created of this Subscription.


        :return: The date_created of this Subscription.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this Subscription.


        :param date_created: The date_created of this Subscription.
        :type: datetime
        """
        self._date_created = date_created

    @property
    def status(self):
        """
        Gets the status of this Subscription.
        I - installing\nA - active\nS - suspended\nT - terminated\nD - deleted\n

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Subscription.
        I - installing\nA - active\nS - suspended\nT - terminated\nD - deleted\n

        :param status: The status of this Subscription.
        :type: str
        """
        allowed_values = ["I", "A", "S", "T", "D"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def version(self):
        """
        Gets the version of this Subscription.


        :return: The version of this Subscription.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Subscription.


        :param version: The version of this Subscription.
        :type: str
        """
        self._version = version

    @property
    def is_latest(self):
        """
        Gets the is_latest of this Subscription.


        :return: The is_latest of this Subscription.
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """
        Sets the is_latest of this Subscription.


        :param is_latest: The is_latest of this Subscription.
        :type: bool
        """
        self._is_latest = is_latest

    @property
    def product_id(self):
        """
        Gets the product_id of this Subscription.


        :return: The product_id of this Subscription.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Subscription.


        :param product_id: The product_id of this Subscription.
        :type: str
        """
        self._product_id = product_id

    @property
    def variation_id(self):
        """
        Gets the variation_id of this Subscription.


        :return: The variation_id of this Subscription.
        :rtype: str
        """
        return self._variation_id

    @variation_id.setter
    def variation_id(self, variation_id):
        """
        Sets the variation_id of this Subscription.


        :param variation_id: The variation_id of this Subscription.
        :type: str
        """
        self._variation_id = variation_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

