# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'domain': 'str',
        'custom_domain': 'str',
        'customer_email': 'str',
        'customer_name': 'str',
        'company': 'str',
        'date_created': 'datetime',
        'date_validity': 'datetime',
        'status': 'str',
        'account_id': 'str',
        'cluster_id': 'str',
        'task_id': 'str',
        'version': 'str',
        'is_latest': 'bool',
        'product_id': 'str',
        'variation_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'domain': 'domain',
        'custom_domain': 'custom_domain',
        'customer_email': 'customer_email',
        'customer_name': 'customer_name',
        'company': 'company',
        'date_created': 'date_created',
        'date_validity': 'date_validity',
        'status': 'status',
        'account_id': 'account_id',
        'cluster_id': 'cluster_id',
        'task_id': 'task_id',
        'version': 'version',
        'is_latest': 'is_latest',
        'product_id': 'product_id',
        'variation_id': 'variation_id'
    }

    def __init__(self, id=None, domain=None, custom_domain=None, customer_email=None, customer_name=None, company=None, date_created=None, date_validity=None, status=None, account_id=None, cluster_id=None, task_id=None, version=None, is_latest=None, product_id=None, variation_id=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._domain = None
        self._custom_domain = None
        self._customer_email = None
        self._customer_name = None
        self._company = None
        self._date_created = None
        self._date_validity = None
        self._status = None
        self._account_id = None
        self._cluster_id = None
        self._task_id = None
        self._version = None
        self._is_latest = None
        self._product_id = None
        self._variation_id = None
        self.discriminator = None

        self.id = id
        if domain is not None:
            self.domain = domain
        if custom_domain is not None:
            self.custom_domain = custom_domain
        if customer_email is not None:
            self.customer_email = customer_email
        if customer_name is not None:
            self.customer_name = customer_name
        if company is not None:
            self.company = company
        if date_created is not None:
            self.date_created = date_created
        if date_validity is not None:
            self.date_validity = date_validity
        if status is not None:
            self.status = status
        if account_id is not None:
            self.account_id = account_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if task_id is not None:
            self.task_id = task_id
        if version is not None:
            self.version = version
        if is_latest is not None:
            self.is_latest = is_latest
        if product_id is not None:
            self.product_id = product_id
        if variation_id is not None:
            self.variation_id = variation_id

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this Subscription.  # noqa: E501

        Default domain assigned to subscription when created (e.g. example.ladesk.com)  # noqa: E501

        :return: The domain of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Subscription.

        Default domain assigned to subscription when created (e.g. example.ladesk.com)  # noqa: E501

        :param domain: The domain of this Subscription.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def custom_domain(self):
        """Gets the custom_domain of this Subscription.  # noqa: E501

        Additional domain parked to this subscription (e.g. support.example.com)  # noqa: E501

        :return: The custom_domain of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this Subscription.

        Additional domain parked to this subscription (e.g. support.example.com)  # noqa: E501

        :param custom_domain: The custom_domain of this Subscription.  # noqa: E501
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def customer_email(self):
        """Gets the customer_email of this Subscription.  # noqa: E501


        :return: The customer_email of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this Subscription.


        :param customer_email: The customer_email of this Subscription.  # noqa: E501
        :type: str
        """

        self._customer_email = customer_email

    @property
    def customer_name(self):
        """Gets the customer_name of this Subscription.  # noqa: E501


        :return: The customer_name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this Subscription.


        :param customer_name: The customer_name of this Subscription.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def company(self):
        """Gets the company of this Subscription.  # noqa: E501


        :return: The company of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Subscription.


        :param company: The company of this Subscription.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def date_created(self):
        """Gets the date_created of this Subscription.  # noqa: E501


        :return: The date_created of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Subscription.


        :param date_created: The date_created of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_validity(self):
        """Gets the date_validity of this Subscription.  # noqa: E501


        :return: The date_validity of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._date_validity

    @date_validity.setter
    def date_validity(self, date_validity):
        """Sets the date_validity of this Subscription.


        :param date_validity: The date_validity of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._date_validity = date_validity

    @property
    def status(self):
        """Gets the status of this Subscription.  # noqa: E501

        I - installing A - active S - suspended T - terminated D - deleted   # noqa: E501

        :return: The status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        I - installing A - active S - suspended T - terminated D - deleted   # noqa: E501

        :param status: The status of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["I", "A", "S", "T", "D"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def account_id(self):
        """Gets the account_id of this Subscription.  # noqa: E501


        :return: The account_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Subscription.


        :param account_id: The account_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Subscription.  # noqa: E501


        :return: The cluster_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Subscription.


        :param cluster_id: The cluster_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def task_id(self):
        """Gets the task_id of this Subscription.  # noqa: E501


        :return: The task_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Subscription.


        :param task_id: The task_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def version(self):
        """Gets the version of this Subscription.  # noqa: E501


        :return: The version of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Subscription.


        :param version: The version of this Subscription.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def is_latest(self):
        """Gets the is_latest of this Subscription.  # noqa: E501


        :return: The is_latest of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this Subscription.


        :param is_latest: The is_latest of this Subscription.  # noqa: E501
        :type: bool
        """

        self._is_latest = is_latest

    @property
    def product_id(self):
        """Gets the product_id of this Subscription.  # noqa: E501


        :return: The product_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Subscription.


        :param product_id: The product_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def variation_id(self):
        """Gets the variation_id of this Subscription.  # noqa: E501


        :return: The variation_id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._variation_id

    @variation_id.setter
    def variation_id(self, variation_id):
        """Sets the variation_id of this Subscription.


        :param variation_id: The variation_id of this Subscription.  # noqa: E501
        :type: str
        """

        self._variation_id = variation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
