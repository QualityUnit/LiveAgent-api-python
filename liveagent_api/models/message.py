# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Message - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'userid': 'str',
            'type': 'str',
            'datecreated': 'datetime',
            'format': 'str',
            'message': 'str',
            'visibility': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'userid': 'userid',
            'type': 'type',
            'datecreated': 'datecreated',
            'format': 'format',
            'message': 'message',
            'visibility': 'visibility'
        }

        self._id = None
        self._userid = None
        self._type = None
        self._datecreated = None
        self._format = None
        self._message = None
        self._visibility = None

    @property
    def id(self):
        """
        Gets the id of this Message.


        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Message.


        :param id: The id of this Message.
        :type: str
        """
        self._id = id

    @property
    def userid(self):
        """
        Gets the userid of this Message.


        :return: The userid of this Message.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """
        Sets the userid of this Message.


        :param userid: The userid of this Message.
        :type: str
        """
        self._userid = userid

    @property
    def type(self):
        """
        Gets the type of this Message.
        M - MESSAGE Y - MESSAGE_LEGACY Q - QUOTED_TEXT I - INTERNAL F - FILE T - TITLE E - END D - DISCONNECT H - HEADER R - TRANSFER S - SYSTEM U - USERAGENT G - TAG V - VOICE 1 - VOICE_INTERNAL N - NOTE L - NOTE_FILE Z - FORMFIELD A - TEXT_HEADER O - TEXT_FOOTER J - STATUS B - SPLITTED W - RANKING_FEATURE_REWARD P - RANKING_FEATURE_PUNISHMENT C - RANKING_FEATURE_COMMENT K - SYSTEM_PUBLIC X - SYSTEM_VISITOR 0 - ERROR_FOOTER 2 - MERGED 3 - INVITATION_REROUTE

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Message.
        M - MESSAGE Y - MESSAGE_LEGACY Q - QUOTED_TEXT I - INTERNAL F - FILE T - TITLE E - END D - DISCONNECT H - HEADER R - TRANSFER S - SYSTEM U - USERAGENT G - TAG V - VOICE 1 - VOICE_INTERNAL N - NOTE L - NOTE_FILE Z - FORMFIELD A - TEXT_HEADER O - TEXT_FOOTER J - STATUS B - SPLITTED W - RANKING_FEATURE_REWARD P - RANKING_FEATURE_PUNISHMENT C - RANKING_FEATURE_COMMENT K - SYSTEM_PUBLIC X - SYSTEM_VISITOR 0 - ERROR_FOOTER 2 - MERGED 3 - INVITATION_REROUTE

        :param type: The type of this Message.
        :type: str
        """
        allowed_values = ["M", "Y", "Q", "I", "F", "T", "E", "D", "H", "R", "S", "U", "G", "V", "1", "N", "L", "Z", "A", "O", "J", "B", "W", "P", "C", "K", "X", "0", "2", "3"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def datecreated(self):
        """
        Gets the datecreated of this Message.


        :return: The datecreated of this Message.
        :rtype: datetime
        """
        return self._datecreated

    @datecreated.setter
    def datecreated(self, datecreated):
        """
        Sets the datecreated of this Message.


        :param datecreated: The datecreated of this Message.
        :type: datetime
        """
        self._datecreated = datecreated

    @property
    def format(self):
        """
        Gets the format of this Message.
        T - TEXT H - HTML J - JSON X - TEXT_LEGACY // text with possibility of internal form links (e.g. note, ranking comment, quoted, header, footer, internal) Y - HTML_LEGACY // html with possibility of internal form links (e.g. tag) Z - JSON_LEGACY // json with possibility of internal form links (e.g. footer)

        :return: The format of this Message.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this Message.
        T - TEXT H - HTML J - JSON X - TEXT_LEGACY // text with possibility of internal form links (e.g. note, ranking comment, quoted, header, footer, internal) Y - HTML_LEGACY // html with possibility of internal form links (e.g. tag) Z - JSON_LEGACY // json with possibility of internal form links (e.g. footer)

        :param format: The format of this Message.
        :type: str
        """
        allowed_values = ["T", "H", "J", "X", "Y", "Z"]
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format`, must be one of {0}"
                .format(allowed_values)
            )
        self._format = format

    @property
    def message(self):
        """
        Gets the message of this Message.


        :return: The message of this Message.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Message.


        :param message: The message of this Message.
        :type: str
        """
        self._message = message

    @property
    def visibility(self):
        """
        Gets the visibility of this Message.


        :return: The visibility of this Message.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this Message.


        :param visibility: The visibility of this Message.
        :type: str
        """
        self._visibility = visibility

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

