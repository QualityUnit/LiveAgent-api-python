# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CustomButton(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CustomButton - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'url': 'str',
            'method': 'str',
            'image_url': 'str',
            'type': 'str',
            'status': 'str',
            'parameters': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'url': 'url',
            'method': 'method',
            'image_url': 'image_url',
            'type': 'type',
            'status': 'status',
            'parameters': 'parameters'
        }

        self._id = None
        self._name = None
        self._url = None
        self._method = None
        self._image_url = None
        self._type = None
        self._status = None
        self._parameters = None

    @property
    def id(self):
        """
        Gets the id of this CustomButton.


        :return: The id of this CustomButton.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomButton.


        :param id: The id of this CustomButton.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CustomButton.


        :return: The name of this CustomButton.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomButton.


        :param name: The name of this CustomButton.
        :type: str
        """
        self._name = name

    @property
    def url(self):
        """
        Gets the url of this CustomButton.


        :return: The url of this CustomButton.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CustomButton.


        :param url: The url of this CustomButton.
        :type: str
        """
        self._url = url

    @property
    def method(self):
        """
        Gets the method of this CustomButton.


        :return: The method of this CustomButton.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this CustomButton.


        :param method: The method of this CustomButton.
        :type: str
        """
        allowed_values = ["GET", "POST"]
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method`, must be one of {0}"
                .format(allowed_values)
            )
        self._method = method

    @property
    def image_url(self):
        """
        Gets the image_url of this CustomButton.


        :return: The image_url of this CustomButton.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this CustomButton.


        :param image_url: The image_url of this CustomButton.
        :type: str
        """
        self._image_url = image_url

    @property
    def type(self):
        """
        Gets the type of this CustomButton.
        - E (External) - content will be opened in new browser tab

        :return: The type of this CustomButton.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CustomButton.
        - E (External) - content will be opened in new browser tab

        :param type: The type of this CustomButton.
        :type: str
        """
        allowed_values = ["E", "B"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def status(self):
        """
        Gets the status of this CustomButton.
        - A - Active - I - Inactive

        :return: The status of this CustomButton.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CustomButton.
        - A - Active - I - Inactive

        :param status: The status of this CustomButton.
        :type: str
        """
        allowed_values = ["A", "I"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def parameters(self):
        """
        Gets the parameters of this CustomButton.


        :return: The parameters of this CustomButton.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this CustomButton.


        :param parameters: The parameters of this CustomButton.
        :type: str
        """
        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

