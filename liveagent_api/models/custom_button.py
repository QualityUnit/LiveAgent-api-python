# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomButton(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'url': 'str',
        'method': 'str',
        'image_url': 'str',
        'type': 'str',
        'status': 'str',
        'parameters': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'method': 'method',
        'image_url': 'image_url',
        'type': 'type',
        'status': 'status',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, name=None, url=None, method=None, image_url=None, type=None, status=None, parameters=None):  # noqa: E501
        """CustomButton - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._url = None
        self._method = None
        self._image_url = None
        self._type = None
        self._status = None
        self._parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.url = url
        self.method = method
        if image_url is not None:
            self.image_url = image_url
        self.type = type
        if status is not None:
            self.status = status
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this CustomButton.  # noqa: E501


        :return: The id of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomButton.


        :param id: The id of this CustomButton.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomButton.  # noqa: E501


        :return: The name of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomButton.


        :param name: The name of this CustomButton.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this CustomButton.  # noqa: E501


        :return: The url of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomButton.


        :param url: The url of this CustomButton.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def method(self):
        """Gets the method of this CustomButton.  # noqa: E501


        :return: The method of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CustomButton.


        :param method: The method of this CustomButton.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["GET", "POST"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def image_url(self):
        """Gets the image_url of this CustomButton.  # noqa: E501


        :return: The image_url of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this CustomButton.


        :param image_url: The image_url of this CustomButton.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def type(self):
        """Gets the type of this CustomButton.  # noqa: E501

        - E (External) - content will be opened in new browser tab  # noqa: E501

        :return: The type of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomButton.

        - E (External) - content will be opened in new browser tab  # noqa: E501

        :param type: The type of this CustomButton.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["E", "B"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this CustomButton.  # noqa: E501

        - A - Active - I - Inactive  # noqa: E501

        :return: The status of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomButton.

        - A - Active - I - Inactive  # noqa: E501

        :param status: The status of this CustomButton.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "I"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def parameters(self):
        """Gets the parameters of this CustomButton.  # noqa: E501


        :return: The parameters of this CustomButton.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CustomButton.


        :param parameters: The parameters of this CustomButton.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomButton, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomButton):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
