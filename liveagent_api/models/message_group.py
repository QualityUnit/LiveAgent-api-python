# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MessageGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parent_id': 'str',
        'userid': 'str',
        'user_full_name': 'str',
        'type': 'str',
        'status': 'str',
        'datecreated': 'datetime',
        'datefinished': 'datetime',
        'sort_order': 'int',
        'mail_msg_id': 'str',
        'pop3_msg_id': 'str',
        'messages': 'list[Message]'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parent_id',
        'userid': 'userid',
        'user_full_name': 'user_full_name',
        'type': 'type',
        'status': 'status',
        'datecreated': 'datecreated',
        'datefinished': 'datefinished',
        'sort_order': 'sort_order',
        'mail_msg_id': 'mail_msg_id',
        'pop3_msg_id': 'pop3_msg_id',
        'messages': 'messages'
    }

    def __init__(self, id=None, parent_id=None, userid=None, user_full_name=None, type=None, status=None, datecreated=None, datefinished=None, sort_order=None, mail_msg_id=None, pop3_msg_id=None, messages=None):  # noqa: E501
        """MessageGroup - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._parent_id = None
        self._userid = None
        self._user_full_name = None
        self._type = None
        self._status = None
        self._datecreated = None
        self._datefinished = None
        self._sort_order = None
        self._mail_msg_id = None
        self._pop3_msg_id = None
        self._messages = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if userid is not None:
            self.userid = userid
        if user_full_name is not None:
            self.user_full_name = user_full_name
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if datecreated is not None:
            self.datecreated = datecreated
        if datefinished is not None:
            self.datefinished = datefinished
        if sort_order is not None:
            self.sort_order = sort_order
        if mail_msg_id is not None:
            self.mail_msg_id = mail_msg_id
        if pop3_msg_id is not None:
            self.pop3_msg_id = pop3_msg_id
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this MessageGroup.  # noqa: E501


        :return: The id of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageGroup.


        :param id: The id of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this MessageGroup.  # noqa: E501


        :return: The parent_id of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this MessageGroup.


        :param parent_id: The parent_id of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def userid(self):
        """Gets the userid of this MessageGroup.  # noqa: E501


        :return: The userid of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this MessageGroup.


        :param userid: The userid of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def user_full_name(self):
        """Gets the user_full_name of this MessageGroup.  # noqa: E501


        :return: The user_full_name of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._user_full_name

    @user_full_name.setter
    def user_full_name(self, user_full_name):
        """Sets the user_full_name of this MessageGroup.


        :param user_full_name: The user_full_name of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._user_full_name = user_full_name

    @property
    def type(self):
        """Gets the type of this MessageGroup.  # noqa: E501

        M - OFFLINE C - CHAT P - CALL V - OUTGOING_CALL 1 - INTERNAL_CALL I - INTERNAL U - INTERNAL_OFFLINE Z - INTERNAL_COLLAPSED S - STARTINFO T - TRANSFER R - RESOLVE J - POSTPONE X - DELETE B - SPAM G - TAG F - FACEBOOK W - TWITTER H - WEIBO E - WEIBO_COMMENT D - TENCENT N - TENCENT_COMMENT Y - RETWEET A - KNOWLEDGEBASE_START K - KNOWLEDGEBASE O - FORWARD Q - FORWARD_REPLY L - SPLITTED 2 - MERGED  # noqa: E501

        :return: The type of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessageGroup.

        M - OFFLINE C - CHAT P - CALL V - OUTGOING_CALL 1 - INTERNAL_CALL I - INTERNAL U - INTERNAL_OFFLINE Z - INTERNAL_COLLAPSED S - STARTINFO T - TRANSFER R - RESOLVE J - POSTPONE X - DELETE B - SPAM G - TAG F - FACEBOOK W - TWITTER H - WEIBO E - WEIBO_COMMENT D - TENCENT N - TENCENT_COMMENT Y - RETWEET A - KNOWLEDGEBASE_START K - KNOWLEDGEBASE O - FORWARD Q - FORWARD_REPLY L - SPLITTED 2 - MERGED  # noqa: E501

        :param type: The type of this MessageGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "C", "P", "V", "1", "I", "U", "Z", "S", "T", "R", "J", "X", "B", "G", "F", "W", "H", "E", "D", "N", "Y", "A", "K", "O", "Q", "L", "2"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this MessageGroup.  # noqa: E501

        D - DELETED P - PROMOTED V - VISIBLE S - SPLITTED M - MERGED I - INITIALIZING R - CONNECTING C - CALLING  # noqa: E501

        :return: The status of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageGroup.

        D - DELETED P - PROMOTED V - VISIBLE S - SPLITTED M - MERGED I - INITIALIZING R - CONNECTING C - CALLING  # noqa: E501

        :param status: The status of this MessageGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["D", "P", "V", "S", "M", "I", "R", "C"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def datecreated(self):
        """Gets the datecreated of this MessageGroup.  # noqa: E501


        :return: The datecreated of this MessageGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._datecreated

    @datecreated.setter
    def datecreated(self, datecreated):
        """Sets the datecreated of this MessageGroup.


        :param datecreated: The datecreated of this MessageGroup.  # noqa: E501
        :type: datetime
        """

        self._datecreated = datecreated

    @property
    def datefinished(self):
        """Gets the datefinished of this MessageGroup.  # noqa: E501


        :return: The datefinished of this MessageGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._datefinished

    @datefinished.setter
    def datefinished(self, datefinished):
        """Sets the datefinished of this MessageGroup.


        :param datefinished: The datefinished of this MessageGroup.  # noqa: E501
        :type: datetime
        """

        self._datefinished = datefinished

    @property
    def sort_order(self):
        """Gets the sort_order of this MessageGroup.  # noqa: E501


        :return: The sort_order of this MessageGroup.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this MessageGroup.


        :param sort_order: The sort_order of this MessageGroup.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def mail_msg_id(self):
        """Gets the mail_msg_id of this MessageGroup.  # noqa: E501


        :return: The mail_msg_id of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._mail_msg_id

    @mail_msg_id.setter
    def mail_msg_id(self, mail_msg_id):
        """Sets the mail_msg_id of this MessageGroup.


        :param mail_msg_id: The mail_msg_id of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._mail_msg_id = mail_msg_id

    @property
    def pop3_msg_id(self):
        """Gets the pop3_msg_id of this MessageGroup.  # noqa: E501


        :return: The pop3_msg_id of this MessageGroup.  # noqa: E501
        :rtype: str
        """
        return self._pop3_msg_id

    @pop3_msg_id.setter
    def pop3_msg_id(self, pop3_msg_id):
        """Sets the pop3_msg_id of this MessageGroup.


        :param pop3_msg_id: The pop3_msg_id of this MessageGroup.  # noqa: E501
        :type: str
        """

        self._pop3_msg_id = pop3_msg_id

    @property
    def messages(self):
        """Gets the messages of this MessageGroup.  # noqa: E501


        :return: The messages of this MessageGroup.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this MessageGroup.


        :param messages: The messages of this MessageGroup.  # noqa: E501
        :type: list[Message]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
