# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DeviceDepartmentPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DeviceDepartmentPlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_id': 'float',
            'department_id': 'str',
            'plan_id_start': 'float',
            'plan_id_end': 'float',
            'day': 'float',
            'start': 'str',
            'end': 'str'
        }

        self.attribute_map = {
            'device_id': 'device_id',
            'department_id': 'department_id',
            'plan_id_start': 'plan_id_start',
            'plan_id_end': 'plan_id_end',
            'day': 'day',
            'start': 'start',
            'end': 'end'
        }

        self._device_id = None
        self._department_id = None
        self._plan_id_start = None
        self._plan_id_end = None
        self._day = None
        self._start = None
        self._end = None

    @property
    def device_id(self):
        """
        Gets the device_id of this DeviceDepartmentPlan.


        :return: The device_id of this DeviceDepartmentPlan.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """
        Sets the device_id of this DeviceDepartmentPlan.


        :param device_id: The device_id of this DeviceDepartmentPlan.
        :type: float
        """
        self._device_id = device_id

    @property
    def department_id(self):
        """
        Gets the department_id of this DeviceDepartmentPlan.


        :return: The department_id of this DeviceDepartmentPlan.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """
        Sets the department_id of this DeviceDepartmentPlan.


        :param department_id: The department_id of this DeviceDepartmentPlan.
        :type: str
        """
        self._department_id = department_id

    @property
    def plan_id_start(self):
        """
        Gets the plan_id_start of this DeviceDepartmentPlan.


        :return: The plan_id_start of this DeviceDepartmentPlan.
        :rtype: float
        """
        return self._plan_id_start

    @plan_id_start.setter
    def plan_id_start(self, plan_id_start):
        """
        Sets the plan_id_start of this DeviceDepartmentPlan.


        :param plan_id_start: The plan_id_start of this DeviceDepartmentPlan.
        :type: float
        """
        self._plan_id_start = plan_id_start

    @property
    def plan_id_end(self):
        """
        Gets the plan_id_end of this DeviceDepartmentPlan.


        :return: The plan_id_end of this DeviceDepartmentPlan.
        :rtype: float
        """
        return self._plan_id_end

    @plan_id_end.setter
    def plan_id_end(self, plan_id_end):
        """
        Sets the plan_id_end of this DeviceDepartmentPlan.


        :param plan_id_end: The plan_id_end of this DeviceDepartmentPlan.
        :type: float
        """
        self._plan_id_end = plan_id_end

    @property
    def day(self):
        """
        Gets the day of this DeviceDepartmentPlan.


        :return: The day of this DeviceDepartmentPlan.
        :rtype: float
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this DeviceDepartmentPlan.


        :param day: The day of this DeviceDepartmentPlan.
        :type: float
        """
        self._day = day

    @property
    def start(self):
        """
        Gets the start of this DeviceDepartmentPlan.


        :return: The start of this DeviceDepartmentPlan.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this DeviceDepartmentPlan.


        :param start: The start of this DeviceDepartmentPlan.
        :type: str
        """
        self._start = start

    @property
    def end(self):
        """
        Gets the end of this DeviceDepartmentPlan.


        :return: The end of this DeviceDepartmentPlan.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this DeviceDepartmentPlan.


        :param end: The end of this DeviceDepartmentPlan.
        :type: str
        """
        self._end = end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

