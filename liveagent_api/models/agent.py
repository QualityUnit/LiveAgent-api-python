# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Agent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'email': 'str',
        'role': 'str',
        'avatar_url': 'str',
        'online_status': 'str',
        'status': 'str',
        'gender': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'role': 'role',
        'avatar_url': 'avatar_url',
        'online_status': 'online_status',
        'status': 'status',
        'gender': 'gender'
    }

    def __init__(self, id=None, name=None, email=None, role='agent', avatar_url=None, online_status=None, status=None, gender='X'):  # noqa: E501
        """Agent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._email = None
        self._role = None
        self._avatar_url = None
        self._online_status = None
        self._status = None
        self._gender = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.email = email
        if role is not None:
            self.role = role
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if online_status is not None:
            self.online_status = online_status
        if status is not None:
            self.status = status
        if gender is not None:
            self.gender = gender

    @property
    def id(self):
        """Gets the id of this Agent.  # noqa: E501


        :return: The id of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Agent.


        :param id: The id of this Agent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Agent.  # noqa: E501


        :return: The name of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Agent.


        :param name: The name of this Agent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this Agent.  # noqa: E501


        :return: The email of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Agent.


        :param email: The email of this Agent.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this Agent.  # noqa: E501


        :return: The role of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Agent.


        :param role: The role of this Agent.  # noqa: E501
        :type: str
        """
        allowed_values = ["owner", "admin", "agent"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Agent.  # noqa: E501


        :return: The avatar_url of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Agent.


        :param avatar_url: The avatar_url of this Agent.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def online_status(self):
        """Gets the online_status of this Agent.  # noqa: E501

        F - offline, N - online, P - paused, C - mobile   # noqa: E501

        :return: The online_status of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this Agent.

        F - offline, N - online, P - paused, C - mobile   # noqa: E501

        :param online_status: The online_status of this Agent.  # noqa: E501
        :type: str
        """

        self._online_status = online_status

    @property
    def status(self):
        """Gets the status of this Agent.  # noqa: E501

        A - active, X - deleted   # noqa: E501

        :return: The status of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Agent.

        A - active, X - deleted   # noqa: E501

        :param status: The status of this Agent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def gender(self):
        """Gets the gender of this Agent.  # noqa: E501

        M - male, F - female, X - unspecified   # noqa: E501

        :return: The gender of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Agent.

        M - male, F - female, X - unspecified   # noqa: E501

        :param gender: The gender of this Agent.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "F", "X"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Agent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Agent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
