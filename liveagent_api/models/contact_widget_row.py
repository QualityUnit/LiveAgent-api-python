# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class ContactWidgetRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'online_code': 'str',
        'offline_code': 'str',
        'online_code_css': 'str',
        'offline_code_css': 'str',
        'provide': 'str',
        'impressions': 'str',
        'tickets': 'str',
        'status': 'str',
        'last_display_time': 'str',
        'last_display_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'online_code': 'online_code',
        'offline_code': 'offline_code',
        'online_code_css': 'online_code_css',
        'offline_code_css': 'offline_code_css',
        'provide': 'provide',
        'impressions': 'impressions',
        'tickets': 'tickets',
        'status': 'status',
        'last_display_time': 'last_display_time',
        'last_display_url': 'last_display_url'
    }

    def __init__(self, id=None, name=None, type=None, online_code=None, offline_code=None, online_code_css=None, offline_code_css=None, provide=None, impressions=None, tickets=None, status=None, last_display_time=None, last_display_url=None, _configuration=None):  # noqa: E501
        """ContactWidgetRow - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type = None
        self._online_code = None
        self._offline_code = None
        self._online_code_css = None
        self._offline_code_css = None
        self._provide = None
        self._impressions = None
        self._tickets = None
        self._status = None
        self._last_display_time = None
        self._last_display_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if online_code is not None:
            self.online_code = online_code
        if offline_code is not None:
            self.offline_code = offline_code
        if online_code_css is not None:
            self.online_code_css = online_code_css
        if offline_code_css is not None:
            self.offline_code_css = offline_code_css
        if provide is not None:
            self.provide = provide
        if impressions is not None:
            self.impressions = impressions
        if tickets is not None:
            self.tickets = tickets
        if status is not None:
            self.status = status
        if last_display_time is not None:
            self.last_display_time = last_display_time
        if last_display_url is not None:
            self.last_display_url = last_display_url

    @property
    def id(self):
        """Gets the id of this ContactWidgetRow.  # noqa: E501


        :return: The id of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactWidgetRow.


        :param id: The id of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContactWidgetRow.  # noqa: E501


        :return: The name of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactWidgetRow.


        :param name: The name of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ContactWidgetRow.  # noqa: E501


        :return: The type of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactWidgetRow.


        :param type: The type of this ContactWidgetRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "U", "M", "O", "K", "S", "P", "B", "G", "W", "V", "A", "T"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def online_code(self):
        """Gets the online_code of this ContactWidgetRow.  # noqa: E501


        :return: The online_code of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._online_code

    @online_code.setter
    def online_code(self, online_code):
        """Sets the online_code of this ContactWidgetRow.


        :param online_code: The online_code of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._online_code = online_code

    @property
    def offline_code(self):
        """Gets the offline_code of this ContactWidgetRow.  # noqa: E501


        :return: The offline_code of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._offline_code

    @offline_code.setter
    def offline_code(self, offline_code):
        """Sets the offline_code of this ContactWidgetRow.


        :param offline_code: The offline_code of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._offline_code = offline_code

    @property
    def online_code_css(self):
        """Gets the online_code_css of this ContactWidgetRow.  # noqa: E501


        :return: The online_code_css of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._online_code_css

    @online_code_css.setter
    def online_code_css(self, online_code_css):
        """Sets the online_code_css of this ContactWidgetRow.


        :param online_code_css: The online_code_css of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._online_code_css = online_code_css

    @property
    def offline_code_css(self):
        """Gets the offline_code_css of this ContactWidgetRow.  # noqa: E501


        :return: The offline_code_css of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._offline_code_css

    @offline_code_css.setter
    def offline_code_css(self, offline_code_css):
        """Sets the offline_code_css of this ContactWidgetRow.


        :param offline_code_css: The offline_code_css of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._offline_code_css = offline_code_css

    @property
    def provide(self):
        """Gets the provide of this ContactWidgetRow.  # noqa: E501


        :return: The provide of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._provide

    @provide.setter
    def provide(self, provide):
        """Sets the provide of this ContactWidgetRow.


        :param provide: The provide of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._provide = provide

    @property
    def impressions(self):
        """Gets the impressions of this ContactWidgetRow.  # noqa: E501


        :return: The impressions of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this ContactWidgetRow.


        :param impressions: The impressions of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._impressions = impressions

    @property
    def tickets(self):
        """Gets the tickets of this ContactWidgetRow.  # noqa: E501


        :return: The tickets of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._tickets

    @tickets.setter
    def tickets(self, tickets):
        """Sets the tickets of this ContactWidgetRow.


        :param tickets: The tickets of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._tickets = tickets

    @property
    def status(self):
        """Gets the status of this ContactWidgetRow.  # noqa: E501


        :return: The status of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContactWidgetRow.


        :param status: The status of this ContactWidgetRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["N", "F", "C", "A", "I"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_display_time(self):
        """Gets the last_display_time of this ContactWidgetRow.  # noqa: E501


        :return: The last_display_time of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._last_display_time

    @last_display_time.setter
    def last_display_time(self, last_display_time):
        """Sets the last_display_time of this ContactWidgetRow.


        :param last_display_time: The last_display_time of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._last_display_time = last_display_time

    @property
    def last_display_url(self):
        """Gets the last_display_url of this ContactWidgetRow.  # noqa: E501


        :return: The last_display_url of this ContactWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._last_display_url

    @last_display_url.setter
    def last_display_url(self, last_display_url):
        """Sets the last_display_url of this ContactWidgetRow.


        :param last_display_url: The last_display_url of this ContactWidgetRow.  # noqa: E501
        :type: str
        """

        self._last_display_url = last_display_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactWidgetRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactWidgetRow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactWidgetRow):
            return True

        return self.to_dict() != other.to_dict()
