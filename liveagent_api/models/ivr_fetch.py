# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IvrFetch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IvrFetch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'prefix': 'str',
            'params': 'list[IvrFetchParam]',
            'ivrs': 'list[str]'
        }

        self.attribute_map = {
            'url': 'url',
            'prefix': 'prefix',
            'params': 'params',
            'ivrs': 'ivrs'
        }

        self._url = None
        self._prefix = None
        self._params = None
        self._ivrs = None

    @property
    def url(self):
        """
        Gets the url of this IvrFetch.


        :return: The url of this IvrFetch.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this IvrFetch.


        :param url: The url of this IvrFetch.
        :type: str
        """
        self._url = url

    @property
    def prefix(self):
        """
        Gets the prefix of this IvrFetch.


        :return: The prefix of this IvrFetch.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this IvrFetch.


        :param prefix: The prefix of this IvrFetch.
        :type: str
        """
        self._prefix = prefix

    @property
    def params(self):
        """
        Gets the params of this IvrFetch.


        :return: The params of this IvrFetch.
        :rtype: list[IvrFetchParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this IvrFetch.


        :param params: The params of this IvrFetch.
        :type: list[IvrFetchParam]
        """
        self._params = params

    @property
    def ivrs(self):
        """
        Gets the ivrs of this IvrFetch.


        :return: The ivrs of this IvrFetch.
        :rtype: list[str]
        """
        return self._ivrs

    @ivrs.setter
    def ivrs(self, ivrs):
        """
        Sets the ivrs of this IvrFetch.


        :param ivrs: The ivrs of this IvrFetch.
        :type: list[str]
        """
        self._ivrs = ivrs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

