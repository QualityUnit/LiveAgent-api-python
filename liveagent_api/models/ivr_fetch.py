# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.ivr_fetch_param import IvrFetchParam  # noqa: F401,E501


class IvrFetch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'prefix': 'str',
        'on_error': 'str',
        'params': 'list[IvrFetchParam]',
        'ivrs': 'list[str]'
    }

    attribute_map = {
        'url': 'url',
        'prefix': 'prefix',
        'on_error': 'onError',
        'params': 'params',
        'ivrs': 'ivrs'
    }

    def __init__(self, url=None, prefix=None, on_error=None, params=None, ivrs=None):  # noqa: E501
        """IvrFetch - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._prefix = None
        self._on_error = None
        self._params = None
        self._ivrs = None
        self.discriminator = None

        self.url = url
        if prefix is not None:
            self.prefix = prefix
        if on_error is not None:
            self.on_error = on_error
        if params is not None:
            self.params = params
        if ivrs is not None:
            self.ivrs = ivrs

    @property
    def url(self):
        """Gets the url of this IvrFetch.  # noqa: E501


        :return: The url of this IvrFetch.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IvrFetch.


        :param url: The url of this IvrFetch.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def prefix(self):
        """Gets the prefix of this IvrFetch.  # noqa: E501


        :return: The prefix of this IvrFetch.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this IvrFetch.


        :param prefix: The prefix of this IvrFetch.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def on_error(self):
        """Gets the on_error of this IvrFetch.  # noqa: E501


        :return: The on_error of this IvrFetch.  # noqa: E501
        :rtype: str
        """
        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """Sets the on_error of this IvrFetch.


        :param on_error: The on_error of this IvrFetch.  # noqa: E501
        :type: str
        """

        self._on_error = on_error

    @property
    def params(self):
        """Gets the params of this IvrFetch.  # noqa: E501


        :return: The params of this IvrFetch.  # noqa: E501
        :rtype: list[IvrFetchParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this IvrFetch.


        :param params: The params of this IvrFetch.  # noqa: E501
        :type: list[IvrFetchParam]
        """

        self._params = params

    @property
    def ivrs(self):
        """Gets the ivrs of this IvrFetch.  # noqa: E501


        :return: The ivrs of this IvrFetch.  # noqa: E501
        :rtype: list[str]
        """
        return self._ivrs

    @ivrs.setter
    def ivrs(self, ivrs):
        """Sets the ivrs of this IvrFetch.


        :param ivrs: The ivrs of this IvrFetch.  # noqa: E501
        :type: list[str]
        """

        self._ivrs = ivrs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IvrFetch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
