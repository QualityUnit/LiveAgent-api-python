# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.ivr import Ivr  # noqa: F401,E501


class Call(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ticket_id': 'str',
        'direction': 'str',
        'callee_status': 'str',
        'ivrs': 'list[Ivr]',
        'record_call': 'bool',
        'reroute_time': 'float',
        'max_queue_time': 'float',
        'max_ring_time': 'float',
        'online_ivr': 'str',
        'offline_ivr': 'str',
        'queue_ivr': 'str',
        'from_number': 'str',
        'caller_name': 'str',
        'to_number': 'str',
        'via_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ticket_id': 'ticket_id',
        'direction': 'direction',
        'callee_status': 'callee_status',
        'ivrs': 'ivrs',
        'record_call': 'record_call',
        'reroute_time': 'reroute_time',
        'max_queue_time': 'max_queue_time',
        'max_ring_time': 'max_ring_time',
        'online_ivr': 'online_ivr',
        'offline_ivr': 'offline_ivr',
        'queue_ivr': 'queue_ivr',
        'from_number': 'from_number',
        'caller_name': 'caller_name',
        'to_number': 'to_number',
        'via_number': 'via_number'
    }

    def __init__(self, id=None, ticket_id=None, direction=None, callee_status=None, ivrs=None, record_call=False, reroute_time=None, max_queue_time=None, max_ring_time=None, online_ivr=None, offline_ivr=None, queue_ivr=None, from_number=None, caller_name=None, to_number=None, via_number=None):  # noqa: E501
        """Call - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ticket_id = None
        self._direction = None
        self._callee_status = None
        self._ivrs = None
        self._record_call = None
        self._reroute_time = None
        self._max_queue_time = None
        self._max_ring_time = None
        self._online_ivr = None
        self._offline_ivr = None
        self._queue_ivr = None
        self._from_number = None
        self._caller_name = None
        self._to_number = None
        self._via_number = None
        self.discriminator = None

        self.id = id
        self.ticket_id = ticket_id
        if direction is not None:
            self.direction = direction
        if callee_status is not None:
            self.callee_status = callee_status
        if ivrs is not None:
            self.ivrs = ivrs
        if record_call is not None:
            self.record_call = record_call
        if reroute_time is not None:
            self.reroute_time = reroute_time
        if max_queue_time is not None:
            self.max_queue_time = max_queue_time
        if max_ring_time is not None:
            self.max_ring_time = max_ring_time
        if online_ivr is not None:
            self.online_ivr = online_ivr
        if offline_ivr is not None:
            self.offline_ivr = offline_ivr
        if queue_ivr is not None:
            self.queue_ivr = queue_ivr
        if from_number is not None:
            self.from_number = from_number
        if caller_name is not None:
            self.caller_name = caller_name
        if to_number is not None:
            self.to_number = to_number
        if via_number is not None:
            self.via_number = via_number

    @property
    def id(self):
        """Gets the id of this Call.  # noqa: E501


        :return: The id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Call.


        :param id: The id of this Call.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ticket_id(self):
        """Gets the ticket_id of this Call.  # noqa: E501


        :return: The ticket_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this Call.


        :param ticket_id: The ticket_id of this Call.  # noqa: E501
        :type: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")  # noqa: E501

        self._ticket_id = ticket_id

    @property
    def direction(self):
        """Gets the direction of this Call.  # noqa: E501

        incoming call ('in' - default), outgoing call ('out'), internal call('int')  # noqa: E501

        :return: The direction of this Call.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Call.

        incoming call ('in' - default), outgoing call ('out'), internal call('int')  # noqa: E501

        :param direction: The direction of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["in", "out", "int"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def callee_status(self):
        """Gets the callee_status of this Call.  # noqa: E501

        O - online, F - offline, U - unknown  # noqa: E501

        :return: The callee_status of this Call.  # noqa: E501
        :rtype: str
        """
        return self._callee_status

    @callee_status.setter
    def callee_status(self, callee_status):
        """Sets the callee_status of this Call.

        O - online, F - offline, U - unknown  # noqa: E501

        :param callee_status: The callee_status of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["O", "F", "U"]  # noqa: E501
        if callee_status not in allowed_values:
            raise ValueError(
                "Invalid value for `callee_status` ({0}), must be one of {1}"  # noqa: E501
                .format(callee_status, allowed_values)
            )

        self._callee_status = callee_status

    @property
    def ivrs(self):
        """Gets the ivrs of this Call.  # noqa: E501


        :return: The ivrs of this Call.  # noqa: E501
        :rtype: list[Ivr]
        """
        return self._ivrs

    @ivrs.setter
    def ivrs(self, ivrs):
        """Sets the ivrs of this Call.


        :param ivrs: The ivrs of this Call.  # noqa: E501
        :type: list[Ivr]
        """

        self._ivrs = ivrs

    @property
    def record_call(self):
        """Gets the record_call of this Call.  # noqa: E501


        :return: The record_call of this Call.  # noqa: E501
        :rtype: bool
        """
        return self._record_call

    @record_call.setter
    def record_call(self, record_call):
        """Sets the record_call of this Call.


        :param record_call: The record_call of this Call.  # noqa: E501
        :type: bool
        """

        self._record_call = record_call

    @property
    def reroute_time(self):
        """Gets the reroute_time of this Call.  # noqa: E501


        :return: The reroute_time of this Call.  # noqa: E501
        :rtype: float
        """
        return self._reroute_time

    @reroute_time.setter
    def reroute_time(self, reroute_time):
        """Sets the reroute_time of this Call.


        :param reroute_time: The reroute_time of this Call.  # noqa: E501
        :type: float
        """
        if reroute_time is not None and reroute_time > 120:  # noqa: E501
            raise ValueError("Invalid value for `reroute_time`, must be a value less than or equal to `120`")  # noqa: E501
        if reroute_time is not None and reroute_time < 10:  # noqa: E501
            raise ValueError("Invalid value for `reroute_time`, must be a value greater than or equal to `10`")  # noqa: E501

        self._reroute_time = reroute_time

    @property
    def max_queue_time(self):
        """Gets the max_queue_time of this Call.  # noqa: E501


        :return: The max_queue_time of this Call.  # noqa: E501
        :rtype: float
        """
        return self._max_queue_time

    @max_queue_time.setter
    def max_queue_time(self, max_queue_time):
        """Sets the max_queue_time of this Call.


        :param max_queue_time: The max_queue_time of this Call.  # noqa: E501
        :type: float
        """
        if max_queue_time is not None and max_queue_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_queue_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_queue_time = max_queue_time

    @property
    def max_ring_time(self):
        """Gets the max_ring_time of this Call.  # noqa: E501


        :return: The max_ring_time of this Call.  # noqa: E501
        :rtype: float
        """
        return self._max_ring_time

    @max_ring_time.setter
    def max_ring_time(self, max_ring_time):
        """Sets the max_ring_time of this Call.


        :param max_ring_time: The max_ring_time of this Call.  # noqa: E501
        :type: float
        """
        if max_ring_time is not None and max_ring_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_ring_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_ring_time = max_ring_time

    @property
    def online_ivr(self):
        """Gets the online_ivr of this Call.  # noqa: E501

        Name of IVR in case the service is online. If empty, call starts ringing to agents  # noqa: E501

        :return: The online_ivr of this Call.  # noqa: E501
        :rtype: str
        """
        return self._online_ivr

    @online_ivr.setter
    def online_ivr(self, online_ivr):
        """Sets the online_ivr of this Call.

        Name of IVR in case the service is online. If empty, call starts ringing to agents  # noqa: E501

        :param online_ivr: The online_ivr of this Call.  # noqa: E501
        :type: str
        """

        self._online_ivr = online_ivr

    @property
    def offline_ivr(self):
        """Gets the offline_ivr of this Call.  # noqa: E501

        Name of IVR in case the service is offline. If empty, call hangs up with not available tone  # noqa: E501

        :return: The offline_ivr of this Call.  # noqa: E501
        :rtype: str
        """
        return self._offline_ivr

    @offline_ivr.setter
    def offline_ivr(self, offline_ivr):
        """Sets the offline_ivr of this Call.

        Name of IVR in case the service is offline. If empty, call hangs up with not available tone  # noqa: E501

        :param offline_ivr: The offline_ivr of this Call.  # noqa: E501
        :type: str
        """

        self._offline_ivr = offline_ivr

    @property
    def queue_ivr(self):
        """Gets the queue_ivr of this Call.  # noqa: E501

        Name of IVR while waiting in queue. If empty, default in queue music is played  # noqa: E501

        :return: The queue_ivr of this Call.  # noqa: E501
        :rtype: str
        """
        return self._queue_ivr

    @queue_ivr.setter
    def queue_ivr(self, queue_ivr):
        """Sets the queue_ivr of this Call.

        Name of IVR while waiting in queue. If empty, default in queue music is played  # noqa: E501

        :param queue_ivr: The queue_ivr of this Call.  # noqa: E501
        :type: str
        """

        self._queue_ivr = queue_ivr

    @property
    def from_number(self):
        """Gets the from_number of this Call.  # noqa: E501

        Caller number  # noqa: E501

        :return: The from_number of this Call.  # noqa: E501
        :rtype: str
        """
        return self._from_number

    @from_number.setter
    def from_number(self, from_number):
        """Sets the from_number of this Call.

        Caller number  # noqa: E501

        :param from_number: The from_number of this Call.  # noqa: E501
        :type: str
        """

        self._from_number = from_number

    @property
    def caller_name(self):
        """Gets the caller_name of this Call.  # noqa: E501

        Name of the caller in case it is known  # noqa: E501

        :return: The caller_name of this Call.  # noqa: E501
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this Call.

        Name of the caller in case it is known  # noqa: E501

        :param caller_name: The caller_name of this Call.  # noqa: E501
        :type: str
        """

        self._caller_name = caller_name

    @property
    def to_number(self):
        """Gets the to_number of this Call.  # noqa: E501

        Callee number  # noqa: E501

        :return: The to_number of this Call.  # noqa: E501
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """Sets the to_number of this Call.

        Callee number  # noqa: E501

        :param to_number: The to_number of this Call.  # noqa: E501
        :type: str
        """

        self._to_number = to_number

    @property
    def via_number(self):
        """Gets the via_number of this Call.  # noqa: E501

        trunk number via which call was made / received (if applicable)  # noqa: E501

        :return: The via_number of this Call.  # noqa: E501
        :rtype: str
        """
        return self._via_number

    @via_number.setter
    def via_number(self, via_number):
        """Sets the via_number of this Call.

        trunk number via which call was made / received (if applicable)  # noqa: E501

        :param via_number: The via_number of this Call.  # noqa: E501
        :type: str
        """

        self._via_number = via_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Call):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
