# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LanguageRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'languageid': 'str',
        'name': 'str',
        'code': 'str',
        'eng_name': 'str',
        'translated': 'str',
        'is_default': 'str',
        'active': 'str',
        'imported': 'str',
        'is_custom': 'str'
    }

    attribute_map = {
        'languageid': 'languageid',
        'name': 'name',
        'code': 'code',
        'eng_name': 'eng_name',
        'translated': 'translated',
        'is_default': 'is_default',
        'active': 'active',
        'imported': 'imported',
        'is_custom': 'is_custom'
    }

    def __init__(self, languageid=None, name=None, code=None, eng_name=None, translated=None, is_default=None, active=None, imported=None, is_custom=None):  # noqa: E501
        """LanguageRow - a model defined in Swagger"""  # noqa: E501

        self._languageid = None
        self._name = None
        self._code = None
        self._eng_name = None
        self._translated = None
        self._is_default = None
        self._active = None
        self._imported = None
        self._is_custom = None
        self.discriminator = None

        if languageid is not None:
            self.languageid = languageid
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if eng_name is not None:
            self.eng_name = eng_name
        if translated is not None:
            self.translated = translated
        if is_default is not None:
            self.is_default = is_default
        if active is not None:
            self.active = active
        if imported is not None:
            self.imported = imported
        if is_custom is not None:
            self.is_custom = is_custom

    @property
    def languageid(self):
        """Gets the languageid of this LanguageRow.  # noqa: E501


        :return: The languageid of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._languageid

    @languageid.setter
    def languageid(self, languageid):
        """Sets the languageid of this LanguageRow.


        :param languageid: The languageid of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._languageid = languageid

    @property
    def name(self):
        """Gets the name of this LanguageRow.  # noqa: E501


        :return: The name of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LanguageRow.


        :param name: The name of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this LanguageRow.  # noqa: E501


        :return: The code of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this LanguageRow.


        :param code: The code of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def eng_name(self):
        """Gets the eng_name of this LanguageRow.  # noqa: E501


        :return: The eng_name of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._eng_name

    @eng_name.setter
    def eng_name(self, eng_name):
        """Sets the eng_name of this LanguageRow.


        :param eng_name: The eng_name of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._eng_name = eng_name

    @property
    def translated(self):
        """Gets the translated of this LanguageRow.  # noqa: E501


        :return: The translated of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._translated

    @translated.setter
    def translated(self, translated):
        """Sets the translated of this LanguageRow.


        :param translated: The translated of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._translated = translated

    @property
    def is_default(self):
        """Gets the is_default of this LanguageRow.  # noqa: E501


        :return: The is_default of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this LanguageRow.


        :param is_default: The is_default of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._is_default = is_default

    @property
    def active(self):
        """Gets the active of this LanguageRow.  # noqa: E501


        :return: The active of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LanguageRow.


        :param active: The active of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._active = active

    @property
    def imported(self):
        """Gets the imported of this LanguageRow.  # noqa: E501


        :return: The imported of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this LanguageRow.


        :param imported: The imported of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._imported = imported

    @property
    def is_custom(self):
        """Gets the is_custom of this LanguageRow.  # noqa: E501


        :return: The is_custom of this LanguageRow.  # noqa: E501
        :rtype: str
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this LanguageRow.


        :param is_custom: The is_custom of this LanguageRow.  # noqa: E501
        :type: str
        """

        self._is_custom = is_custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LanguageRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
