# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PhoneDevice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PhoneDevice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'number': 'str',
            'connection_host': 'str',
            'connection_user': 'str',
            'connection_pass': 'str',
            'params': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'number': 'number',
            'connection_host': 'connection_host',
            'connection_user': 'connection_user',
            'connection_pass': 'connection_pass',
            'params': 'params'
        }

        self._id = None
        self._type = None
        self._number = None
        self._connection_host = None
        self._connection_user = None
        self._connection_pass = None
        self._params = None

    @property
    def id(self):
        """
        Gets the id of this PhoneDevice.


        :return: The id of this PhoneDevice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PhoneDevice.


        :param id: The id of this PhoneDevice.
        :type: str
        """
        self._id = id

    @property
    def type(self):
        """
        Gets the type of this PhoneDevice.
        A - LiveAgent phone app, S - SIP phone, E - PSTN phone, W - In panel web phone, I - Api phone

        :return: The type of this PhoneDevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PhoneDevice.
        A - LiveAgent phone app, S - SIP phone, E - PSTN phone, W - In panel web phone, I - Api phone

        :param type: The type of this PhoneDevice.
        :type: str
        """
        allowed_values = ["A", "S", "E", "W", "I"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def number(self):
        """
        Gets the number of this PhoneDevice.


        :return: The number of this PhoneDevice.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this PhoneDevice.


        :param number: The number of this PhoneDevice.
        :type: str
        """
        self._number = number

    @property
    def connection_host(self):
        """
        Gets the connection_host of this PhoneDevice.


        :return: The connection_host of this PhoneDevice.
        :rtype: str
        """
        return self._connection_host

    @connection_host.setter
    def connection_host(self, connection_host):
        """
        Sets the connection_host of this PhoneDevice.


        :param connection_host: The connection_host of this PhoneDevice.
        :type: str
        """
        self._connection_host = connection_host

    @property
    def connection_user(self):
        """
        Gets the connection_user of this PhoneDevice.


        :return: The connection_user of this PhoneDevice.
        :rtype: str
        """
        return self._connection_user

    @connection_user.setter
    def connection_user(self, connection_user):
        """
        Sets the connection_user of this PhoneDevice.


        :param connection_user: The connection_user of this PhoneDevice.
        :type: str
        """
        self._connection_user = connection_user

    @property
    def connection_pass(self):
        """
        Gets the connection_pass of this PhoneDevice.


        :return: The connection_pass of this PhoneDevice.
        :rtype: str
        """
        return self._connection_pass

    @connection_pass.setter
    def connection_pass(self, connection_pass):
        """
        Sets the connection_pass of this PhoneDevice.


        :param connection_pass: The connection_pass of this PhoneDevice.
        :type: str
        """
        self._connection_pass = connection_pass

    @property
    def params(self):
        """
        Gets the params of this PhoneDevice.
        Addtional params column with no specific meaning

        :return: The params of this PhoneDevice.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this PhoneDevice.
        Addtional params column with no specific meaning

        :param params: The params of this PhoneDevice.
        :type: str
        """
        self._params = params

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

