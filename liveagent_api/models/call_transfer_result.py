# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CallTransferResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CallTransferResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'callee_status': 'str',
            'to_number': 'str',
            'via_number': 'str'
        }

        self.attribute_map = {
            'callee_status': 'callee_status',
            'to_number': 'to_number',
            'via_number': 'via_number'
        }

        self._callee_status = None
        self._to_number = None
        self._via_number = None

    @property
    def callee_status(self):
        """
        Gets the callee_status of this CallTransferResult.
        O - online, F - offline

        :return: The callee_status of this CallTransferResult.
        :rtype: str
        """
        return self._callee_status

    @callee_status.setter
    def callee_status(self, callee_status):
        """
        Sets the callee_status of this CallTransferResult.
        O - online, F - offline

        :param callee_status: The callee_status of this CallTransferResult.
        :type: str
        """
        allowed_values = ["O", "F"]
        if callee_status not in allowed_values:
            raise ValueError(
                "Invalid value for `callee_status`, must be one of {0}"
                .format(allowed_values)
            )
        self._callee_status = callee_status

    @property
    def to_number(self):
        """
        Gets the to_number of this CallTransferResult.
        Callee number

        :return: The to_number of this CallTransferResult.
        :rtype: str
        """
        return self._to_number

    @to_number.setter
    def to_number(self, to_number):
        """
        Sets the to_number of this CallTransferResult.
        Callee number

        :param to_number: The to_number of this CallTransferResult.
        :type: str
        """
        self._to_number = to_number

    @property
    def via_number(self):
        """
        Gets the via_number of this CallTransferResult.
        trunk number via which call was made / received (if applicable)

        :return: The via_number of this CallTransferResult.
        :rtype: str
        """
        return self._via_number

    @via_number.setter
    def via_number(self, via_number):
        """
        Sets the via_number of this CallTransferResult.
        trunk number via which call was made / received (if applicable)

        :param via_number: The via_number of this CallTransferResult.
        :type: str
        """
        self._via_number = via_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

