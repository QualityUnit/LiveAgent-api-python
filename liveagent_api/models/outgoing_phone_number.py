# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OutgoingPhoneNumber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OutgoingPhoneNumber - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'phone': 'str',
            'name': 'str',
            'avatar_url': 'str',
            'country_code': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'phone': 'phone',
            'name': 'name',
            'avatar_url': 'avatar_url',
            'country_code': 'country_code',
            'type': 'type'
        }

        self._phone = None
        self._name = None
        self._avatar_url = None
        self._country_code = None
        self._type = None

    @property
    def phone(self):
        """
        Gets the phone of this OutgoingPhoneNumber.


        :return: The phone of this OutgoingPhoneNumber.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this OutgoingPhoneNumber.


        :param phone: The phone of this OutgoingPhoneNumber.
        :type: str
        """
        self._phone = phone

    @property
    def name(self):
        """
        Gets the name of this OutgoingPhoneNumber.


        :return: The name of this OutgoingPhoneNumber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OutgoingPhoneNumber.


        :param name: The name of this OutgoingPhoneNumber.
        :type: str
        """
        self._name = name

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this OutgoingPhoneNumber.


        :return: The avatar_url of this OutgoingPhoneNumber.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this OutgoingPhoneNumber.


        :param avatar_url: The avatar_url of this OutgoingPhoneNumber.
        :type: str
        """
        self._avatar_url = avatar_url

    @property
    def country_code(self):
        """
        Gets the country_code of this OutgoingPhoneNumber.


        :return: The country_code of this OutgoingPhoneNumber.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this OutgoingPhoneNumber.


        :param country_code: The country_code of this OutgoingPhoneNumber.
        :type: str
        """
        self._country_code = country_code

    @property
    def type(self):
        """
        Gets the type of this OutgoingPhoneNumber.


        :return: The type of this OutgoingPhoneNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this OutgoingPhoneNumber.


        :param type: The type of this OutgoingPhoneNumber.
        :type: str
        """
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

