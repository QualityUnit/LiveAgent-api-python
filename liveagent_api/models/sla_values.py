# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SlaValues(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SlaValues - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_answer': 'int',
            'first_assign': 'int',
            'first_resolve': 'int',
            'next_answer': 'int',
            'chat_answer': 'int',
            'call_answer': 'int'
        }

        self.attribute_map = {
            'first_answer': 'first_answer',
            'first_assign': 'first_assign',
            'first_resolve': 'first_resolve',
            'next_answer': 'next_answer',
            'chat_answer': 'chat_answer',
            'call_answer': 'call_answer'
        }

        self._first_answer = None
        self._first_assign = None
        self._first_resolve = None
        self._next_answer = None
        self._chat_answer = None
        self._call_answer = None

    @property
    def first_answer(self):
        """
        Gets the first_answer of this SlaValues.


        :return: The first_answer of this SlaValues.
        :rtype: int
        """
        return self._first_answer

    @first_answer.setter
    def first_answer(self, first_answer):
        """
        Sets the first_answer of this SlaValues.


        :param first_answer: The first_answer of this SlaValues.
        :type: int
        """
        self._first_answer = first_answer

    @property
    def first_assign(self):
        """
        Gets the first_assign of this SlaValues.


        :return: The first_assign of this SlaValues.
        :rtype: int
        """
        return self._first_assign

    @first_assign.setter
    def first_assign(self, first_assign):
        """
        Sets the first_assign of this SlaValues.


        :param first_assign: The first_assign of this SlaValues.
        :type: int
        """
        self._first_assign = first_assign

    @property
    def first_resolve(self):
        """
        Gets the first_resolve of this SlaValues.


        :return: The first_resolve of this SlaValues.
        :rtype: int
        """
        return self._first_resolve

    @first_resolve.setter
    def first_resolve(self, first_resolve):
        """
        Sets the first_resolve of this SlaValues.


        :param first_resolve: The first_resolve of this SlaValues.
        :type: int
        """
        self._first_resolve = first_resolve

    @property
    def next_answer(self):
        """
        Gets the next_answer of this SlaValues.


        :return: The next_answer of this SlaValues.
        :rtype: int
        """
        return self._next_answer

    @next_answer.setter
    def next_answer(self, next_answer):
        """
        Sets the next_answer of this SlaValues.


        :param next_answer: The next_answer of this SlaValues.
        :type: int
        """
        self._next_answer = next_answer

    @property
    def chat_answer(self):
        """
        Gets the chat_answer of this SlaValues.


        :return: The chat_answer of this SlaValues.
        :rtype: int
        """
        return self._chat_answer

    @chat_answer.setter
    def chat_answer(self, chat_answer):
        """
        Sets the chat_answer of this SlaValues.


        :param chat_answer: The chat_answer of this SlaValues.
        :type: int
        """
        self._chat_answer = chat_answer

    @property
    def call_answer(self):
        """
        Gets the call_answer of this SlaValues.


        :return: The call_answer of this SlaValues.
        :rtype: int
        """
        return self._call_answer

    @call_answer.setter
    def call_answer(self, call_answer):
        """
        Sets the call_answer of this SlaValues.


        :param call_answer: The call_answer of this SlaValues.
        :type: int
        """
        self._call_answer = call_answer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

