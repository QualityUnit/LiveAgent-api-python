# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TicketUpdatable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TicketUpdatable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner_contactid': 'str',
            'departmentid': 'str',
            'agentid': 'str',
            'status': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'owner_contactid': 'owner_contactid',
            'departmentid': 'departmentid',
            'agentid': 'agentid',
            'status': 'status',
            'tags': 'tags'
        }

        self._owner_contactid = None
        self._departmentid = None
        self._agentid = None
        self._status = None
        self._tags = None

    @property
    def owner_contactid(self):
        """
        Gets the owner_contactid of this TicketUpdatable.


        :return: The owner_contactid of this TicketUpdatable.
        :rtype: str
        """
        return self._owner_contactid

    @owner_contactid.setter
    def owner_contactid(self, owner_contactid):
        """
        Sets the owner_contactid of this TicketUpdatable.


        :param owner_contactid: The owner_contactid of this TicketUpdatable.
        :type: str
        """
        self._owner_contactid = owner_contactid

    @property
    def departmentid(self):
        """
        Gets the departmentid of this TicketUpdatable.


        :return: The departmentid of this TicketUpdatable.
        :rtype: str
        """
        return self._departmentid

    @departmentid.setter
    def departmentid(self, departmentid):
        """
        Sets the departmentid of this TicketUpdatable.


        :param departmentid: The departmentid of this TicketUpdatable.
        :type: str
        """
        self._departmentid = departmentid

    @property
    def agentid(self):
        """
        Gets the agentid of this TicketUpdatable.


        :return: The agentid of this TicketUpdatable.
        :rtype: str
        """
        return self._agentid

    @agentid.setter
    def agentid(self, agentid):
        """
        Sets the agentid of this TicketUpdatable.


        :param agentid: The agentid of this TicketUpdatable.
        :type: str
        """
        self._agentid = agentid

    @property
    def status(self):
        """
        Gets the status of this TicketUpdatable.
        <br> I - init<br> N - new<br> T - chatting<br> P - calling<br> R - resolved<br> X - deleted<br> B - spam<br> A - answered<br> C - open<br> W - postponed

        :return: The status of this TicketUpdatable.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TicketUpdatable.
        <br> I - init<br> N - new<br> T - chatting<br> P - calling<br> R - resolved<br> X - deleted<br> B - spam<br> A - answered<br> C - open<br> W - postponed

        :param status: The status of this TicketUpdatable.
        :type: str
        """
        allowed_values = ["I", "N", "T", "P", "R", "X", "B", "A", "C", "W"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def tags(self):
        """
        Gets the tags of this TicketUpdatable.


        :return: The tags of this TicketUpdatable.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this TicketUpdatable.


        :param tags: The tags of this TicketUpdatable.
        :type: list[str]
        """
        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

