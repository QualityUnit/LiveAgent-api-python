# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'agent_id': 'str',
        'phone_id': 'str',
        'api_phone_id': 'str',
        'type': 'str',
        'service_type': 'str',
        'online_status': 'str',
        'preset_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'agent_id': 'agent_id',
        'phone_id': 'phone_id',
        'api_phone_id': 'api_phone_id',
        'type': 'type',
        'service_type': 'service_type',
        'online_status': 'online_status',
        'preset_status': 'preset_status'
    }

    def __init__(self, id=None, agent_id=None, phone_id=None, api_phone_id=None, type=None, service_type=None, online_status=None, preset_status=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._agent_id = None
        self._phone_id = None
        self._api_phone_id = None
        self._type = None
        self._service_type = None
        self._online_status = None
        self._preset_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if agent_id is not None:
            self.agent_id = agent_id
        if phone_id is not None:
            self.phone_id = phone_id
        if api_phone_id is not None:
            self.api_phone_id = api_phone_id
        if type is not None:
            self.type = type
        if service_type is not None:
            self.service_type = service_type
        if online_status is not None:
            self.online_status = online_status
        if preset_status is not None:
            self.preset_status = preset_status

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def agent_id(self):
        """Gets the agent_id of this Device.  # noqa: E501


        :return: The agent_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this Device.


        :param agent_id: The agent_id of this Device.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def phone_id(self):
        """Gets the phone_id of this Device.  # noqa: E501


        :return: The phone_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._phone_id

    @phone_id.setter
    def phone_id(self, phone_id):
        """Sets the phone_id of this Device.


        :param phone_id: The phone_id of this Device.  # noqa: E501
        :type: str
        """

        self._phone_id = phone_id

    @property
    def api_phone_id(self):
        """Gets the api_phone_id of this Device.  # noqa: E501


        :return: The api_phone_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._api_phone_id

    @api_phone_id.setter
    def api_phone_id(self, api_phone_id):
        """Sets the api_phone_id of this Device.


        :param api_phone_id: The api_phone_id of this Device.  # noqa: E501
        :type: str
        """

        self._api_phone_id = api_phone_id

    @property
    def type(self):
        """Gets the type of this Device.  # noqa: E501


        :return: The type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.


        :param type: The type of this Device.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def service_type(self):
        """Gets the service_type of this Device.  # noqa: E501


        :return: The service_type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this Device.


        :param service_type: The service_type of this Device.  # noqa: E501
        :type: str
        """

        self._service_type = service_type

    @property
    def online_status(self):
        """Gets the online_status of this Device.  # noqa: E501


        :return: The online_status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this Device.


        :param online_status: The online_status of this Device.  # noqa: E501
        :type: str
        """

        self._online_status = online_status

    @property
    def preset_status(self):
        """Gets the preset_status of this Device.  # noqa: E501


        :return: The preset_status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._preset_status

    @preset_status.setter
    def preset_status(self, preset_status):
        """Sets the preset_status of this Device.


        :param preset_status: The preset_status of this Device.  # noqa: E501
        :type: str
        """

        self._preset_status = preset_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
