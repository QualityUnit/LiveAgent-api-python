# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiKeyWithPrivileges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'key': 'str',
        'valid_to_date': 'str',
        'role': 'str',
        'name': 'str',
        'type': 'str',
        'installid': 'str',
        'userid': 'str',
        'whitelist': 'str',
        'privileges': 'list[ApiPrivilege]'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'valid_to_date': 'valid_to_date',
        'role': 'role',
        'name': 'name',
        'type': 'type',
        'installid': 'installid',
        'userid': 'userid',
        'whitelist': 'whitelist',
        'privileges': 'privileges'
    }

    def __init__(self, id=None, key=None, valid_to_date=None, role=None, name=None, type=None, installid=None, userid=None, whitelist=None, privileges=None):  # noqa: E501
        """ApiKeyWithPrivileges - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._key = None
        self._valid_to_date = None
        self._role = None
        self._name = None
        self._type = None
        self._installid = None
        self._userid = None
        self._whitelist = None
        self._privileges = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if valid_to_date is not None:
            self.valid_to_date = valid_to_date
        if role is not None:
            self.role = role
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if installid is not None:
            self.installid = installid
        if userid is not None:
            self.userid = userid
        if whitelist is not None:
            self.whitelist = whitelist
        if privileges is not None:
            self.privileges = privileges

    @property
    def id(self):
        """Gets the id of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The id of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKeyWithPrivileges.


        :param id: The id of this ApiKeyWithPrivileges.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The key of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiKeyWithPrivileges.


        :param key: The key of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def valid_to_date(self):
        """Gets the valid_to_date of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The valid_to_date of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._valid_to_date

    @valid_to_date.setter
    def valid_to_date(self, valid_to_date):
        """Sets the valid_to_date of this ApiKeyWithPrivileges.


        :param valid_to_date: The valid_to_date of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._valid_to_date = valid_to_date

    @property
    def role(self):
        """Gets the role of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The role of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ApiKeyWithPrivileges.


        :param role: The role of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def name(self):
        """Gets the name of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The name of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyWithPrivileges.


        :param name: The name of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ApiKeyWithPrivileges.  # noqa: E501

        - A - API - C - Chat - P - Phone - T - Ticket - W - Web (Agent Panel)  # noqa: E501

        :return: The type of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiKeyWithPrivileges.

        - A - API - C - Chat - P - Phone - T - Ticket - W - Web (Agent Panel)  # noqa: E501

        :param type: The type of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "C", "P", "T", "W"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def installid(self):
        """Gets the installid of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The installid of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._installid

    @installid.setter
    def installid(self, installid):
        """Sets the installid of this ApiKeyWithPrivileges.


        :param installid: The installid of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._installid = installid

    @property
    def userid(self):
        """Gets the userid of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The userid of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this ApiKeyWithPrivileges.


        :param userid: The userid of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def whitelist(self):
        """Gets the whitelist of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The whitelist of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: str
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """Sets the whitelist of this ApiKeyWithPrivileges.


        :param whitelist: The whitelist of this ApiKeyWithPrivileges.  # noqa: E501
        :type: str
        """

        self._whitelist = whitelist

    @property
    def privileges(self):
        """Gets the privileges of this ApiKeyWithPrivileges.  # noqa: E501


        :return: The privileges of this ApiKeyWithPrivileges.  # noqa: E501
        :rtype: list[ApiPrivilege]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this ApiKeyWithPrivileges.


        :param privileges: The privileges of this ApiKeyWithPrivileges.  # noqa: E501
        :type: list[ApiPrivilege]
        """

        self._privileges = privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiKeyWithPrivileges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyWithPrivileges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
