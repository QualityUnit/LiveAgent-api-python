# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContactListItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContactListItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'company_id': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'system_name': 'str',
            'description': 'str',
            'avatar_url': 'str',
            'type': 'str',
            'gender': 'str',
            'date_created': 'datetime',
            'language': 'str',
            'city': 'str',
            'countrycode': 'str',
            'ip': 'str',
            'emails': 'list[str]',
            'phones': 'list[str]',
            'groups': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'company_id': 'company_id',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'system_name': 'system_name',
            'description': 'description',
            'avatar_url': 'avatar_url',
            'type': 'type',
            'gender': 'gender',
            'date_created': 'date_created',
            'language': 'language',
            'city': 'city',
            'countrycode': 'countrycode',
            'ip': 'ip',
            'emails': 'emails',
            'phones': 'phones',
            'groups': 'groups'
        }

        self._id = None
        self._company_id = None
        self._firstname = None
        self._lastname = None
        self._system_name = None
        self._description = None
        self._avatar_url = None
        self._type = 'V'
        self._gender = None
        self._date_created = None
        self._language = None
        self._city = None
        self._countrycode = None
        self._ip = None
        self._emails = None
        self._phones = None
        self._groups = None

    @property
    def id(self):
        """
        Gets the id of this ContactListItem.


        :return: The id of this ContactListItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContactListItem.


        :param id: The id of this ContactListItem.
        :type: str
        """
        self._id = id

    @property
    def company_id(self):
        """
        Gets the company_id of this ContactListItem.


        :return: The company_id of this ContactListItem.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this ContactListItem.


        :param company_id: The company_id of this ContactListItem.
        :type: str
        """
        self._company_id = company_id

    @property
    def firstname(self):
        """
        Gets the firstname of this ContactListItem.


        :return: The firstname of this ContactListItem.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this ContactListItem.


        :param firstname: The firstname of this ContactListItem.
        :type: str
        """
        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this ContactListItem.


        :return: The lastname of this ContactListItem.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this ContactListItem.


        :param lastname: The lastname of this ContactListItem.
        :type: str
        """
        self._lastname = lastname

    @property
    def system_name(self):
        """
        Gets the system_name of this ContactListItem.


        :return: The system_name of this ContactListItem.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """
        Sets the system_name of this ContactListItem.


        :param system_name: The system_name of this ContactListItem.
        :type: str
        """
        self._system_name = system_name

    @property
    def description(self):
        """
        Gets the description of this ContactListItem.


        :return: The description of this ContactListItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ContactListItem.


        :param description: The description of this ContactListItem.
        :type: str
        """
        self._description = description

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this ContactListItem.


        :return: The avatar_url of this ContactListItem.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this ContactListItem.


        :param avatar_url: The avatar_url of this ContactListItem.
        :type: str
        """
        self._avatar_url = avatar_url

    @property
    def type(self):
        """
        Gets the type of this ContactListItem.
        V - visitor, R - registered visitor, A - agent

        :return: The type of this ContactListItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ContactListItem.
        V - visitor, R - registered visitor, A - agent

        :param type: The type of this ContactListItem.
        :type: str
        """
        allowed_values = ["V", "R", "A"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def gender(self):
        """
        Gets the gender of this ContactListItem.
        M - Male, F - Female

        :return: The gender of this ContactListItem.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this ContactListItem.
        M - Male, F - Female

        :param gender: The gender of this ContactListItem.
        :type: str
        """
        self._gender = gender

    @property
    def date_created(self):
        """
        Gets the date_created of this ContactListItem.


        :return: The date_created of this ContactListItem.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this ContactListItem.


        :param date_created: The date_created of this ContactListItem.
        :type: datetime
        """
        self._date_created = date_created

    @property
    def language(self):
        """
        Gets the language of this ContactListItem.


        :return: The language of this ContactListItem.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this ContactListItem.


        :param language: The language of this ContactListItem.
        :type: str
        """
        self._language = language

    @property
    def city(self):
        """
        Gets the city of this ContactListItem.


        :return: The city of this ContactListItem.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this ContactListItem.


        :param city: The city of this ContactListItem.
        :type: str
        """
        self._city = city

    @property
    def countrycode(self):
        """
        Gets the countrycode of this ContactListItem.


        :return: The countrycode of this ContactListItem.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """
        Sets the countrycode of this ContactListItem.


        :param countrycode: The countrycode of this ContactListItem.
        :type: str
        """
        self._countrycode = countrycode

    @property
    def ip(self):
        """
        Gets the ip of this ContactListItem.


        :return: The ip of this ContactListItem.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this ContactListItem.


        :param ip: The ip of this ContactListItem.
        :type: str
        """
        self._ip = ip

    @property
    def emails(self):
        """
        Gets the emails of this ContactListItem.


        :return: The emails of this ContactListItem.
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """
        Sets the emails of this ContactListItem.


        :param emails: The emails of this ContactListItem.
        :type: list[str]
        """
        self._emails = emails

    @property
    def phones(self):
        """
        Gets the phones of this ContactListItem.


        :return: The phones of this ContactListItem.
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """
        Sets the phones of this ContactListItem.


        :param phones: The phones of this ContactListItem.
        :type: list[str]
        """
        self._phones = phones

    @property
    def groups(self):
        """
        Gets the groups of this ContactListItem.


        :return: The groups of this ContactListItem.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this ContactListItem.


        :param groups: The groups of this ContactListItem.
        :type: list[str]
        """
        self._groups = groups

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

