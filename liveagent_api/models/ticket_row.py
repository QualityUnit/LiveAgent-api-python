# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TicketRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversationid': 'str',
        'code': 'str',
        'datecreated': 'datetime',
        'datechanged': 'datetime',
        'dateresolved': 'datetime',
        'statuschanged': 'datetime',
        'rorder': 'float',
        'datedue': 'datetime',
        'datereopen': 'datetime',
        'status': 'str',
        'channel_type': 'str',
        'departmentid': 'str',
        'agentid': 'str',
        'preview': 'str',
        'subject': 'str',
        'departmentname': 'str',
        'agentname': 'str',
        'tags': 'list[str]',
        'messagegroups_in': 'float',
        'messagegroups_out': 'float',
        'contactid': 'str',
        'parent_contactid': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'system_name': 'str',
        'emails': 'list[str]',
        'phones': 'list[str]',
        'job_position': 'str',
        'contact_type': 'str',
        'city': 'str',
        'countrycode': 'str',
        'time_offset': 'float',
        'gender': 'str',
        'levelid': 'str',
        'groups': 'list[str]',
        'contact_status': 'str',
        'company': 'str',
        'avatar_url': 'str',
        'userid': 'str',
        'roleid': 'str',
        'role_name': 'str',
        'roletype': 'str',
        'userstatus': 'str',
        'accountuserstatus': 'str',
        'description': 'str',
        'note': 'str',
        'tagnames': 'list[str]',
        'groupnames': 'list[str]'
    }

    attribute_map = {
        'conversationid': 'conversationid',
        'code': 'code',
        'datecreated': 'datecreated',
        'datechanged': 'datechanged',
        'dateresolved': 'dateresolved',
        'statuschanged': 'statuschanged',
        'rorder': 'rorder',
        'datedue': 'datedue',
        'datereopen': 'datereopen',
        'status': 'status',
        'channel_type': 'channel_type',
        'departmentid': 'departmentid',
        'agentid': 'agentid',
        'preview': 'preview',
        'subject': 'subject',
        'departmentname': 'departmentname',
        'agentname': 'agentname',
        'tags': 'tags',
        'messagegroups_in': 'messagegroups_in',
        'messagegroups_out': 'messagegroups_out',
        'contactid': 'contactid',
        'parent_contactid': 'parent_contactid',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'system_name': 'system_name',
        'emails': 'emails',
        'phones': 'phones',
        'job_position': 'job_position',
        'contact_type': 'contact_type',
        'city': 'city',
        'countrycode': 'countrycode',
        'time_offset': 'time_offset',
        'gender': 'gender',
        'levelid': 'levelid',
        'groups': 'groups',
        'contact_status': 'contact_status',
        'company': 'company',
        'avatar_url': 'avatar_url',
        'userid': 'userid',
        'roleid': 'roleid',
        'role_name': 'roleName',
        'roletype': 'roletype',
        'userstatus': 'userstatus',
        'accountuserstatus': 'accountuserstatus',
        'description': 'description',
        'note': 'note',
        'tagnames': 'tagnames',
        'groupnames': 'groupnames'
    }

    def __init__(self, conversationid=None, code=None, datecreated=None, datechanged=None, dateresolved=None, statuschanged=None, rorder=None, datedue=None, datereopen=None, status=None, channel_type=None, departmentid=None, agentid=None, preview=None, subject=None, departmentname=None, agentname=None, tags=None, messagegroups_in=None, messagegroups_out=None, contactid=None, parent_contactid=None, firstname=None, lastname=None, system_name=None, emails=None, phones=None, job_position=None, contact_type=None, city=None, countrycode=None, time_offset=None, gender=None, levelid=None, groups=None, contact_status=None, company=None, avatar_url=None, userid=None, roleid=None, role_name=None, roletype=None, userstatus=None, accountuserstatus=None, description=None, note=None, tagnames=None, groupnames=None):  # noqa: E501
        """TicketRow - a model defined in Swagger"""  # noqa: E501

        self._conversationid = None
        self._code = None
        self._datecreated = None
        self._datechanged = None
        self._dateresolved = None
        self._statuschanged = None
        self._rorder = None
        self._datedue = None
        self._datereopen = None
        self._status = None
        self._channel_type = None
        self._departmentid = None
        self._agentid = None
        self._preview = None
        self._subject = None
        self._departmentname = None
        self._agentname = None
        self._tags = None
        self._messagegroups_in = None
        self._messagegroups_out = None
        self._contactid = None
        self._parent_contactid = None
        self._firstname = None
        self._lastname = None
        self._system_name = None
        self._emails = None
        self._phones = None
        self._job_position = None
        self._contact_type = None
        self._city = None
        self._countrycode = None
        self._time_offset = None
        self._gender = None
        self._levelid = None
        self._groups = None
        self._contact_status = None
        self._company = None
        self._avatar_url = None
        self._userid = None
        self._roleid = None
        self._role_name = None
        self._roletype = None
        self._userstatus = None
        self._accountuserstatus = None
        self._description = None
        self._note = None
        self._tagnames = None
        self._groupnames = None
        self.discriminator = None

        if conversationid is not None:
            self.conversationid = conversationid
        if code is not None:
            self.code = code
        if datecreated is not None:
            self.datecreated = datecreated
        if datechanged is not None:
            self.datechanged = datechanged
        if dateresolved is not None:
            self.dateresolved = dateresolved
        if statuschanged is not None:
            self.statuschanged = statuschanged
        if rorder is not None:
            self.rorder = rorder
        if datedue is not None:
            self.datedue = datedue
        if datereopen is not None:
            self.datereopen = datereopen
        if status is not None:
            self.status = status
        if channel_type is not None:
            self.channel_type = channel_type
        if departmentid is not None:
            self.departmentid = departmentid
        if agentid is not None:
            self.agentid = agentid
        if preview is not None:
            self.preview = preview
        if subject is not None:
            self.subject = subject
        if departmentname is not None:
            self.departmentname = departmentname
        if agentname is not None:
            self.agentname = agentname
        if tags is not None:
            self.tags = tags
        if messagegroups_in is not None:
            self.messagegroups_in = messagegroups_in
        if messagegroups_out is not None:
            self.messagegroups_out = messagegroups_out
        if contactid is not None:
            self.contactid = contactid
        if parent_contactid is not None:
            self.parent_contactid = parent_contactid
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if system_name is not None:
            self.system_name = system_name
        if emails is not None:
            self.emails = emails
        if phones is not None:
            self.phones = phones
        if job_position is not None:
            self.job_position = job_position
        if contact_type is not None:
            self.contact_type = contact_type
        if city is not None:
            self.city = city
        if countrycode is not None:
            self.countrycode = countrycode
        if time_offset is not None:
            self.time_offset = time_offset
        if gender is not None:
            self.gender = gender
        if levelid is not None:
            self.levelid = levelid
        if groups is not None:
            self.groups = groups
        if contact_status is not None:
            self.contact_status = contact_status
        if company is not None:
            self.company = company
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if userid is not None:
            self.userid = userid
        if roleid is not None:
            self.roleid = roleid
        if role_name is not None:
            self.role_name = role_name
        if roletype is not None:
            self.roletype = roletype
        if userstatus is not None:
            self.userstatus = userstatus
        if accountuserstatus is not None:
            self.accountuserstatus = accountuserstatus
        if description is not None:
            self.description = description
        if note is not None:
            self.note = note
        if tagnames is not None:
            self.tagnames = tagnames
        if groupnames is not None:
            self.groupnames = groupnames

    @property
    def conversationid(self):
        """Gets the conversationid of this TicketRow.  # noqa: E501


        :return: The conversationid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._conversationid

    @conversationid.setter
    def conversationid(self, conversationid):
        """Sets the conversationid of this TicketRow.


        :param conversationid: The conversationid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._conversationid = conversationid

    @property
    def code(self):
        """Gets the code of this TicketRow.  # noqa: E501


        :return: The code of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TicketRow.


        :param code: The code of this TicketRow.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def datecreated(self):
        """Gets the datecreated of this TicketRow.  # noqa: E501


        :return: The datecreated of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._datecreated

    @datecreated.setter
    def datecreated(self, datecreated):
        """Sets the datecreated of this TicketRow.


        :param datecreated: The datecreated of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._datecreated = datecreated

    @property
    def datechanged(self):
        """Gets the datechanged of this TicketRow.  # noqa: E501


        :return: The datechanged of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._datechanged

    @datechanged.setter
    def datechanged(self, datechanged):
        """Sets the datechanged of this TicketRow.


        :param datechanged: The datechanged of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._datechanged = datechanged

    @property
    def dateresolved(self):
        """Gets the dateresolved of this TicketRow.  # noqa: E501


        :return: The dateresolved of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._dateresolved

    @dateresolved.setter
    def dateresolved(self, dateresolved):
        """Sets the dateresolved of this TicketRow.


        :param dateresolved: The dateresolved of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._dateresolved = dateresolved

    @property
    def statuschanged(self):
        """Gets the statuschanged of this TicketRow.  # noqa: E501


        :return: The statuschanged of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._statuschanged

    @statuschanged.setter
    def statuschanged(self, statuschanged):
        """Sets the statuschanged of this TicketRow.


        :param statuschanged: The statuschanged of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._statuschanged = statuschanged

    @property
    def rorder(self):
        """Gets the rorder of this TicketRow.  # noqa: E501


        :return: The rorder of this TicketRow.  # noqa: E501
        :rtype: float
        """
        return self._rorder

    @rorder.setter
    def rorder(self, rorder):
        """Sets the rorder of this TicketRow.


        :param rorder: The rorder of this TicketRow.  # noqa: E501
        :type: float
        """

        self._rorder = rorder

    @property
    def datedue(self):
        """Gets the datedue of this TicketRow.  # noqa: E501


        :return: The datedue of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._datedue

    @datedue.setter
    def datedue(self, datedue):
        """Sets the datedue of this TicketRow.


        :param datedue: The datedue of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._datedue = datedue

    @property
    def datereopen(self):
        """Gets the datereopen of this TicketRow.  # noqa: E501


        :return: The datereopen of this TicketRow.  # noqa: E501
        :rtype: datetime
        """
        return self._datereopen

    @datereopen.setter
    def datereopen(self, datereopen):
        """Sets the datereopen of this TicketRow.


        :param datereopen: The datereopen of this TicketRow.  # noqa: E501
        :type: datetime
        """

        self._datereopen = datereopen

    @property
    def status(self):
        """Gets the status of this TicketRow.  # noqa: E501


        :return: The status of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TicketRow.


        :param status: The status of this TicketRow.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def channel_type(self):
        """Gets the channel_type of this TicketRow.  # noqa: E501


        :return: The channel_type of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this TicketRow.


        :param channel_type: The channel_type of this TicketRow.  # noqa: E501
        :type: str
        """

        self._channel_type = channel_type

    @property
    def departmentid(self):
        """Gets the departmentid of this TicketRow.  # noqa: E501


        :return: The departmentid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._departmentid

    @departmentid.setter
    def departmentid(self, departmentid):
        """Sets the departmentid of this TicketRow.


        :param departmentid: The departmentid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._departmentid = departmentid

    @property
    def agentid(self):
        """Gets the agentid of this TicketRow.  # noqa: E501


        :return: The agentid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._agentid

    @agentid.setter
    def agentid(self, agentid):
        """Sets the agentid of this TicketRow.


        :param agentid: The agentid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._agentid = agentid

    @property
    def preview(self):
        """Gets the preview of this TicketRow.  # noqa: E501


        :return: The preview of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this TicketRow.


        :param preview: The preview of this TicketRow.  # noqa: E501
        :type: str
        """

        self._preview = preview

    @property
    def subject(self):
        """Gets the subject of this TicketRow.  # noqa: E501


        :return: The subject of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TicketRow.


        :param subject: The subject of this TicketRow.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def departmentname(self):
        """Gets the departmentname of this TicketRow.  # noqa: E501


        :return: The departmentname of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._departmentname

    @departmentname.setter
    def departmentname(self, departmentname):
        """Sets the departmentname of this TicketRow.


        :param departmentname: The departmentname of this TicketRow.  # noqa: E501
        :type: str
        """

        self._departmentname = departmentname

    @property
    def agentname(self):
        """Gets the agentname of this TicketRow.  # noqa: E501


        :return: The agentname of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._agentname

    @agentname.setter
    def agentname(self, agentname):
        """Sets the agentname of this TicketRow.


        :param agentname: The agentname of this TicketRow.  # noqa: E501
        :type: str
        """

        self._agentname = agentname

    @property
    def tags(self):
        """Gets the tags of this TicketRow.  # noqa: E501


        :return: The tags of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TicketRow.


        :param tags: The tags of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def messagegroups_in(self):
        """Gets the messagegroups_in of this TicketRow.  # noqa: E501


        :return: The messagegroups_in of this TicketRow.  # noqa: E501
        :rtype: float
        """
        return self._messagegroups_in

    @messagegroups_in.setter
    def messagegroups_in(self, messagegroups_in):
        """Sets the messagegroups_in of this TicketRow.


        :param messagegroups_in: The messagegroups_in of this TicketRow.  # noqa: E501
        :type: float
        """

        self._messagegroups_in = messagegroups_in

    @property
    def messagegroups_out(self):
        """Gets the messagegroups_out of this TicketRow.  # noqa: E501


        :return: The messagegroups_out of this TicketRow.  # noqa: E501
        :rtype: float
        """
        return self._messagegroups_out

    @messagegroups_out.setter
    def messagegroups_out(self, messagegroups_out):
        """Sets the messagegroups_out of this TicketRow.


        :param messagegroups_out: The messagegroups_out of this TicketRow.  # noqa: E501
        :type: float
        """

        self._messagegroups_out = messagegroups_out

    @property
    def contactid(self):
        """Gets the contactid of this TicketRow.  # noqa: E501


        :return: The contactid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._contactid

    @contactid.setter
    def contactid(self, contactid):
        """Sets the contactid of this TicketRow.


        :param contactid: The contactid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._contactid = contactid

    @property
    def parent_contactid(self):
        """Gets the parent_contactid of this TicketRow.  # noqa: E501


        :return: The parent_contactid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._parent_contactid

    @parent_contactid.setter
    def parent_contactid(self, parent_contactid):
        """Sets the parent_contactid of this TicketRow.


        :param parent_contactid: The parent_contactid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._parent_contactid = parent_contactid

    @property
    def firstname(self):
        """Gets the firstname of this TicketRow.  # noqa: E501


        :return: The firstname of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this TicketRow.


        :param firstname: The firstname of this TicketRow.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this TicketRow.  # noqa: E501


        :return: The lastname of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this TicketRow.


        :param lastname: The lastname of this TicketRow.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def system_name(self):
        """Gets the system_name of this TicketRow.  # noqa: E501


        :return: The system_name of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this TicketRow.


        :param system_name: The system_name of this TicketRow.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def emails(self):
        """Gets the emails of this TicketRow.  # noqa: E501


        :return: The emails of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this TicketRow.


        :param emails: The emails of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def phones(self):
        """Gets the phones of this TicketRow.  # noqa: E501


        :return: The phones of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this TicketRow.


        :param phones: The phones of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._phones = phones

    @property
    def job_position(self):
        """Gets the job_position of this TicketRow.  # noqa: E501


        :return: The job_position of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._job_position

    @job_position.setter
    def job_position(self, job_position):
        """Sets the job_position of this TicketRow.


        :param job_position: The job_position of this TicketRow.  # noqa: E501
        :type: str
        """

        self._job_position = job_position

    @property
    def contact_type(self):
        """Gets the contact_type of this TicketRow.  # noqa: E501


        :return: The contact_type of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this TicketRow.


        :param contact_type: The contact_type of this TicketRow.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def city(self):
        """Gets the city of this TicketRow.  # noqa: E501


        :return: The city of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TicketRow.


        :param city: The city of this TicketRow.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def countrycode(self):
        """Gets the countrycode of this TicketRow.  # noqa: E501


        :return: The countrycode of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this TicketRow.


        :param countrycode: The countrycode of this TicketRow.  # noqa: E501
        :type: str
        """

        self._countrycode = countrycode

    @property
    def time_offset(self):
        """Gets the time_offset of this TicketRow.  # noqa: E501


        :return: The time_offset of this TicketRow.  # noqa: E501
        :rtype: float
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this TicketRow.


        :param time_offset: The time_offset of this TicketRow.  # noqa: E501
        :type: float
        """

        self._time_offset = time_offset

    @property
    def gender(self):
        """Gets the gender of this TicketRow.  # noqa: E501


        :return: The gender of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this TicketRow.


        :param gender: The gender of this TicketRow.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def levelid(self):
        """Gets the levelid of this TicketRow.  # noqa: E501


        :return: The levelid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._levelid

    @levelid.setter
    def levelid(self, levelid):
        """Sets the levelid of this TicketRow.


        :param levelid: The levelid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._levelid = levelid

    @property
    def groups(self):
        """Gets the groups of this TicketRow.  # noqa: E501


        :return: The groups of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this TicketRow.


        :param groups: The groups of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def contact_status(self):
        """Gets the contact_status of this TicketRow.  # noqa: E501


        :return: The contact_status of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._contact_status

    @contact_status.setter
    def contact_status(self, contact_status):
        """Sets the contact_status of this TicketRow.


        :param contact_status: The contact_status of this TicketRow.  # noqa: E501
        :type: str
        """

        self._contact_status = contact_status

    @property
    def company(self):
        """Gets the company of this TicketRow.  # noqa: E501


        :return: The company of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this TicketRow.


        :param company: The company of this TicketRow.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def avatar_url(self):
        """Gets the avatar_url of this TicketRow.  # noqa: E501


        :return: The avatar_url of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this TicketRow.


        :param avatar_url: The avatar_url of this TicketRow.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def userid(self):
        """Gets the userid of this TicketRow.  # noqa: E501


        :return: The userid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this TicketRow.


        :param userid: The userid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def roleid(self):
        """Gets the roleid of this TicketRow.  # noqa: E501


        :return: The roleid of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._roleid

    @roleid.setter
    def roleid(self, roleid):
        """Sets the roleid of this TicketRow.


        :param roleid: The roleid of this TicketRow.  # noqa: E501
        :type: str
        """

        self._roleid = roleid

    @property
    def role_name(self):
        """Gets the role_name of this TicketRow.  # noqa: E501


        :return: The role_name of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this TicketRow.


        :param role_name: The role_name of this TicketRow.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def roletype(self):
        """Gets the roletype of this TicketRow.  # noqa: E501


        :return: The roletype of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._roletype

    @roletype.setter
    def roletype(self, roletype):
        """Sets the roletype of this TicketRow.


        :param roletype: The roletype of this TicketRow.  # noqa: E501
        :type: str
        """

        self._roletype = roletype

    @property
    def userstatus(self):
        """Gets the userstatus of this TicketRow.  # noqa: E501


        :return: The userstatus of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._userstatus

    @userstatus.setter
    def userstatus(self, userstatus):
        """Sets the userstatus of this TicketRow.


        :param userstatus: The userstatus of this TicketRow.  # noqa: E501
        :type: str
        """

        self._userstatus = userstatus

    @property
    def accountuserstatus(self):
        """Gets the accountuserstatus of this TicketRow.  # noqa: E501


        :return: The accountuserstatus of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._accountuserstatus

    @accountuserstatus.setter
    def accountuserstatus(self, accountuserstatus):
        """Sets the accountuserstatus of this TicketRow.


        :param accountuserstatus: The accountuserstatus of this TicketRow.  # noqa: E501
        :type: str
        """

        self._accountuserstatus = accountuserstatus

    @property
    def description(self):
        """Gets the description of this TicketRow.  # noqa: E501


        :return: The description of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketRow.


        :param description: The description of this TicketRow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def note(self):
        """Gets the note of this TicketRow.  # noqa: E501


        :return: The note of this TicketRow.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TicketRow.


        :param note: The note of this TicketRow.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def tagnames(self):
        """Gets the tagnames of this TicketRow.  # noqa: E501


        :return: The tagnames of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagnames

    @tagnames.setter
    def tagnames(self, tagnames):
        """Sets the tagnames of this TicketRow.


        :param tagnames: The tagnames of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._tagnames = tagnames

    @property
    def groupnames(self):
        """Gets the groupnames of this TicketRow.  # noqa: E501


        :return: The groupnames of this TicketRow.  # noqa: E501
        :rtype: list[str]
        """
        return self._groupnames

    @groupnames.setter
    def groupnames(self, groupnames):
        """Sets the groupnames of this TicketRow.


        :param groupnames: The groupnames of this TicketRow.  # noqa: E501
        :type: list[str]
        """

        self._groupnames = groupnames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
