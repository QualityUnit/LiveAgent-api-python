# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ChatInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ChatInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'subject': 'str',
            'preview': 'str',
            'chat_order': 'datetime',
            'date_created': 'datetime',
            'status_date_started': 'datetime',
            'tags': 'list[str]',
            'rstatus': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'system_name': 'str',
            'avatar_url': 'str',
            'countrycode': 'str',
            'city': 'str',
            'department_id': 'str',
            'agent_id': 'str',
            'status': 'str',
            'emails': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'subject': 'subject',
            'preview': 'preview',
            'chat_order': 'chat_order',
            'date_created': 'date_created',
            'status_date_started': 'status_date_started',
            'tags': 'tags',
            'rstatus': 'rstatus',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'system_name': 'system_name',
            'avatar_url': 'avatar_url',
            'countrycode': 'countrycode',
            'city': 'city',
            'department_id': 'departmentId',
            'agent_id': 'agentId',
            'status': 'status',
            'emails': 'emails'
        }

        self._id = None
        self._subject = None
        self._preview = None
        self._chat_order = None
        self._date_created = None
        self._status_date_started = None
        self._tags = None
        self._rstatus = None
        self._firstname = None
        self._lastname = None
        self._system_name = None
        self._avatar_url = None
        self._countrycode = None
        self._city = None
        self._department_id = None
        self._agent_id = None
        self._status = None
        self._emails = None

    @property
    def id(self):
        """
        Gets the id of this ChatInformation.


        :return: The id of this ChatInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChatInformation.


        :param id: The id of this ChatInformation.
        :type: str
        """
        self._id = id

    @property
    def subject(self):
        """
        Gets the subject of this ChatInformation.


        :return: The subject of this ChatInformation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ChatInformation.


        :param subject: The subject of this ChatInformation.
        :type: str
        """
        self._subject = subject

    @property
    def preview(self):
        """
        Gets the preview of this ChatInformation.


        :return: The preview of this ChatInformation.
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """
        Sets the preview of this ChatInformation.


        :param preview: The preview of this ChatInformation.
        :type: str
        """
        self._preview = preview

    @property
    def chat_order(self):
        """
        Gets the chat_order of this ChatInformation.


        :return: The chat_order of this ChatInformation.
        :rtype: datetime
        """
        return self._chat_order

    @chat_order.setter
    def chat_order(self, chat_order):
        """
        Sets the chat_order of this ChatInformation.


        :param chat_order: The chat_order of this ChatInformation.
        :type: datetime
        """
        self._chat_order = chat_order

    @property
    def date_created(self):
        """
        Gets the date_created of this ChatInformation.


        :return: The date_created of this ChatInformation.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this ChatInformation.


        :param date_created: The date_created of this ChatInformation.
        :type: datetime
        """
        self._date_created = date_created

    @property
    def status_date_started(self):
        """
        Gets the status_date_started of this ChatInformation.


        :return: The status_date_started of this ChatInformation.
        :rtype: datetime
        """
        return self._status_date_started

    @status_date_started.setter
    def status_date_started(self, status_date_started):
        """
        Sets the status_date_started of this ChatInformation.


        :param status_date_started: The status_date_started of this ChatInformation.
        :type: datetime
        """
        self._status_date_started = status_date_started

    @property
    def tags(self):
        """
        Gets the tags of this ChatInformation.


        :return: The tags of this ChatInformation.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ChatInformation.


        :param tags: The tags of this ChatInformation.
        :type: list[str]
        """
        self._tags = tags

    @property
    def rstatus(self):
        """
        Gets the rstatus of this ChatInformation.
        <br> I - Init<br> T - Chatting<br> R - Resolved

        :return: The rstatus of this ChatInformation.
        :rtype: str
        """
        return self._rstatus

    @rstatus.setter
    def rstatus(self, rstatus):
        """
        Sets the rstatus of this ChatInformation.
        <br> I - Init<br> T - Chatting<br> R - Resolved

        :param rstatus: The rstatus of this ChatInformation.
        :type: str
        """
        self._rstatus = rstatus

    @property
    def firstname(self):
        """
        Gets the firstname of this ChatInformation.


        :return: The firstname of this ChatInformation.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this ChatInformation.


        :param firstname: The firstname of this ChatInformation.
        :type: str
        """
        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this ChatInformation.


        :return: The lastname of this ChatInformation.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this ChatInformation.


        :param lastname: The lastname of this ChatInformation.
        :type: str
        """
        self._lastname = lastname

    @property
    def system_name(self):
        """
        Gets the system_name of this ChatInformation.


        :return: The system_name of this ChatInformation.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """
        Sets the system_name of this ChatInformation.


        :param system_name: The system_name of this ChatInformation.
        :type: str
        """
        self._system_name = system_name

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this ChatInformation.


        :return: The avatar_url of this ChatInformation.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this ChatInformation.


        :param avatar_url: The avatar_url of this ChatInformation.
        :type: str
        """
        self._avatar_url = avatar_url

    @property
    def countrycode(self):
        """
        Gets the countrycode of this ChatInformation.


        :return: The countrycode of this ChatInformation.
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """
        Sets the countrycode of this ChatInformation.


        :param countrycode: The countrycode of this ChatInformation.
        :type: str
        """
        self._countrycode = countrycode

    @property
    def city(self):
        """
        Gets the city of this ChatInformation.


        :return: The city of this ChatInformation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this ChatInformation.


        :param city: The city of this ChatInformation.
        :type: str
        """
        self._city = city

    @property
    def department_id(self):
        """
        Gets the department_id of this ChatInformation.


        :return: The department_id of this ChatInformation.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """
        Sets the department_id of this ChatInformation.


        :param department_id: The department_id of this ChatInformation.
        :type: str
        """
        self._department_id = department_id

    @property
    def agent_id(self):
        """
        Gets the agent_id of this ChatInformation.


        :return: The agent_id of this ChatInformation.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """
        Sets the agent_id of this ChatInformation.


        :param agent_id: The agent_id of this ChatInformation.
        :type: str
        """
        self._agent_id = agent_id

    @property
    def status(self):
        """
        Gets the status of this ChatInformation.
        <br> C, T - Chatting<br> R - Ringing<br> Q - In queue

        :return: The status of this ChatInformation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ChatInformation.
        <br> C, T - Chatting<br> R - Ringing<br> Q - In queue

        :param status: The status of this ChatInformation.
        :type: str
        """
        self._status = status

    @property
    def emails(self):
        """
        Gets the emails of this ChatInformation.


        :return: The emails of this ChatInformation.
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """
        Sets the emails of this ChatInformation.


        :param emails: The emails of this ChatInformation.
        :type: list[str]
        """
        self._emails = emails

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

