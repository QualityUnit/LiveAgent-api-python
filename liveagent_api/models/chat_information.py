# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChatInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'subject': 'str',
        'preview': 'str',
        'chat_order': 'datetime',
        'date_created': 'datetime',
        'status_date_started': 'datetime',
        'tags': 'list[str]',
        'rstatus': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'system_name': 'str',
        'avatar_url': 'str',
        'countrycode': 'str',
        'city': 'str',
        'department_id': 'str',
        'agent_id': 'str',
        'status': 'str',
        'emails': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'subject': 'subject',
        'preview': 'preview',
        'chat_order': 'chat_order',
        'date_created': 'date_created',
        'status_date_started': 'status_date_started',
        'tags': 'tags',
        'rstatus': 'rstatus',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'system_name': 'system_name',
        'avatar_url': 'avatar_url',
        'countrycode': 'countrycode',
        'city': 'city',
        'department_id': 'departmentId',
        'agent_id': 'agentId',
        'status': 'status',
        'emails': 'emails'
    }

    def __init__(self, id=None, subject=None, preview=None, chat_order=None, date_created=None, status_date_started=None, tags=None, rstatus=None, firstname=None, lastname=None, system_name=None, avatar_url=None, countrycode=None, city=None, department_id=None, agent_id=None, status=None, emails=None):  # noqa: E501
        """ChatInformation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._subject = None
        self._preview = None
        self._chat_order = None
        self._date_created = None
        self._status_date_started = None
        self._tags = None
        self._rstatus = None
        self._firstname = None
        self._lastname = None
        self._system_name = None
        self._avatar_url = None
        self._countrycode = None
        self._city = None
        self._department_id = None
        self._agent_id = None
        self._status = None
        self._emails = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject is not None:
            self.subject = subject
        if preview is not None:
            self.preview = preview
        if chat_order is not None:
            self.chat_order = chat_order
        if date_created is not None:
            self.date_created = date_created
        if status_date_started is not None:
            self.status_date_started = status_date_started
        if tags is not None:
            self.tags = tags
        if rstatus is not None:
            self.rstatus = rstatus
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if system_name is not None:
            self.system_name = system_name
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if countrycode is not None:
            self.countrycode = countrycode
        if city is not None:
            self.city = city
        if department_id is not None:
            self.department_id = department_id
        if agent_id is not None:
            self.agent_id = agent_id
        if status is not None:
            self.status = status
        if emails is not None:
            self.emails = emails

    @property
    def id(self):
        """Gets the id of this ChatInformation.  # noqa: E501


        :return: The id of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChatInformation.


        :param id: The id of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this ChatInformation.  # noqa: E501


        :return: The subject of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ChatInformation.


        :param subject: The subject of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def preview(self):
        """Gets the preview of this ChatInformation.  # noqa: E501


        :return: The preview of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ChatInformation.


        :param preview: The preview of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._preview = preview

    @property
    def chat_order(self):
        """Gets the chat_order of this ChatInformation.  # noqa: E501


        :return: The chat_order of this ChatInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._chat_order

    @chat_order.setter
    def chat_order(self, chat_order):
        """Sets the chat_order of this ChatInformation.


        :param chat_order: The chat_order of this ChatInformation.  # noqa: E501
        :type: datetime
        """

        self._chat_order = chat_order

    @property
    def date_created(self):
        """Gets the date_created of this ChatInformation.  # noqa: E501


        :return: The date_created of this ChatInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ChatInformation.


        :param date_created: The date_created of this ChatInformation.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def status_date_started(self):
        """Gets the status_date_started of this ChatInformation.  # noqa: E501


        :return: The status_date_started of this ChatInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._status_date_started

    @status_date_started.setter
    def status_date_started(self, status_date_started):
        """Sets the status_date_started of this ChatInformation.


        :param status_date_started: The status_date_started of this ChatInformation.  # noqa: E501
        :type: datetime
        """

        self._status_date_started = status_date_started

    @property
    def tags(self):
        """Gets the tags of this ChatInformation.  # noqa: E501


        :return: The tags of this ChatInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ChatInformation.


        :param tags: The tags of this ChatInformation.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def rstatus(self):
        """Gets the rstatus of this ChatInformation.  # noqa: E501

        <br> I - Init<br> T - Chatting<br> R - Resolved  # noqa: E501

        :return: The rstatus of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._rstatus

    @rstatus.setter
    def rstatus(self, rstatus):
        """Sets the rstatus of this ChatInformation.

        <br> I - Init<br> T - Chatting<br> R - Resolved  # noqa: E501

        :param rstatus: The rstatus of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._rstatus = rstatus

    @property
    def firstname(self):
        """Gets the firstname of this ChatInformation.  # noqa: E501


        :return: The firstname of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ChatInformation.


        :param firstname: The firstname of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ChatInformation.  # noqa: E501


        :return: The lastname of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ChatInformation.


        :param lastname: The lastname of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def system_name(self):
        """Gets the system_name of this ChatInformation.  # noqa: E501


        :return: The system_name of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this ChatInformation.


        :param system_name: The system_name of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def avatar_url(self):
        """Gets the avatar_url of this ChatInformation.  # noqa: E501


        :return: The avatar_url of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this ChatInformation.


        :param avatar_url: The avatar_url of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def countrycode(self):
        """Gets the countrycode of this ChatInformation.  # noqa: E501


        :return: The countrycode of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this ChatInformation.


        :param countrycode: The countrycode of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._countrycode = countrycode

    @property
    def city(self):
        """Gets the city of this ChatInformation.  # noqa: E501


        :return: The city of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ChatInformation.


        :param city: The city of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def department_id(self):
        """Gets the department_id of this ChatInformation.  # noqa: E501


        :return: The department_id of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this ChatInformation.


        :param department_id: The department_id of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def agent_id(self):
        """Gets the agent_id of this ChatInformation.  # noqa: E501


        :return: The agent_id of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this ChatInformation.


        :param agent_id: The agent_id of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def status(self):
        """Gets the status of this ChatInformation.  # noqa: E501

        <br> C, T - Chatting<br> R - Ringing<br> Q - In queue  # noqa: E501

        :return: The status of this ChatInformation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChatInformation.

        <br> C, T - Chatting<br> R - Ringing<br> Q - In queue  # noqa: E501

        :param status: The status of this ChatInformation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def emails(self):
        """Gets the emails of this ChatInformation.  # noqa: E501


        :return: The emails of this ChatInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ChatInformation.


        :param emails: The emails of this ChatInformation.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChatInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChatInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
