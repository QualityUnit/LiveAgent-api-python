# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TagRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tagid': 'str',
        'name': 'str',
        'type': 'str',
        'color': 'str',
        'backgroundcolor': 'str',
        'is_public': 'str'
    }

    attribute_map = {
        'tagid': 'tagid',
        'name': 'name',
        'type': 'type',
        'color': 'color',
        'backgroundcolor': 'backgroundcolor',
        'is_public': 'is_public'
    }

    def __init__(self, tagid=None, name=None, type=None, color=None, backgroundcolor=None, is_public=None):  # noqa: E501
        """TagRow - a model defined in Swagger"""  # noqa: E501

        self._tagid = None
        self._name = None
        self._type = None
        self._color = None
        self._backgroundcolor = None
        self._is_public = None
        self.discriminator = None

        if tagid is not None:
            self.tagid = tagid
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if color is not None:
            self.color = color
        if backgroundcolor is not None:
            self.backgroundcolor = backgroundcolor
        if is_public is not None:
            self.is_public = is_public

    @property
    def tagid(self):
        """Gets the tagid of this TagRow.  # noqa: E501


        :return: The tagid of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._tagid

    @tagid.setter
    def tagid(self, tagid):
        """Sets the tagid of this TagRow.


        :param tagid: The tagid of this TagRow.  # noqa: E501
        :type: str
        """

        self._tagid = tagid

    @property
    def name(self):
        """Gets the name of this TagRow.  # noqa: E501


        :return: The name of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagRow.


        :param name: The name of this TagRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this TagRow.  # noqa: E501


        :return: The type of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TagRow.


        :param type: The type of this TagRow.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def color(self):
        """Gets the color of this TagRow.  # noqa: E501


        :return: The color of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TagRow.


        :param color: The color of this TagRow.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def backgroundcolor(self):
        """Gets the backgroundcolor of this TagRow.  # noqa: E501


        :return: The backgroundcolor of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._backgroundcolor

    @backgroundcolor.setter
    def backgroundcolor(self, backgroundcolor):
        """Sets the backgroundcolor of this TagRow.


        :param backgroundcolor: The backgroundcolor of this TagRow.  # noqa: E501
        :type: str
        """

        self._backgroundcolor = backgroundcolor

    @property
    def is_public(self):
        """Gets the is_public of this TagRow.  # noqa: E501


        :return: The is_public of this TagRow.  # noqa: E501
        :rtype: str
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this TagRow.


        :param is_public: The is_public of this TagRow.  # noqa: E501
        :type: str
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
