# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DiscountValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DiscountValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'type': 'str',
            'value_type': 'str',
            'value': 'int'
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'value_type': 'value_type',
            'value': 'value'
        }

        self._name = None
        self._type = None
        self._value_type = None
        self._value = None

    @property
    def name(self):
        """
        Gets the name of this DiscountValue.


        :return: The name of this DiscountValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DiscountValue.


        :param name: The name of this DiscountValue.
        :type: str
        """
        self._name = name

    @property
    def type(self):
        """
        Gets the type of this DiscountValue.


        :return: The type of this DiscountValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DiscountValue.


        :param type: The type of this DiscountValue.
        :type: str
        """
        allowed_values = ["one_time", "current_plan", "permanent"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    @property
    def value_type(self):
        """
        Gets the value_type of this DiscountValue.


        :return: The value_type of this DiscountValue.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """
        Sets the value_type of this DiscountValue.


        :param value_type: The value_type of this DiscountValue.
        :type: str
        """
        allowed_values = ["per_cent", "constant"]
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._value_type = value_type

    @property
    def value(self):
        """
        Gets the value of this DiscountValue.


        :return: The value of this DiscountValue.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this DiscountValue.


        :param value: The value of this DiscountValue.
        :type: int
        """
        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

