# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.variation_upgrade import VariationUpgrade  # noqa: F401,E501


class VariationUpgrades(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'VariationUpgrade',
        'upgrades': 'list[VariationUpgrade]',
        'currency': 'str',
        'tax_per_cent': 'float',
        'tax_included': 'bool'
    }

    attribute_map = {
        'current': 'current',
        'upgrades': 'upgrades',
        'currency': 'currency',
        'tax_per_cent': 'tax_per_cent',
        'tax_included': 'tax_included'
    }

    def __init__(self, current=None, upgrades=None, currency=None, tax_per_cent=None, tax_included=None):  # noqa: E501
        """VariationUpgrades - a model defined in Swagger"""  # noqa: E501

        self._current = None
        self._upgrades = None
        self._currency = None
        self._tax_per_cent = None
        self._tax_included = None
        self.discriminator = None

        if current is not None:
            self.current = current
        if upgrades is not None:
            self.upgrades = upgrades
        if currency is not None:
            self.currency = currency
        if tax_per_cent is not None:
            self.tax_per_cent = tax_per_cent
        if tax_included is not None:
            self.tax_included = tax_included

    @property
    def current(self):
        """Gets the current of this VariationUpgrades.  # noqa: E501


        :return: The current of this VariationUpgrades.  # noqa: E501
        :rtype: VariationUpgrade
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this VariationUpgrades.


        :param current: The current of this VariationUpgrades.  # noqa: E501
        :type: VariationUpgrade
        """

        self._current = current

    @property
    def upgrades(self):
        """Gets the upgrades of this VariationUpgrades.  # noqa: E501


        :return: The upgrades of this VariationUpgrades.  # noqa: E501
        :rtype: list[VariationUpgrade]
        """
        return self._upgrades

    @upgrades.setter
    def upgrades(self, upgrades):
        """Sets the upgrades of this VariationUpgrades.


        :param upgrades: The upgrades of this VariationUpgrades.  # noqa: E501
        :type: list[VariationUpgrade]
        """

        self._upgrades = upgrades

    @property
    def currency(self):
        """Gets the currency of this VariationUpgrades.  # noqa: E501


        :return: The currency of this VariationUpgrades.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VariationUpgrades.


        :param currency: The currency of this VariationUpgrades.  # noqa: E501
        :type: str
        """
        allowed_values = ["USD", "EUR"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def tax_per_cent(self):
        """Gets the tax_per_cent of this VariationUpgrades.  # noqa: E501


        :return: The tax_per_cent of this VariationUpgrades.  # noqa: E501
        :rtype: float
        """
        return self._tax_per_cent

    @tax_per_cent.setter
    def tax_per_cent(self, tax_per_cent):
        """Sets the tax_per_cent of this VariationUpgrades.


        :param tax_per_cent: The tax_per_cent of this VariationUpgrades.  # noqa: E501
        :type: float
        """

        self._tax_per_cent = tax_per_cent

    @property
    def tax_included(self):
        """Gets the tax_included of this VariationUpgrades.  # noqa: E501


        :return: The tax_included of this VariationUpgrades.  # noqa: E501
        :rtype: bool
        """
        return self._tax_included

    @tax_included.setter
    def tax_included(self, tax_included):
        """Sets the tax_included of this VariationUpgrades.


        :param tax_included: The tax_included of this VariationUpgrades.  # noqa: E501
        :type: bool
        """

        self._tax_included = tax_included

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariationUpgrades, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariationUpgrades):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
