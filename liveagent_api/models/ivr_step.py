# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class IvrStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'params': 'str',
        'choices': 'list[IvrChoice]',
        'forward': 'IvrForward',
        'fetch': 'IvrFetch'
    }

    attribute_map = {
        'type': 'type',
        'params': 'params',
        'choices': 'choices',
        'forward': 'forward',
        'fetch': 'fetch'
    }

    def __init__(self, type=None, params=None, choices=None, forward=None, fetch=None, _configuration=None):  # noqa: E501
        """IvrStep - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._params = None
        self._choices = None
        self._forward = None
        self._fetch = None
        self.discriminator = None

        self.type = type
        if params is not None:
            self.params = params
        if choices is not None:
            self.choices = choices
        if forward is not None:
            self.forward = forward
        if fetch is not None:
            self.fetch = fetch

    @property
    def type(self):
        """Gets the type of this IvrStep.  # noqa: E501

        P - play message (URL in params), R - ring to agent (optional departmentId in params), V - redirect to voicemail, D - choice (choices), G - goto (IVR name in params), T - transfer (optional ivr settings in choices {\"1\":\"online\",\"0\":\"offline\",\"9\":\"queue\"}), F - fetch next IVR steps from URL in params, I - wait for DTMF input and then fetch next IVR steps from URL in params, C - request Callback, E - forward to external number, A - call recording turn on, B - call recording turn off  # noqa: E501

        :return: The type of this IvrStep.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IvrStep.

        P - play message (URL in params), R - ring to agent (optional departmentId in params), V - redirect to voicemail, D - choice (choices), G - goto (IVR name in params), T - transfer (optional ivr settings in choices {\"1\":\"online\",\"0\":\"offline\",\"9\":\"queue\"}), F - fetch next IVR steps from URL in params, I - wait for DTMF input and then fetch next IVR steps from URL in params, C - request Callback, E - forward to external number, A - call recording turn on, B - call recording turn off  # noqa: E501

        :param type: The type of this IvrStep.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["P", "R", "V", "D", "G", "T", "F", "I", "C", "E", "A", "B"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def params(self):
        """Gets the params of this IvrStep.  # noqa: E501


        :return: The params of this IvrStep.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this IvrStep.


        :param params: The params of this IvrStep.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def choices(self):
        """Gets the choices of this IvrStep.  # noqa: E501


        :return: The choices of this IvrStep.  # noqa: E501
        :rtype: list[IvrChoice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this IvrStep.


        :param choices: The choices of this IvrStep.  # noqa: E501
        :type: list[IvrChoice]
        """

        self._choices = choices

    @property
    def forward(self):
        """Gets the forward of this IvrStep.  # noqa: E501


        :return: The forward of this IvrStep.  # noqa: E501
        :rtype: IvrForward
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this IvrStep.


        :param forward: The forward of this IvrStep.  # noqa: E501
        :type: IvrForward
        """

        self._forward = forward

    @property
    def fetch(self):
        """Gets the fetch of this IvrStep.  # noqa: E501


        :return: The fetch of this IvrStep.  # noqa: E501
        :rtype: IvrFetch
        """
        return self._fetch

    @fetch.setter
    def fetch(self, fetch):
        """Sets the fetch of this IvrStep.


        :param fetch: The fetch of this IvrStep.  # noqa: E501
        :type: IvrFetch
        """

        self._fetch = fetch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IvrStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IvrStep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IvrStep):
            return True

        return self.to_dict() != other.to_dict()
