# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ActiveTicket(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ActiveTicket - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ticket_id': 'str',
            'ticket_code': 'str',
            'date_joined': 'datetime',
            'department_id': 'str',
            'status': 'str',
            'ticket_status': 'str'
        }

        self.attribute_map = {
            'ticket_id': 'ticket_id',
            'ticket_code': 'ticket_code',
            'date_joined': 'date_joined',
            'department_id': 'department_id',
            'status': 'status',
            'ticket_status': 'ticket_status'
        }

        self._ticket_id = None
        self._ticket_code = None
        self._date_joined = None
        self._department_id = None
        self._status = None
        self._ticket_status = None

    @property
    def ticket_id(self):
        """
        Gets the ticket_id of this ActiveTicket.


        :return: The ticket_id of this ActiveTicket.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """
        Sets the ticket_id of this ActiveTicket.


        :param ticket_id: The ticket_id of this ActiveTicket.
        :type: str
        """
        self._ticket_id = ticket_id

    @property
    def ticket_code(self):
        """
        Gets the ticket_code of this ActiveTicket.


        :return: The ticket_code of this ActiveTicket.
        :rtype: str
        """
        return self._ticket_code

    @ticket_code.setter
    def ticket_code(self, ticket_code):
        """
        Sets the ticket_code of this ActiveTicket.


        :param ticket_code: The ticket_code of this ActiveTicket.
        :type: str
        """
        self._ticket_code = ticket_code

    @property
    def date_joined(self):
        """
        Gets the date_joined of this ActiveTicket.


        :return: The date_joined of this ActiveTicket.
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """
        Sets the date_joined of this ActiveTicket.


        :param date_joined: The date_joined of this ActiveTicket.
        :type: datetime
        """
        self._date_joined = date_joined

    @property
    def department_id(self):
        """
        Gets the department_id of this ActiveTicket.


        :return: The department_id of this ActiveTicket.
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """
        Sets the department_id of this ActiveTicket.


        :param department_id: The department_id of this ActiveTicket.
        :type: str
        """
        self._department_id = department_id

    @property
    def status(self):
        """
        Gets the status of this ActiveTicket.
        V - Viewing / J - Replying, Chatting / R - Ringing / C - Calling\n

        :return: The status of this ActiveTicket.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ActiveTicket.
        V - Viewing / J - Replying, Chatting / R - Ringing / C - Calling\n

        :param status: The status of this ActiveTicket.
        :type: str
        """
        self._status = status

    @property
    def ticket_status(self):
        """
        Gets the ticket_status of this ActiveTicket.
        C - Opened / R - Resolved / A - Answered / X - Deleted / T - Chat / P - Call\n

        :return: The ticket_status of this ActiveTicket.
        :rtype: str
        """
        return self._ticket_status

    @ticket_status.setter
    def ticket_status(self, ticket_status):
        """
        Sets the ticket_status of this ActiveTicket.
        C - Opened / R - Resolved / A - Answered / X - Deleted / T - Chat / P - Call\n

        :param ticket_status: The ticket_status of this ActiveTicket.
        :type: str
        """
        self._ticket_status = ticket_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

