# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'color': 'str',
        'background_color': 'str',
        'is_public': 'str',
        'is_archived': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'color': 'color',
        'background_color': 'background_color',
        'is_public': 'is_public',
        'is_archived': 'is_archived'
    }

    def __init__(self, id=None, name=None, color=None, background_color=None, is_public=None, is_archived=None, _configuration=None):  # noqa: E501
        """Tag - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._color = None
        self._background_color = None
        self._is_public = None
        self._is_archived = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if color is not None:
            self.color = color
        if background_color is not None:
            self.background_color = background_color
        if is_public is not None:
            self.is_public = is_public
        if is_archived is not None:
            self.is_archived = is_archived

    @property
    def id(self):
        """Gets the id of this Tag.  # noqa: E501


        :return: The id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.


        :param id: The id of this Tag.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tag.  # noqa: E501


        :return: The name of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.


        :param name: The name of this Tag.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def color(self):
        """Gets the color of this Tag.  # noqa: E501


        :return: The color of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Tag.


        :param color: The color of this Tag.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def background_color(self):
        """Gets the background_color of this Tag.  # noqa: E501


        :return: The background_color of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this Tag.


        :param background_color: The background_color of this Tag.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def is_public(self):
        """Gets the is_public of this Tag.  # noqa: E501

        - Y - Public tag - N - Private tag  # noqa: E501

        :return: The is_public of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Tag.

        - Y - Public tag - N - Private tag  # noqa: E501

        :param is_public: The is_public of this Tag.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", ""]  # noqa: E501
        if (self._configuration.client_side_validation and
                is_public not in allowed_values):
            raise ValueError(
                "Invalid value for `is_public` ({0}), must be one of {1}"  # noqa: E501
                .format(is_public, allowed_values)
            )

        self._is_public = is_public

    @property
    def is_archived(self):
        """Gets the is_archived of this Tag.  # noqa: E501

        - Y - Archived tag - N - Active tag  # noqa: E501

        :return: The is_archived of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Tag.

        - Y - Archived tag - N - Active tag  # noqa: E501

        :param is_archived: The is_archived of this Tag.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if (self._configuration.client_side_validation and
                is_archived not in allowed_values):
            raise ValueError(
                "Invalid value for `is_archived` ({0}), must be one of {1}"  # noqa: E501
                .format(is_archived, allowed_values)
            )

        self._is_archived = is_archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tag):
            return True

        return self.to_dict() != other.to_dict()
