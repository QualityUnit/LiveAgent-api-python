# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MailAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mailaccount_id': 'str',
        'fetch_type': 'str',
        'email': 'str',
        'department_id': 'str',
        'status': 'str',
        'provider': 'str',
        'last_mail_date': 'str',
        'last_fetch_date': 'str'
    }

    attribute_map = {
        'mailaccount_id': 'mailaccount_id',
        'fetch_type': 'fetch_type',
        'email': 'email',
        'department_id': 'department_id',
        'status': 'status',
        'provider': 'provider',
        'last_mail_date': 'last_mail_date',
        'last_fetch_date': 'last_fetch_date'
    }

    def __init__(self, mailaccount_id=None, fetch_type=None, email=None, department_id=None, status=None, provider=None, last_mail_date=None, last_fetch_date=None):  # noqa: E501
        """MailAccount - a model defined in Swagger"""  # noqa: E501

        self._mailaccount_id = None
        self._fetch_type = None
        self._email = None
        self._department_id = None
        self._status = None
        self._provider = None
        self._last_mail_date = None
        self._last_fetch_date = None
        self.discriminator = None

        if mailaccount_id is not None:
            self.mailaccount_id = mailaccount_id
        if fetch_type is not None:
            self.fetch_type = fetch_type
        if email is not None:
            self.email = email
        if department_id is not None:
            self.department_id = department_id
        if status is not None:
            self.status = status
        if provider is not None:
            self.provider = provider
        if last_mail_date is not None:
            self.last_mail_date = last_mail_date
        if last_fetch_date is not None:
            self.last_fetch_date = last_fetch_date

    @property
    def mailaccount_id(self):
        """Gets the mailaccount_id of this MailAccount.  # noqa: E501


        :return: The mailaccount_id of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._mailaccount_id

    @mailaccount_id.setter
    def mailaccount_id(self, mailaccount_id):
        """Sets the mailaccount_id of this MailAccount.


        :param mailaccount_id: The mailaccount_id of this MailAccount.  # noqa: E501
        :type: str
        """

        self._mailaccount_id = mailaccount_id

    @property
    def fetch_type(self):
        """Gets the fetch_type of this MailAccount.  # noqa: E501

        I - Imap, 3 - POP3, P - piping, B - built-in, F - forwarding   # noqa: E501

        :return: The fetch_type of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._fetch_type

    @fetch_type.setter
    def fetch_type(self, fetch_type):
        """Sets the fetch_type of this MailAccount.

        I - Imap, 3 - POP3, P - piping, B - built-in, F - forwarding   # noqa: E501

        :param fetch_type: The fetch_type of this MailAccount.  # noqa: E501
        :type: str
        """

        self._fetch_type = fetch_type

    @property
    def email(self):
        """Gets the email of this MailAccount.  # noqa: E501


        :return: The email of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MailAccount.


        :param email: The email of this MailAccount.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def department_id(self):
        """Gets the department_id of this MailAccount.  # noqa: E501


        :return: The department_id of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this MailAccount.


        :param department_id: The department_id of this MailAccount.  # noqa: E501
        :type: str
        """

        self._department_id = department_id

    @property
    def status(self):
        """Gets the status of this MailAccount.  # noqa: E501

        A - active, I - inactive, P - pending, S - skipping   # noqa: E501

        :return: The status of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MailAccount.

        A - active, I - inactive, P - pending, S - skipping   # noqa: E501

        :param status: The status of this MailAccount.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def provider(self):
        """Gets the provider of this MailAccount.  # noqa: E501


        :return: The provider of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this MailAccount.


        :param provider: The provider of this MailAccount.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def last_mail_date(self):
        """Gets the last_mail_date of this MailAccount.  # noqa: E501


        :return: The last_mail_date of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_mail_date

    @last_mail_date.setter
    def last_mail_date(self, last_mail_date):
        """Sets the last_mail_date of this MailAccount.


        :param last_mail_date: The last_mail_date of this MailAccount.  # noqa: E501
        :type: str
        """

        self._last_mail_date = last_mail_date

    @property
    def last_fetch_date(self):
        """Gets the last_fetch_date of this MailAccount.  # noqa: E501


        :return: The last_fetch_date of this MailAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_fetch_date

    @last_fetch_date.setter
    def last_fetch_date(self, last_fetch_date):
        """Sets the last_fetch_date of this MailAccount.


        :param last_fetch_date: The last_fetch_date of this MailAccount.  # noqa: E501
        :type: str
        """

        self._last_fetch_date = last_fetch_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
