# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Addon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codename': 'str',
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'price': 'int',
        'active': 'bool'
    }

    attribute_map = {
        'codename': 'codename',
        'name': 'name',
        'description': 'description',
        'state': 'state',
        'price': 'price',
        'active': 'active'
    }

    def __init__(self, codename=None, name=None, description=None, state=None, price=None, active=None):  # noqa: E501
        """Addon - a model defined in Swagger"""  # noqa: E501

        self._codename = None
        self._name = None
        self._description = None
        self._state = None
        self._price = None
        self._active = None
        self.discriminator = None

        self.codename = codename
        self.name = name
        self.description = description
        self.state = state
        if price is not None:
            self.price = price
        if active is not None:
            self.active = active

    @property
    def codename(self):
        """Gets the codename of this Addon.  # noqa: E501


        :return: The codename of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename):
        """Sets the codename of this Addon.


        :param codename: The codename of this Addon.  # noqa: E501
        :type: str
        """
        if codename is None:
            raise ValueError("Invalid value for `codename`, must not be `None`")  # noqa: E501

        self._codename = codename

    @property
    def name(self):
        """Gets the name of this Addon.  # noqa: E501


        :return: The name of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Addon.


        :param name: The name of this Addon.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Addon.  # noqa: E501


        :return: The description of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Addon.


        :param description: The description of this Addon.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def state(self):
        """Gets the state of this Addon.  # noqa: E501


        :return: The state of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Addon.


        :param state: The state of this Addon.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def price(self):
        """Gets the price of this Addon.  # noqa: E501


        :return: The price of this Addon.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Addon.


        :param price: The price of this Addon.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def active(self):
        """Gets the active of this Addon.  # noqa: E501


        :return: The active of this Addon.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Addon.


        :param active: The active of this Addon.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Addon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Addon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
