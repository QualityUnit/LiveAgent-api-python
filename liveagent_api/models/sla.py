# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.models.sla_business_hours import SlaBusinessHours  # noqa: F401,E501
from liveagent_api.models.sla_values import SlaValues  # noqa: F401,E501


class Sla(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'values': 'SlaValues',
        'business_hours': 'SlaBusinessHours'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'values': 'values',
        'business_hours': 'business_hours'
    }

    def __init__(self, id=None, name=None, values=None, business_hours=None):  # noqa: E501
        """Sla - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._values = None
        self._business_hours = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if values is not None:
            self.values = values
        if business_hours is not None:
            self.business_hours = business_hours

    @property
    def id(self):
        """Gets the id of this Sla.  # noqa: E501


        :return: The id of this Sla.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sla.


        :param id: The id of this Sla.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Sla.  # noqa: E501


        :return: The name of this Sla.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sla.


        :param name: The name of this Sla.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def values(self):
        """Gets the values of this Sla.  # noqa: E501


        :return: The values of this Sla.  # noqa: E501
        :rtype: SlaValues
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Sla.


        :param values: The values of this Sla.  # noqa: E501
        :type: SlaValues
        """

        self._values = values

    @property
    def business_hours(self):
        """Gets the business_hours of this Sla.  # noqa: E501


        :return: The business_hours of this Sla.  # noqa: E501
        :rtype: SlaBusinessHours
        """
        return self._business_hours

    @business_hours.setter
    def business_hours(self, business_hours):
        """Sets the business_hours of this Sla.


        :param business_hours: The business_hours of this Sla.  # noqa: E501
        :type: SlaBusinessHours
        """

        self._business_hours = business_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sla):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
