# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PluginRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_name': 'str',
        'name': 'str',
        'description': 'str',
        'active': 'bool',
        'help': 'str',
        'multiple': 'bool',
        'config_file': 'str',
        'price': 'float',
        'legacy_integration': 'bool'
    }

    attribute_map = {
        'code_name': 'code_name',
        'name': 'name',
        'description': 'description',
        'active': 'active',
        'help': 'help',
        'multiple': 'multiple',
        'config_file': 'config_file',
        'price': 'price',
        'legacy_integration': 'legacy_integration'
    }

    def __init__(self, code_name=None, name=None, description=None, active=None, help=None, multiple=None, config_file=None, price=None, legacy_integration=None):  # noqa: E501
        """PluginRow - a model defined in Swagger"""  # noqa: E501

        self._code_name = None
        self._name = None
        self._description = None
        self._active = None
        self._help = None
        self._multiple = None
        self._config_file = None
        self._price = None
        self._legacy_integration = None
        self.discriminator = None

        if code_name is not None:
            self.code_name = code_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if active is not None:
            self.active = active
        if help is not None:
            self.help = help
        if multiple is not None:
            self.multiple = multiple
        if config_file is not None:
            self.config_file = config_file
        if price is not None:
            self.price = price
        if legacy_integration is not None:
            self.legacy_integration = legacy_integration

    @property
    def code_name(self):
        """Gets the code_name of this PluginRow.  # noqa: E501


        :return: The code_name of this PluginRow.  # noqa: E501
        :rtype: str
        """
        return self._code_name

    @code_name.setter
    def code_name(self, code_name):
        """Sets the code_name of this PluginRow.


        :param code_name: The code_name of this PluginRow.  # noqa: E501
        :type: str
        """

        self._code_name = code_name

    @property
    def name(self):
        """Gets the name of this PluginRow.  # noqa: E501


        :return: The name of this PluginRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginRow.


        :param name: The name of this PluginRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PluginRow.  # noqa: E501


        :return: The description of this PluginRow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PluginRow.


        :param description: The description of this PluginRow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this PluginRow.  # noqa: E501


        :return: The active of this PluginRow.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PluginRow.


        :param active: The active of this PluginRow.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def help(self):
        """Gets the help of this PluginRow.  # noqa: E501


        :return: The help of this PluginRow.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this PluginRow.


        :param help: The help of this PluginRow.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def multiple(self):
        """Gets the multiple of this PluginRow.  # noqa: E501


        :return: The multiple of this PluginRow.  # noqa: E501
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this PluginRow.


        :param multiple: The multiple of this PluginRow.  # noqa: E501
        :type: bool
        """

        self._multiple = multiple

    @property
    def config_file(self):
        """Gets the config_file of this PluginRow.  # noqa: E501


        :return: The config_file of this PluginRow.  # noqa: E501
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file):
        """Sets the config_file of this PluginRow.


        :param config_file: The config_file of this PluginRow.  # noqa: E501
        :type: str
        """

        self._config_file = config_file

    @property
    def price(self):
        """Gets the price of this PluginRow.  # noqa: E501


        :return: The price of this PluginRow.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PluginRow.


        :param price: The price of this PluginRow.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def legacy_integration(self):
        """Gets the legacy_integration of this PluginRow.  # noqa: E501


        :return: The legacy_integration of this PluginRow.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_integration

    @legacy_integration.setter
    def legacy_integration(self, legacy_integration):
        """Sets the legacy_integration of this PluginRow.


        :param legacy_integration: The legacy_integration of this PluginRow.  # noqa: E501
        :type: bool
        """

        self._legacy_integration = legacy_integration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
