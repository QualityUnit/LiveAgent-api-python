# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from liveagent_api.configuration import Configuration


class AgentStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'departmentid': 'str',
        'online_status': 'str',
        'preset_status': 'str'
    }

    attribute_map = {
        'departmentid': 'departmentid',
        'online_status': 'online_status',
        'preset_status': 'preset_status'
    }

    def __init__(self, departmentid=None, online_status=None, preset_status=None, _configuration=None):  # noqa: E501
        """AgentStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._departmentid = None
        self._online_status = None
        self._preset_status = None
        self.discriminator = None

        if departmentid is not None:
            self.departmentid = departmentid
        if online_status is not None:
            self.online_status = online_status
        if preset_status is not None:
            self.preset_status = preset_status

    @property
    def departmentid(self):
        """Gets the departmentid of this AgentStatus.  # noqa: E501


        :return: The departmentid of this AgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._departmentid

    @departmentid.setter
    def departmentid(self, departmentid):
        """Sets the departmentid of this AgentStatus.


        :param departmentid: The departmentid of this AgentStatus.  # noqa: E501
        :type: str
        """

        self._departmentid = departmentid

    @property
    def online_status(self):
        """Gets the online_status of this AgentStatus.  # noqa: E501

        R - read<br> M - message<br> T - chat<br> P - phone  # noqa: E501

        :return: The online_status of this AgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._online_status

    @online_status.setter
    def online_status(self, online_status):
        """Sets the online_status of this AgentStatus.

        R - read<br> M - message<br> T - chat<br> P - phone  # noqa: E501

        :param online_status: The online_status of this AgentStatus.  # noqa: E501
        :type: str
        """

        self._online_status = online_status

    @property
    def preset_status(self):
        """Gets the preset_status of this AgentStatus.  # noqa: E501

        R - read<br> M - message<br> T - chat<br> P - phone  # noqa: E501

        :return: The preset_status of this AgentStatus.  # noqa: E501
        :rtype: str
        """
        return self._preset_status

    @preset_status.setter
    def preset_status(self, preset_status):
        """Sets the preset_status of this AgentStatus.

        R - read<br> M - message<br> T - chat<br> P - phone  # noqa: E501

        :param preset_status: The preset_status of this AgentStatus.  # noqa: E501
        :type: str
        """

        self._preset_status = preset_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentStatus):
            return True

        return self.to_dict() != other.to_dict()
