# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SlaHistory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SlaHistory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'sla_level_id': 'str',
            'sla_type': 'str',
            'date_created': 'str',
            'date_due': 'str',
            'date_closed': 'str',
            'total_time': 'int',
            'elapsed_time': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'sla_level_id': 'sla_level_id',
            'sla_type': 'sla_type',
            'date_created': 'date_created',
            'date_due': 'date_due',
            'date_closed': 'date_closed',
            'total_time': 'total_time',
            'elapsed_time': 'elapsed_time'
        }

        self._id = None
        self._sla_level_id = None
        self._sla_type = None
        self._date_created = None
        self._date_due = None
        self._date_closed = None
        self._total_time = None
        self._elapsed_time = None

    @property
    def id(self):
        """
        Gets the id of this SlaHistory.


        :return: The id of this SlaHistory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SlaHistory.


        :param id: The id of this SlaHistory.
        :type: str
        """
        self._id = id

    @property
    def sla_level_id(self):
        """
        Gets the sla_level_id of this SlaHistory.


        :return: The sla_level_id of this SlaHistory.
        :rtype: str
        """
        return self._sla_level_id

    @sla_level_id.setter
    def sla_level_id(self, sla_level_id):
        """
        Sets the sla_level_id of this SlaHistory.


        :param sla_level_id: The sla_level_id of this SlaHistory.
        :type: str
        """
        self._sla_level_id = sla_level_id

    @property
    def sla_type(self):
        """
        Gets the sla_type of this SlaHistory.


        :return: The sla_type of this SlaHistory.
        :rtype: str
        """
        return self._sla_type

    @sla_type.setter
    def sla_type(self, sla_type):
        """
        Sets the sla_type of this SlaHistory.


        :param sla_type: The sla_type of this SlaHistory.
        :type: str
        """
        self._sla_type = sla_type

    @property
    def date_created(self):
        """
        Gets the date_created of this SlaHistory.


        :return: The date_created of this SlaHistory.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this SlaHistory.


        :param date_created: The date_created of this SlaHistory.
        :type: str
        """
        self._date_created = date_created

    @property
    def date_due(self):
        """
        Gets the date_due of this SlaHistory.


        :return: The date_due of this SlaHistory.
        :rtype: str
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """
        Sets the date_due of this SlaHistory.


        :param date_due: The date_due of this SlaHistory.
        :type: str
        """
        self._date_due = date_due

    @property
    def date_closed(self):
        """
        Gets the date_closed of this SlaHistory.


        :return: The date_closed of this SlaHistory.
        :rtype: str
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed):
        """
        Sets the date_closed of this SlaHistory.


        :param date_closed: The date_closed of this SlaHistory.
        :type: str
        """
        self._date_closed = date_closed

    @property
    def total_time(self):
        """
        Gets the total_time of this SlaHistory.


        :return: The total_time of this SlaHistory.
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """
        Sets the total_time of this SlaHistory.


        :param total_time: The total_time of this SlaHistory.
        :type: int
        """
        self._total_time = total_time

    @property
    def elapsed_time(self):
        """
        Gets the elapsed_time of this SlaHistory.


        :return: The elapsed_time of this SlaHistory.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """
        Sets the elapsed_time of this SlaHistory.


        :param elapsed_time: The elapsed_time of this SlaHistory.
        :type: int
        """
        self._elapsed_time = elapsed_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

