# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HostingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_hosted': 'bool',
        'system': 'str'
    }

    attribute_map = {
        'is_hosted': 'is_hosted',
        'system': 'system'
    }

    def __init__(self, is_hosted=None, system=None):  # noqa: E501
        """HostingInfo - a model defined in Swagger"""  # noqa: E501

        self._is_hosted = None
        self._system = None
        self.discriminator = None

        if is_hosted is not None:
            self.is_hosted = is_hosted
        if system is not None:
            self.system = system

    @property
    def is_hosted(self):
        """Gets the is_hosted of this HostingInfo.  # noqa: E501


        :return: The is_hosted of this HostingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_hosted

    @is_hosted.setter
    def is_hosted(self, is_hosted):
        """Sets the is_hosted of this HostingInfo.


        :param is_hosted: The is_hosted of this HostingInfo.  # noqa: E501
        :type: bool
        """

        self._is_hosted = is_hosted

    @property
    def system(self):
        """Gets the system of this HostingInfo.  # noqa: E501


        :return: The system of this HostingInfo.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this HostingInfo.


        :param system: The system of this HostingInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["dp", "crm"]  # noqa: E501
        if system not in allowed_values:
            raise ValueError(
                "Invalid value for `system` ({0}), must be one of {1}"  # noqa: E501
                .format(system, allowed_values)
            )

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
