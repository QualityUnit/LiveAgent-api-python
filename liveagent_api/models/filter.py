# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Filter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_id': 'str',
        'name': 'str',
        'description': 'str',
        'filter_type': 'str',
        'user_id': 'str',
        'rtype': 'str',
        'is_public': 'bool',
        'user_ids': 'list[str]',
        'department_ids': 'list[str]',
        'conditions': 'list[FilterCondition]'
    }

    attribute_map = {
        'filter_id': 'filter_id',
        'name': 'name',
        'description': 'description',
        'filter_type': 'filter_type',
        'user_id': 'user_id',
        'rtype': 'rtype',
        'is_public': 'is_public',
        'user_ids': 'user_ids',
        'department_ids': 'department_ids',
        'conditions': 'conditions'
    }

    def __init__(self, filter_id=None, name=None, description=None, filter_type=None, user_id=None, rtype=None, is_public=False, user_ids=None, department_ids=None, conditions=None):  # noqa: E501
        """Filter - a model defined in Swagger"""  # noqa: E501

        self._filter_id = None
        self._name = None
        self._description = None
        self._filter_type = None
        self._user_id = None
        self._rtype = None
        self._is_public = None
        self._user_ids = None
        self._department_ids = None
        self._conditions = None
        self.discriminator = None

        if filter_id is not None:
            self.filter_id = filter_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if filter_type is not None:
            self.filter_type = filter_type
        if user_id is not None:
            self.user_id = user_id
        if rtype is not None:
            self.rtype = rtype
        if is_public is not None:
            self.is_public = is_public
        if user_ids is not None:
            self.user_ids = user_ids
        if department_ids is not None:
            self.department_ids = department_ids
        if conditions is not None:
            self.conditions = conditions

    @property
    def filter_id(self):
        """Gets the filter_id of this Filter.  # noqa: E501


        :return: The filter_id of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this Filter.


        :param filter_id: The filter_id of this Filter.  # noqa: E501
        :type: str
        """

        self._filter_id = filter_id

    @property
    def name(self):
        """Gets the name of this Filter.  # noqa: E501


        :return: The name of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Filter.


        :param name: The name of this Filter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Filter.  # noqa: E501


        :return: The description of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Filter.


        :param description: The description of this Filter.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filter_type(self):
        """Gets the filter_type of this Filter.  # noqa: E501


        :return: The filter_type of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this Filter.


        :param filter_type: The filter_type of this Filter.  # noqa: E501
        :type: str
        """

        self._filter_type = filter_type

    @property
    def user_id(self):
        """Gets the user_id of this Filter.  # noqa: E501


        :return: The user_id of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Filter.


        :param user_id: The user_id of this Filter.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def rtype(self):
        """Gets the rtype of this Filter.  # noqa: E501

        C - Custom, S - System, P - Preset  # noqa: E501

        :return: The rtype of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._rtype

    @rtype.setter
    def rtype(self, rtype):
        """Sets the rtype of this Filter.

        C - Custom, S - System, P - Preset  # noqa: E501

        :param rtype: The rtype of this Filter.  # noqa: E501
        :type: str
        """
        allowed_values = ["C", "S", "P"]  # noqa: E501
        if rtype not in allowed_values:
            raise ValueError(
                "Invalid value for `rtype` ({0}), must be one of {1}"  # noqa: E501
                .format(rtype, allowed_values)
            )

        self._rtype = rtype

    @property
    def is_public(self):
        """Gets the is_public of this Filter.  # noqa: E501


        :return: The is_public of this Filter.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Filter.


        :param is_public: The is_public of this Filter.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def user_ids(self):
        """Gets the user_ids of this Filter.  # noqa: E501


        :return: The user_ids of this Filter.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this Filter.


        :param user_ids: The user_ids of this Filter.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    @property
    def department_ids(self):
        """Gets the department_ids of this Filter.  # noqa: E501


        :return: The department_ids of this Filter.  # noqa: E501
        :rtype: list[str]
        """
        return self._department_ids

    @department_ids.setter
    def department_ids(self, department_ids):
        """Sets the department_ids of this Filter.


        :param department_ids: The department_ids of this Filter.  # noqa: E501
        :type: list[str]
        """

        self._department_ids = department_ids

    @property
    def conditions(self):
        """Gets the conditions of this Filter.  # noqa: E501


        :return: The conditions of this Filter.  # noqa: E501
        :rtype: list[FilterCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Filter.


        :param conditions: The conditions of this Filter.  # noqa: E501
        :type: list[FilterCondition]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Filter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
