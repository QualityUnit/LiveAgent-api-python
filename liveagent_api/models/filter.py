# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Filter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Filter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'filter_id': 'str',
            'name': 'str',
            'description': 'str',
            'filter_type': 'str',
            'user_id': 'str',
            'rtype': 'str',
            'availability': 'str',
            'conditions': 'list[FilterCondition]'
        }

        self.attribute_map = {
            'filter_id': 'filter_id',
            'name': 'name',
            'description': 'description',
            'filter_type': 'filter_type',
            'user_id': 'user_id',
            'rtype': 'rtype',
            'availability': 'availability',
            'conditions': 'conditions'
        }

        self._filter_id = None
        self._name = None
        self._description = None
        self._filter_type = None
        self._user_id = None
        self._rtype = None
        self._availability = None
        self._conditions = None

    @property
    def filter_id(self):
        """
        Gets the filter_id of this Filter.


        :return: The filter_id of this Filter.
        :rtype: str
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """
        Sets the filter_id of this Filter.


        :param filter_id: The filter_id of this Filter.
        :type: str
        """
        self._filter_id = filter_id

    @property
    def name(self):
        """
        Gets the name of this Filter.


        :return: The name of this Filter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Filter.


        :param name: The name of this Filter.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Filter.


        :return: The description of this Filter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Filter.


        :param description: The description of this Filter.
        :type: str
        """
        self._description = description

    @property
    def filter_type(self):
        """
        Gets the filter_type of this Filter.


        :return: The filter_type of this Filter.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """
        Sets the filter_type of this Filter.


        :param filter_type: The filter_type of this Filter.
        :type: str
        """
        self._filter_type = filter_type

    @property
    def user_id(self):
        """
        Gets the user_id of this Filter.


        :return: The user_id of this Filter.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Filter.


        :param user_id: The user_id of this Filter.
        :type: str
        """
        self._user_id = user_id

    @property
    def rtype(self):
        """
        Gets the rtype of this Filter.
        C - Custom, S - System, P - Preset

        :return: The rtype of this Filter.
        :rtype: str
        """
        return self._rtype

    @rtype.setter
    def rtype(self, rtype):
        """
        Sets the rtype of this Filter.
        C - Custom, S - System, P - Preset

        :param rtype: The rtype of this Filter.
        :type: str
        """
        allowed_values = ["C", "S", "P"]
        if rtype not in allowed_values:
            raise ValueError(
                "Invalid value for `rtype`, must be one of {0}"
                .format(allowed_values)
            )
        self._rtype = rtype

    @property
    def availability(self):
        """
        Gets the availability of this Filter.


        :return: The availability of this Filter.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this Filter.


        :param availability: The availability of this Filter.
        :type: str
        """
        self._availability = availability

    @property
    def conditions(self):
        """
        Gets the conditions of this Filter.


        :return: The conditions of this Filter.
        :rtype: list[FilterCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this Filter.


        :param conditions: The conditions of this Filter.
        :type: list[FilterCondition]
        """
        self._conditions = conditions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

