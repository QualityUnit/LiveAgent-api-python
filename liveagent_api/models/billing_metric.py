# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.ladesk.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.ladesk.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BillingMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'amount_in_price': 'int',
        'limit': 'int',
        'unit_price': 'int',
        'unit_size': 'int'
    }

    attribute_map = {
        'name': 'name',
        'amount_in_price': 'amount_in_price',
        'limit': 'limit',
        'unit_price': 'unit_price',
        'unit_size': 'unit_size'
    }

    def __init__(self, name=None, amount_in_price=None, limit=None, unit_price=None, unit_size=None):  # noqa: E501
        """BillingMetric - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._amount_in_price = None
        self._limit = None
        self._unit_price = None
        self._unit_size = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if amount_in_price is not None:
            self.amount_in_price = amount_in_price
        if limit is not None:
            self.limit = limit
        if unit_price is not None:
            self.unit_price = unit_price
        if unit_size is not None:
            self.unit_size = unit_size

    @property
    def name(self):
        """Gets the name of this BillingMetric.  # noqa: E501


        :return: The name of this BillingMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillingMetric.


        :param name: The name of this BillingMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def amount_in_price(self):
        """Gets the amount_in_price of this BillingMetric.  # noqa: E501


        :return: The amount_in_price of this BillingMetric.  # noqa: E501
        :rtype: int
        """
        return self._amount_in_price

    @amount_in_price.setter
    def amount_in_price(self, amount_in_price):
        """Sets the amount_in_price of this BillingMetric.


        :param amount_in_price: The amount_in_price of this BillingMetric.  # noqa: E501
        :type: int
        """

        self._amount_in_price = amount_in_price

    @property
    def limit(self):
        """Gets the limit of this BillingMetric.  # noqa: E501


        :return: The limit of this BillingMetric.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this BillingMetric.


        :param limit: The limit of this BillingMetric.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def unit_price(self):
        """Gets the unit_price of this BillingMetric.  # noqa: E501


        :return: The unit_price of this BillingMetric.  # noqa: E501
        :rtype: int
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this BillingMetric.


        :param unit_price: The unit_price of this BillingMetric.  # noqa: E501
        :type: int
        """

        self._unit_price = unit_price

    @property
    def unit_size(self):
        """Gets the unit_size of this BillingMetric.  # noqa: E501


        :return: The unit_size of this BillingMetric.  # noqa: E501
        :rtype: int
        """
        return self._unit_size

    @unit_size.setter
    def unit_size(self, unit_size):
        """Sets the unit_size of this BillingMetric.


        :param unit_size: The unit_size of this BillingMetric.  # noqa: E501
        :type: int
        """

        self._unit_size = unit_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
