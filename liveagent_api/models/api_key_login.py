# coding: utf-8

"""
    LiveAgent API

    LiveAgent API  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiKeyLogin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login': 'str',
        'password': 'str',
        'two_factor_token': 'str',
        'valid_to_date': 'datetime',
        'name': 'str',
        'type': 'str',
        'installid': 'str',
        'whitelist': 'str'
    }

    attribute_map = {
        'login': 'login',
        'password': 'password',
        'two_factor_token': 'two_factor_token',
        'valid_to_date': 'valid_to_date',
        'name': 'name',
        'type': 'type',
        'installid': 'installid',
        'whitelist': 'whitelist'
    }

    def __init__(self, login=None, password=None, two_factor_token=None, valid_to_date=None, name=None, type=None, installid=None, whitelist='*'):  # noqa: E501
        """ApiKeyLogin - a model defined in Swagger"""  # noqa: E501

        self._login = None
        self._password = None
        self._two_factor_token = None
        self._valid_to_date = None
        self._name = None
        self._type = None
        self._installid = None
        self._whitelist = None
        self.discriminator = None

        self.login = login
        self.password = password
        if two_factor_token is not None:
            self.two_factor_token = two_factor_token
        if valid_to_date is not None:
            self.valid_to_date = valid_to_date
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if installid is not None:
            self.installid = installid
        if whitelist is not None:
            self.whitelist = whitelist

    @property
    def login(self):
        """Gets the login of this ApiKeyLogin.  # noqa: E501


        :return: The login of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ApiKeyLogin.


        :param login: The login of this ApiKeyLogin.  # noqa: E501
        :type: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def password(self):
        """Gets the password of this ApiKeyLogin.  # noqa: E501


        :return: The password of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiKeyLogin.


        :param password: The password of this ApiKeyLogin.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def two_factor_token(self):
        """Gets the two_factor_token of this ApiKeyLogin.  # noqa: E501


        :return: The two_factor_token of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._two_factor_token

    @two_factor_token.setter
    def two_factor_token(self, two_factor_token):
        """Sets the two_factor_token of this ApiKeyLogin.


        :param two_factor_token: The two_factor_token of this ApiKeyLogin.  # noqa: E501
        :type: str
        """

        self._two_factor_token = two_factor_token

    @property
    def valid_to_date(self):
        """Gets the valid_to_date of this ApiKeyLogin.  # noqa: E501


        :return: The valid_to_date of this ApiKeyLogin.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to_date

    @valid_to_date.setter
    def valid_to_date(self, valid_to_date):
        """Sets the valid_to_date of this ApiKeyLogin.


        :param valid_to_date: The valid_to_date of this ApiKeyLogin.  # noqa: E501
        :type: datetime
        """

        self._valid_to_date = valid_to_date

    @property
    def name(self):
        """Gets the name of this ApiKeyLogin.  # noqa: E501


        :return: The name of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyLogin.


        :param name: The name of this ApiKeyLogin.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ApiKeyLogin.  # noqa: E501

        - A - API (default) - C - Chat - P - Phone - T - Ticket - W - Web (Agent Panel)  # noqa: E501

        :return: The type of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiKeyLogin.

        - A - API (default) - C - Chat - P - Phone - T - Ticket - W - Web (Agent Panel)  # noqa: E501

        :param type: The type of this ApiKeyLogin.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "C", "P", "T", "W"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def installid(self):
        """Gets the installid of this ApiKeyLogin.  # noqa: E501


        :return: The installid of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._installid

    @installid.setter
    def installid(self, installid):
        """Sets the installid of this ApiKeyLogin.


        :param installid: The installid of this ApiKeyLogin.  # noqa: E501
        :type: str
        """

        self._installid = installid

    @property
    def whitelist(self):
        """Gets the whitelist of this ApiKeyLogin.  # noqa: E501


        :return: The whitelist of this ApiKeyLogin.  # noqa: E501
        :rtype: str
        """
        return self._whitelist

    @whitelist.setter
    def whitelist(self, whitelist):
        """Sets the whitelist of this ApiKeyLogin.


        :param whitelist: The whitelist of this ApiKeyLogin.  # noqa: E501
        :type: str
        """

        self._whitelist = whitelist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiKeyLogin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyLogin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
