# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from liveagent_api.api_client import ApiClient


class TicketsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_ticket(self, **kwargs):  # noqa: E501
        """Create ticket  # noqa: E501

        Create new ticket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ticket(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TicketListItem ticket:
        :return: TicketInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ticket_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ticket_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ticket_with_http_info(self, **kwargs):  # noqa: E501
        """Create ticket  # noqa: E501

        Create new ticket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ticket_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TicketListItem ticket:
        :return: TicketInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ticket" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ticket' in params:
            body_params = params['ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ticket(self, ticket_id, **kwargs):  # noqa: E501
        """Deletes ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ticket(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def delete_ticket_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Deletes ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ticket_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `delete_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def get_ticket_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_attribute(self, ticket_id, attribute_name, **kwargs):  # noqa: E501
        """Gets ticket attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_attribute(ticket_id, attribute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param str attribute_name: (required)
        :return: TicketAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_attribute_with_http_info(ticket_id, attribute_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_attribute_with_http_info(ticket_id, attribute_name, **kwargs)  # noqa: E501
            return data

    def get_ticket_attribute_with_http_info(self, ticket_id, attribute_name, **kwargs):  # noqa: E501
        """Gets ticket attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_attribute_with_http_info(ticket_id, attribute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param str attribute_name: (required)
        :return: TicketAttribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'attribute_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket_attribute`")  # noqa: E501
        # verify the required parameter 'attribute_name' is set
        if self.api_client.client_side_validation and ('attribute_name' not in params or
                                                       params['attribute_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attribute_name` when calling `get_ticket_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501
        if 'attribute_name' in params:
            path_params['attributeName'] = params['attribute_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/attributes/{attributeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketAttribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_history(self, **kwargs):  # noqa: E501
        """Gets ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int per_page: Results per page.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param str cursor: used for iteration through resultset. Cursor identifies specific page in resultset.
        :param str sort_field:
        :param int timezone_offset: difference between client and server time in seconds
        :return: list[TicketHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ticket_history_with_http_info(self, **kwargs):  # noqa: E501
        """Gets ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int per_page: Results per page.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param str cursor: used for iteration through resultset. Cursor identifies specific page in resultset.
        :param str sort_field:
        :param int timezone_offset: difference between client and server time in seconds
        :return: list[TicketHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['per_page', 'sort_dir', 'filters', 'cursor', 'sort_field', 'timezone_offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'per_page' in params:
            query_params.append(('_perPage', params['per_page']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('_sortDir', params['sort_dir']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('_cursor', params['cursor']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('_sortField', params['sort_field']))  # noqa: E501

        header_params = {}
        if 'timezone_offset' in params:
            header_params['Timezone-Offset'] = params['timezone_offset']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TicketHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_history_0(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history_0(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: list[TicketHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_history_0_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_history_0_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def get_ticket_history_0_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history_0_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: list[TicketHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_history_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket_history_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TicketHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_history_count(self, **kwargs):  # noqa: E501
        """Gets count for ticket history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: Count
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_history_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_history_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ticket_history_count_with_http_info(self, **kwargs):  # noqa: E501
        """Gets count for ticket history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_history_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: Count
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_history_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/history/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Count',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_message_groups(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket message groups and messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_message_groups(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param bool include_quoted_messages: If set, response will include quoted messages context, otherwise - only metadata.
        :param int page: Page to display. Not used if _from is defined.
        :param int per_page: Results per page. Used only if _page is used.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str sort_field: Sorting field
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param int _from: Result set start. Takes precedence over _page.
        :param int to: Result set end. Used only if _from is used.
        :return: list[MessageGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_message_groups_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_message_groups_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def get_ticket_message_groups_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket message groups and messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_message_groups_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param bool include_quoted_messages: If set, response will include quoted messages context, otherwise - only metadata.
        :param int page: Page to display. Not used if _from is defined.
        :param int per_page: Results per page. Used only if _page is used.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str sort_field: Sorting field
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param int _from: Result set start. Takes precedence over _page.
        :param int to: Result set end. Used only if _from is used.
        :return: list[MessageGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'include_quoted_messages', 'page', 'per_page', 'sort_dir', 'sort_field', 'filters', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_message_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket_message_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []
        if 'include_quoted_messages' in params:
            query_params.append(('includeQuotedMessages', params['include_quoted_messages']))  # noqa: E501
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('_perPage', params['per_page']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('_sortDir', params['sort_dir']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('_sortField', params['sort_field']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501
        if '_from' in params:
            query_params.append(('_from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('_to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ticket_sla(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket Sla  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_sla(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: TicketSla
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ticket_sla_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ticket_sla_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def get_ticket_sla_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Gets ticket Sla  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ticket_sla_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :return: TicketSla
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ticket_sla" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `get_ticket_sla`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/sla', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TicketSla',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tickets_list(self, **kwargs):  # noqa: E501
        """Gets list of tickets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tickets_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page to display. Not used if _from is defined.
        :param int per_page: Results per page. Used only if _page is used.
        :param int _from: Result set start. Takes precedence over _page.
        :param int to: Result set end. Used only if _from is used.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str sort_field: Sorting field
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tickets_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tickets_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tickets_list_with_http_info(self, **kwargs):  # noqa: E501
        """Gets list of tickets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tickets_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page to display. Not used if _from is defined.
        :param int per_page: Results per page. Used only if _page is used.
        :param int _from: Result set start. Takes precedence over _page.
        :param int to: Result set end. Used only if _from is used.
        :param str sort_dir: Sorting direction ASC or DESC
        :param str sort_field: Sorting field
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: list[Ticket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page', '_from', 'to', 'sort_dir', 'sort_field', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tickets_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('_page', params['page']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('_perPage', params['per_page']))  # noqa: E501
        if '_from' in params:
            query_params.append(('_from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('_to', params['to']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('_sortDir', params['sort_dir']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('_sortField', params['sort_field']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Ticket]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_ticket_attribute(self, ticket_id, attribute_name, value, **kwargs):  # noqa: E501
        """Sets ticket attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_attribute(ticket_id, attribute_name, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param str attribute_name: (required)
        :param str value: New attribute value (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_ticket_attribute_with_http_info(ticket_id, attribute_name, value, **kwargs)  # noqa: E501
        else:
            (data) = self.set_ticket_attribute_with_http_info(ticket_id, attribute_name, value, **kwargs)  # noqa: E501
            return data

    def set_ticket_attribute_with_http_info(self, ticket_id, attribute_name, value, **kwargs):  # noqa: E501
        """Sets ticket attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_attribute_with_http_info(ticket_id, attribute_name, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param str attribute_name: (required)
        :param str value: New attribute value (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'attribute_name', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_ticket_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `set_ticket_attribute`")  # noqa: E501
        # verify the required parameter 'attribute_name' is set
        if self.api_client.client_side_validation and ('attribute_name' not in params or
                                                       params['attribute_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attribute_name` when calling `set_ticket_attribute`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `set_ticket_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501
        if 'attribute_name' in params:
            path_params['attributeName'] = params['attribute_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'value' in params:
            form_params.append(('value', params['value']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/attributes/{attributeName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_ticket_postpone(self, ticket_id, **kwargs):  # noqa: E501
        """Sets postpone status to ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_postpone(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param TicketPostpone postpone_data:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_ticket_postpone_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_ticket_postpone_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def set_ticket_postpone_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Sets postpone status to ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_postpone_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param TicketPostpone postpone_data:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'postpone_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_ticket_postpone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `set_ticket_postpone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'postpone_data' in params:
            body_params = params['postpone_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}/postpone', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ticket(self, ticket_id, **kwargs):  # noqa: E501
        """Updates ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ticket(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param TicketUpdatable ticket:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ticket_with_http_info(ticket_id, **kwargs)  # noqa: E501
            return data

    def update_ticket_with_http_info(self, ticket_id, **kwargs):  # noqa: E501
        """Updates ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ticket_with_http_info(ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticket_id: (required)
        :param TicketUpdatable ticket:
        :return: Ticket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticket_id', 'ticket']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ticket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `update_ticket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticket_id' in params:
            path_params['ticketId'] = params['ticket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ticket' in params:
            body_params = params['ticket']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/tickets/{ticketId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ticket',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
