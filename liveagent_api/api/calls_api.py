# coding: utf-8

"""
    LiveAgent API

    This page contains complete API documentation for LiveAgent software. To display additional info and examples for specific API method, just click on the method name in the list below.<br/><br/>To be able to make API requests you need to generate an API key in your admin panel first. [See this article for detailed info.](https://support.liveagent.com/741982-API-key)<br/><br/>Additional info about more advanced agent, contact or ticket API filters can be found [in this article](https://support.liveagent.com/513528-APIv3-advanced-filter-examples).<br/><br/>If you have any question or doubts regarding this API, please do not hesitate to contact our support team.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: support@qualityunit.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from liveagent_api.api_client import ApiClient


class CallsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def call_add_message(self, call_id, **kwargs):  # noqa: E501
        """Adds a message to the call group in corresponding ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_add_message(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param CallMessage body:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_add_message_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_add_message_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_add_message_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Adds a message to the call group in corresponding ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_add_message_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param CallMessage body:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_add_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_add_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/messages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_add_recording(self, call_id, **kwargs):  # noqa: E501
        """Adds a recording to the call group in corresponding ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_add_recording(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param file file:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_add_recording_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_add_recording_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_add_recording_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Adds a recording to the call group in corresponding ticket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_add_recording_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param file file:
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_add_recording" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_add_recording`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/recordings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_answer(self, call_id, to_number, **kwargs):  # noqa: E501
        """Set call as answered by agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_answer(call_id, to_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number (required)
        :param str channel_id: Channel ID
        :param str type: F - incoming call forwarded to external number
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_answer_with_http_info(call_id, to_number, **kwargs)  # noqa: E501
        else:
            (data) = self.call_answer_with_http_info(call_id, to_number, **kwargs)  # noqa: E501
            return data

    def call_answer_with_http_info(self, call_id, to_number, **kwargs):  # noqa: E501
        """Set call as answered by agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_answer_with_http_info(call_id, to_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number (required)
        :param str channel_id: Channel ID
        :param str type: F - incoming call forwarded to external number
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'channel_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_answer`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_answer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'channel_id' in params:
            query_params.append(('channelId', params['channel_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_answer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_blind_transfer(self, call_id, to_number, channel_id, **kwargs):  # noqa: E501
        """Transfers call to different department / agent  # noqa: E501

        Blind transfer can be called on active calls to transfer them to another pnone device or extension number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_blind_transfer(call_id, to_number, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: Phone device or extension number (required)
        :param str channel_id: Channel ID that initiated the transfer (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_blind_transfer_with_http_info(call_id, to_number, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_blind_transfer_with_http_info(call_id, to_number, channel_id, **kwargs)  # noqa: E501
            return data

    def call_blind_transfer_with_http_info(self, call_id, to_number, channel_id, **kwargs):  # noqa: E501
        """Transfers call to different department / agent  # noqa: E501

        Blind transfer can be called on active calls to transfer them to another pnone device or extension number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_blind_transfer_with_http_info(call_id, to_number, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: Phone device or extension number (required)
        :param str channel_id: Channel ID that initiated the transfer (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_blind_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_blind_transfer`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_blind_transfer`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_blind_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'channel_id' in params:
            query_params.append(('channelId', params['channel_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_blind_transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_change_channel_status(self, call_id, channel_id, status, **kwargs):  # noqa: E501
        """Change channel status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_change_channel_status(call_id, channel_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str status: run (\"R\" - default), hold (\"H\") (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_change_channel_status_with_http_info(call_id, channel_id, status, **kwargs)  # noqa: E501
        else:
            (data) = self.call_change_channel_status_with_http_info(call_id, channel_id, status, **kwargs)  # noqa: E501
            return data

    def call_change_channel_status_with_http_info(self, call_id, channel_id, status, **kwargs):  # noqa: E501
        """Change channel status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_change_channel_status_with_http_info(call_id, channel_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str status: run (\"R\" - default), hold (\"H\") (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_change_channel_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_change_channel_status`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_change_channel_status`")  # noqa: E501
        # verify the required parameter 'status' is set
        if self.api_client.client_side_validation and ('status' not in params or
                                                       params['status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `status` when calling `call_change_channel_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_create(self, call_id, to_number, from_number, **kwargs):  # noqa: E501
        """Create new call  # noqa: E501

        Creates new call (incoming / outgoing / internal). Does not initiate the outgoing call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_create(call_id, to_number, from_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number (required)
        :param str from_number: caller number (required)
        :param str channel_id: Channel ID
        :param str via_number: trunk number via which call was made / received
        :param str ticket_id: ticket id or code
        :param str direction: incoming call ('in' - default), outgoing call ('out'), internal call('int'), auto decide direction of call based on to_number ('auto')
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_create_with_http_info(call_id, to_number, from_number, **kwargs)  # noqa: E501
        else:
            (data) = self.call_create_with_http_info(call_id, to_number, from_number, **kwargs)  # noqa: E501
            return data

    def call_create_with_http_info(self, call_id, to_number, from_number, **kwargs):  # noqa: E501
        """Create new call  # noqa: E501

        Creates new call (incoming / outgoing / internal). Does not initiate the outgoing call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_create_with_http_info(call_id, to_number, from_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number (required)
        :param str from_number: caller number (required)
        :param str channel_id: Channel ID
        :param str via_number: trunk number via which call was made / received
        :param str ticket_id: ticket id or code
        :param str direction: incoming call ('in' - default), outgoing call ('out'), internal call('int'), auto decide direction of call based on to_number ('auto')
        :return: Call
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'from_number', 'channel_id', 'via_number', 'ticket_id', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_create`")  # noqa: E501
        # verify the required parameter 'from_number' is set
        if self.api_client.client_side_validation and ('from_number' not in params or
                                                       params['from_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_number` when calling `call_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'channel_id' in params:
            query_params.append(('channelId', params['channel_id']))  # noqa: E501
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'via_number' in params:
            query_params.append(('via_number', params['via_number']))  # noqa: E501
        if 'from_number' in params:
            query_params.append(('from_number', params['from_number']))  # noqa: E501
        if 'ticket_id' in params:
            query_params.append(('ticketId', params['ticket_id']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Call',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_fetch_ivr(self, call_id, fetch, **kwargs):  # noqa: E501
        """Fetches IVR for the call from external URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_fetch_ivr(call_id, fetch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param IvrFetch fetch: (required)
        :return: list[Ivr]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_fetch_ivr_with_http_info(call_id, fetch, **kwargs)  # noqa: E501
        else:
            (data) = self.call_fetch_ivr_with_http_info(call_id, fetch, **kwargs)  # noqa: E501
            return data

    def call_fetch_ivr_with_http_info(self, call_id, fetch, **kwargs):  # noqa: E501
        """Fetches IVR for the call from external URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_fetch_ivr_with_http_info(call_id, fetch, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param IvrFetch fetch: (required)
        :return: list[Ivr]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'fetch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_fetch_ivr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_fetch_ivr`")  # noqa: E501
        # verify the required parameter 'fetch' is set
        if self.api_client.client_side_validation and ('fetch' not in params or
                                                       params['fetch'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fetch` when calling `call_fetch_ivr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fetch' in params:
            body_params = params['fetch']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_fetchIvr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Ivr]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_get_status(self, call_id, **kwargs):  # noqa: E501
        """Return the status of call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_get_status(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param list[str] unreachable_agents: Identifiers of unreachable agents that should be excluded from routing
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_get_status_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_get_status_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_get_status_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Return the status of call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_get_status_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param list[str] unreachable_agents: Identifiers of unreachable agents that should be excluded from routing
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'unreachable_agents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_get_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_get_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'unreachable_agents' in params:
            query_params.append(('unreachableAgents', params['unreachable_agents']))  # noqa: E501
            collection_formats['unreachableAgents'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_id(self, channel_id, **kwargs):  # noqa: E501
        """Return the call ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_id(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channel_id: (required)
        :return: CallId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_id_with_http_info(channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_id_with_http_info(channel_id, **kwargs)  # noqa: E501
            return data

    def call_id_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """Return the call ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_id_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channel_id: (required)
        :return: CallId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/channels/{channelId}/call_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_move_channel(self, call_id, channel_id, to_call_id, **kwargs):  # noqa: E501
        """Moves existing channel to target call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_move_channel(call_id, channel_id, to_call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str to_call_id: Target call (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_move_channel_with_http_info(call_id, channel_id, to_call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_move_channel_with_http_info(call_id, channel_id, to_call_id, **kwargs)  # noqa: E501
            return data

    def call_move_channel_with_http_info(self, call_id, channel_id, to_call_id, **kwargs):  # noqa: E501
        """Moves existing channel to target call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_move_channel_with_http_info(call_id, channel_id, to_call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str to_call_id: Target call (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id', 'to_call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_move_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_move_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_move_channel`")  # noqa: E501
        # verify the required parameter 'to_call_id' is set
        if self.api_client.client_side_validation and ('to_call_id' not in params or
                                                       params['to_call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_call_id` when calling `call_move_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []
        if 'to_call_id' in params:
            query_params.append(('to_callId', params['to_call_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_pickup(self, **kwargs):  # noqa: E501
        """Pick up call from queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_pickup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_pickup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.call_pickup_with_http_info(**kwargs)  # noqa: E501
            return data

    def call_pickup_with_http_info(self, **kwargs):  # noqa: E501
        """Pick up call from queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_pickup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_pickup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/_pickup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_remove_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Removes channel from the call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_remove_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_remove_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_remove_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def call_remove_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Removes channel from the call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_remove_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_remove_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_remove_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `call_remove_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_reroute(self, call_id, **kwargs):  # noqa: E501
        """Let the call ring to another agent  # noqa: E501

        Lets the call ring to an another agent if available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_reroute(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str reason: T - timeout, D - decline, DNR - device not registered, CHE - channel error
        :param list[str] unreachable_agents: Identifiers of unreachable agents that should be excluded from routing
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_reroute_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_reroute_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_reroute_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Let the call ring to another agent  # noqa: E501

        Lets the call ring to an another agent if available  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_reroute_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str reason: T - timeout, D - decline, DNR - device not registered, CHE - channel error
        :param list[str] unreachable_agents: Identifiers of unreachable agents that should be excluded from routing
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'reason', 'unreachable_agents']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_reroute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_reroute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'unreachable_agents' in params:
            query_params.append(('unreachableAgents', params['unreachable_agents']))  # noqa: E501
            collection_formats['unreachableAgents'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_reroute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_ring(self, call_id, **kwargs):  # noqa: E501
        """Let the call ring  # noqa: E501

        Lets the call ring to an agent or adds it to queue if all agents are busy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_ring(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str department_id: Department ID
        :param str to_number: callee number
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_ring_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_ring_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_ring_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Let the call ring  # noqa: E501

        Lets the call ring to an agent or adds it to queue if all agents are busy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_ring_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str department_id: Department ID
        :param str to_number: callee number
        :return: CallStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'department_id', 'to_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_ring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_ring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'department_id' in params:
            query_params.append(('departmentId', params['department_id']))  # noqa: E501
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_ring', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_start(self, to_number, ticket_id, **kwargs):  # noqa: E501
        """Starts new outcoming / internal call  # noqa: E501

        Starts a new call by ringing the agent and dialing the customer after the agent has picked up the call   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start(to_number, ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_number: callee number (required)
        :param str ticket_id: ticket id or code (required)
        :param str via_number: trunk number via which call was made
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_start_with_http_info(to_number, ticket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_start_with_http_info(to_number, ticket_id, **kwargs)  # noqa: E501
            return data

    def call_start_with_http_info(self, to_number, ticket_id, **kwargs):  # noqa: E501
        """Starts new outcoming / internal call  # noqa: E501

        Starts a new call by ringing the agent and dialing the customer after the agent has picked up the call   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start_with_http_info(to_number, ticket_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_number: callee number (required)
        :param str ticket_id: ticket id or code (required)
        :param str via_number: trunk number via which call was made
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_number', 'ticket_id', 'via_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_number' is set
        if self.api_client.client_side_validation and ('to_number' not in params or
                                                       params['to_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_number` when calling `call_start`")  # noqa: E501
        # verify the required parameter 'ticket_id' is set
        if self.api_client.client_side_validation and ('ticket_id' not in params or
                                                       params['ticket_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ticket_id` when calling `call_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'via_number' in params:
            query_params.append(('via_number', params['via_number']))  # noqa: E501
        if 'ticket_id' in params:
            query_params.append(('ticketId', params['ticket_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/call/_start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_start_canceled(self, call_id, **kwargs):  # noqa: E501
        """Callback that starting call canceled  # noqa: E501

        Callback is delivered only of HW phones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start_canceled(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: Call ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_start_canceled_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_start_canceled_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_start_canceled_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Callback that starting call canceled  # noqa: E501

        Callback is delivered only of HW phones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start_canceled_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: Call ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_start_canceled" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_start_canceled`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_id' in params:
            query_params.append(('callId', params['call_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/call/_startCanceled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_start_failed(self, call_id, **kwargs):  # noqa: E501
        """Callback that starting call failed  # noqa: E501

        Callback is delivered only of HW phones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start_failed(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: Call ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_start_failed_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_start_failed_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_start_failed_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Callback that starting call failed  # noqa: E501

        Callback is delivered only of HW phones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_start_failed_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: Call ID (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_start_failed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_start_failed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_id' in params:
            query_params.append(('callId', params['call_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/call/_startFailed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_stop(self, call_id, **kwargs):  # noqa: E501
        """Stops the call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_stop(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str from_number: from number
        :param str channel_id: channel hung up the call
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_stop_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_stop_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_stop_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Stops the call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_stop_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str from_number: from number
        :param str channel_id: channel hung up the call
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'from_number', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_stop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'from_number' in params:
            query_params.append(('from_number', params['from_number']))  # noqa: E501
        if 'channel_id' in params:
            query_params.append(('channelId', params['channel_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def call_transfer(self, call_id, **kwargs):  # noqa: E501
        """Transfers call to different department / agent  # noqa: E501

        Transfer can be called on incoming calls before they start ringing to agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to: Department ID or extension
        :return: CallTransferResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.call_transfer_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.call_transfer_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def call_transfer_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Transfers call to different department / agent  # noqa: E501

        Transfer can be called on incoming calls before they start ringing to agents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.call_transfer_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to: Department ID or extension
        :return: CallTransferResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method call_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `call_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CallTransferResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def confirm_ring(self, call_id, **kwargs):  # noqa: E501
        """Confirm that call is ringing  # noqa: E501

        Confirms that the call is ringing to an agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_ring(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number
        :param str channel_id: Channel ID
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.confirm_ring_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.confirm_ring_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def confirm_ring_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Confirm that call is ringing  # noqa: E501

        Confirms that the call is ringing to an agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.confirm_ring_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str to_number: callee number
        :param str channel_id: Channel ID
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'to_number', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirm_ring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `confirm_ring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []
        if 'to_number' in params:
            query_params.append(('to_number', params['to_number']))  # noqa: E501
        if 'channel_id' in params:
            query_params.append(('channelId', params['channel_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_confirmRing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dtmf_channel(self, call_id, channel_id, dtmf, **kwargs):  # noqa: E501
        """Send provided DTMF to channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dtmf_channel(call_id, channel_id, dtmf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str dtmf: DTMF To send (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dtmf_channel_with_http_info(call_id, channel_id, dtmf, **kwargs)  # noqa: E501
        else:
            (data) = self.dtmf_channel_with_http_info(call_id, channel_id, dtmf, **kwargs)  # noqa: E501
            return data

    def dtmf_channel_with_http_info(self, call_id, channel_id, dtmf, **kwargs):  # noqa: E501
        """Send provided DTMF to channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dtmf_channel_with_http_info(call_id, channel_id, dtmf, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :param str dtmf: DTMF To send (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id', 'dtmf']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dtmf_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `dtmf_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `dtmf_channel`")  # noqa: E501
        # verify the required parameter 'dtmf' is set
        if self.api_client.client_side_validation and ('dtmf' not in params or
                                                       params['dtmf'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dtmf` when calling `dtmf_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []
        if 'dtmf' in params:
            query_params.append(('dtmf', params['dtmf']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_dtmf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def end_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """End channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.end_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.end_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def end_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """End channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method end_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `end_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `end_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_end', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calls_count(self, **kwargs):  # noqa: E501
        """Gets count for calls history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: Count
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calls_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_calls_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_calls_count_with_http_info(self, **kwargs):  # noqa: E501
        """Gets count for calls history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :return: Count
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calls_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Count',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calls_list(self, **kwargs):  # noqa: E501
        """Gets list of calls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int per_page: Results per page.
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param str cursor: used for iteration through resultset. Cursor identifies specific page in resultset.
        :param str sort_field:
        :param str sort_dir: Sorting direction ASC or DESC
        :param int timezone_offset: difference between client and server time in seconds
        :return: list[CallListItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calls_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_calls_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_calls_list_with_http_info(self, **kwargs):  # noqa: E501
        """Gets list of calls  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int per_page: Results per page.
        :param str filters: Filter as json object {\"column1\":\"value\", \"column2\":\"value\", ...} or list of filters as json array [[\"column\",\"operator\",\"value\"], ...]
        :param str cursor: used for iteration through resultset. Cursor identifies specific page in resultset.
        :param str sort_field:
        :param str sort_dir: Sorting direction ASC or DESC
        :param int timezone_offset: difference between client and server time in seconds
        :return: list[CallListItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['per_page', 'filters', 'cursor', 'sort_field', 'sort_dir', 'timezone_offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calls_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'per_page' in params:
            query_params.append(('_perPage', params['per_page']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('_filters', params['filters']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('_cursor', params['cursor']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('_sortField', params['sort_field']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('_sortDir', params['sort_dir']))  # noqa: E501

        header_params = {}
        if 'timezone_offset' in params:
            header_params['Timezone-Offset'] = params['timezone_offset']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CallListItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hold_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Hold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.hold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def hold_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Hold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hold_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hold_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `hold_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `hold_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_hold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def merge(self, call_id, sec_call_id, **kwargs):  # noqa: E501
        """Merge two calls  # noqa: E501

        Merge secondary call into main call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge(call_id, sec_call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str sec_call_id: Secondary call ID (required)
        :param str agent_id: Agent ID for removing from the call
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.merge_with_http_info(call_id, sec_call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.merge_with_http_info(call_id, sec_call_id, **kwargs)  # noqa: E501
            return data

    def merge_with_http_info(self, call_id, sec_call_id, **kwargs):  # noqa: E501
        """Merge two calls  # noqa: E501

        Merge secondary call into main call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.merge_with_http_info(call_id, sec_call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str sec_call_id: Secondary call ID (required)
        :param str agent_id: Agent ID for removing from the call
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'sec_call_id', 'agent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `merge`")  # noqa: E501
        # verify the required parameter 'sec_call_id' is set
        if self.api_client.client_side_validation and ('sec_call_id' not in params or
                                                       params['sec_call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sec_call_id` when calling `merge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sec_call_id' in params:
            form_params.append(('secCallId', params['sec_call_id']))  # noqa: E501
        if 'agent_id' in params:
            form_params.append(('agentId', params['agent_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mute_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Mute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def mute_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Mute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mute_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mute_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `mute_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `mute_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_mute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_ring(self, call_id, **kwargs):  # noqa: E501
        """Stop ringing of call  # noqa: E501

        Call goes to offline state after this  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_ring(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_ring_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_ring_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def stop_ring_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Stop ringing of call  # noqa: E501

        Call goes to offline state after this  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_ring_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_ring" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `stop_ring`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/_stopRing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unhold_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unhold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unhold_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unhold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unhold_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def unhold_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unhold channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unhold_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unhold_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `unhold_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `unhold_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_unhold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unmute_channel(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unmute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_channel(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unmute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unmute_channel_with_http_info(call_id, channel_id, **kwargs)  # noqa: E501
            return data

    def unmute_channel_with_http_info(self, call_id, channel_id, **kwargs):  # noqa: E501
        """Unmute channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unmute_channel_with_http_info(call_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: (required)
        :param str channel_id: (required)
        :return: OkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unmute_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if self.api_client.client_side_validation and ('call_id' not in params or
                                                       params['call_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `call_id` when calling `unmute_channel`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in params or
                                                       params['channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `channel_id` when calling `unmute_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey', 'privileges']  # noqa: E501

        return self.api_client.call_api(
            '/calls/{callId}/channels/{channelId}/_unmute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
